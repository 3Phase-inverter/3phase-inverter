
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000218  00800100  0000382e  000038c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000382e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000031  00800318  00800318  00003ada  2**0
                  ALLOC
  3 .stab         00000f0c  00000000  00000000  00003adc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000002ea  00000000  00000000  000049e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000220  00000000  00000000  00004cd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000008d5  00000000  00000000  00004ef2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000395d  00000000  00000000  000057c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000148e  00000000  00000000  00009124  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003c7d  00000000  00000000  0000a5b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000006e0  00000000  00000000  0000e230  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000c56  00000000  00000000  0000e910  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001d76  00000000  00000000  0000f566  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000004be  00000000  00000000  000112dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000a0  00000000  00000000  0001179a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 74 07 	jmp	0xee8	; 0xee8 <__ctors_end>
       4:	0c 94 93 07 	jmp	0xf26	; 0xf26 <__bad_interrupt>
       8:	0c 94 93 07 	jmp	0xf26	; 0xf26 <__bad_interrupt>
       c:	0c 94 93 07 	jmp	0xf26	; 0xf26 <__bad_interrupt>
      10:	0c 94 93 07 	jmp	0xf26	; 0xf26 <__bad_interrupt>
      14:	0c 94 37 11 	jmp	0x226e	; 0x226e <__vector_5>
      18:	0c 94 70 11 	jmp	0x22e0	; 0x22e0 <__vector_6>
      1c:	0c 94 aa 11 	jmp	0x2354	; 0x2354 <__vector_7>
      20:	0c 94 93 07 	jmp	0xf26	; 0xf26 <__bad_interrupt>
      24:	0c 94 b6 14 	jmp	0x296c	; 0x296c <__vector_9>
      28:	0c 94 93 07 	jmp	0xf26	; 0xf26 <__bad_interrupt>
      2c:	0c 94 93 07 	jmp	0xf26	; 0xf26 <__bad_interrupt>
      30:	0c 94 93 07 	jmp	0xf26	; 0xf26 <__bad_interrupt>
      34:	0c 94 93 07 	jmp	0xf26	; 0xf26 <__bad_interrupt>
      38:	0c 94 93 07 	jmp	0xf26	; 0xf26 <__bad_interrupt>
      3c:	0c 94 93 07 	jmp	0xf26	; 0xf26 <__bad_interrupt>
      40:	0c 94 93 07 	jmp	0xf26	; 0xf26 <__bad_interrupt>
      44:	0c 94 93 07 	jmp	0xf26	; 0xf26 <__bad_interrupt>
      48:	0c 94 93 07 	jmp	0xf26	; 0xf26 <__bad_interrupt>
      4c:	0c 94 93 07 	jmp	0xf26	; 0xf26 <__bad_interrupt>
      50:	0c 94 93 07 	jmp	0xf26	; 0xf26 <__bad_interrupt>
      54:	0c 94 e6 07 	jmp	0xfcc	; 0xfcc <__vector_21>
      58:	0c 94 93 07 	jmp	0xf26	; 0xf26 <__bad_interrupt>
      5c:	0c 94 93 07 	jmp	0xf26	; 0xf26 <__bad_interrupt>
      60:	0c 94 93 07 	jmp	0xf26	; 0xf26 <__bad_interrupt>
      64:	0c 94 93 07 	jmp	0xf26	; 0xf26 <__bad_interrupt>
      68:	0c 94 58 13 	jmp	0x26b0	; 0x26b0 <__vector_26>
      6c:	0c 94 93 07 	jmp	0xf26	; 0xf26 <__bad_interrupt>
      70:	0c 94 93 07 	jmp	0xf26	; 0xf26 <__bad_interrupt>
      74:	0c 94 93 07 	jmp	0xf26	; 0xf26 <__bad_interrupt>
      78:	0c 94 93 07 	jmp	0xf26	; 0xf26 <__bad_interrupt>
      7c:	0c 94 93 07 	jmp	0xf26	; 0xf26 <__bad_interrupt>
      80:	0c 94 93 07 	jmp	0xf26	; 0xf26 <__bad_interrupt>
      84:	0c 94 93 07 	jmp	0xf26	; 0xf26 <__bad_interrupt>
      88:	0c 94 93 07 	jmp	0xf26	; 0xf26 <__bad_interrupt>

0000008c <__c.2005>:
      8c:	45 45 50 52 4f 4d 20 77 72 69 74 65 20 64 61 74     EEPROM write dat
      9c:	61 5f 31 20 66 61 69 6c 65 64 2e 2e 00              a_1 failed...

000000a9 <__c.2002>:
      a9:	45 45 50 52 4f 4d 20 77 72 69 74 65 2d 32 20 66     EEPROM write-2 f
      b9:	61 69 6c 65 64 2e 2e 00                             ailed...

000000c1 <__c.1999>:
      c1:	45 45 50 52 4f 4d 20 77 72 69 74 65 2d 31 20 66     EEPROM write-1 f
      d1:	61 69 6c 65 64 2e 2e 00                             ailed...

000000d9 <__c.1996>:
      d9:	45 45 50 52 4f 4d 20 73 65 6e 64 41 64 64 72 65     EEPROM sendAddre
      e9:	73 73 31 20 66 61 69 6c 65 64 2e 2e 00              ss1 failed...

000000f6 <__c.1993>:
      f6:	69 32 63 20 73 74 61 72 74 20 66 61 69 6c 65 64     i2c start failed
     106:	2e 2e 00                                            ...

00000109 <__c.1991>:
     109:	57 61 69 74 2e 2e 2e 00                             Wait....

00000111 <__c.1961>:
     111:	45 45 50 52 4f 4d 20 77 72 69 74 65 20 64 61 74     EEPROM write dat
     121:	61 5f 31 20 66 61 69 6c 65 64 2e 2e 00              a_1 failed...

0000012e <__c.1958>:
     12e:	45 45 50 52 4f 4d 20 77 72 69 74 65 2d 32 20 66     EEPROM write-2 f
     13e:	61 69 6c 65 64 2e 2e 00                             ailed...

00000146 <__c.1955>:
     146:	45 45 50 52 4f 4d 20 77 72 69 74 65 2d 31 20 66     EEPROM write-1 f
     156:	61 69 6c 65 64 2e 2e 00                             ailed...

0000015e <__c.1952>:
     15e:	45 45 50 52 4f 4d 20 73 65 6e 64 41 64 64 72 65     EEPROM sendAddre
     16e:	73 73 31 20 66 61 69 6c 65 64 2e 2e 00              ss1 failed...

0000017b <__c.1949>:
     17b:	69 32 63 20 73 74 61 72 74 20 66 61 69 6c 65 64     i2c start failed
     18b:	2e 2e 00                                            ...

0000018e <__c.1931>:
     18e:	45 45 50 52 4f 4d 20 72 65 63 65 69 76 65 20 66     EEPROM receive f
     19e:	61 69 6c 65 64 2e 2e 00                             ailed...

000001a6 <__c.1924>:
     1a6:	45 45 50 52 4f 4d 20 73 65 6e 64 41 64 64 72 65     EEPROM sendAddre
     1b6:	73 73 32 20 66 61 69 6c 65 64 2e 2e 00              ss2 failed...

000001c3 <__c.1921>:
     1c3:	69 32 63 20 72 65 70 65 61 74 2d 73 74 61 72 74     i2c repeat-start
     1d3:	20 66 61 69 6c 65 64 2e 2e 00                        failed...

000001dd <__c.1917>:
     1dd:	45 45 50 52 4f 4d 20 77 72 69 74 65 2d 32 20 66     EEPROM write-2 f
     1ed:	61 69 6c 65 64 2e 2e 00                             ailed...

000001f5 <__c.1914>:
     1f5:	45 45 50 52 4f 4d 20 77 72 69 74 65 2d 31 20 66     EEPROM write-1 f
     205:	61 69 6c 65 64 2e 2e 00                             ailed...

0000020d <__c.1910>:
     20d:	45 45 50 52 4f 4d 20 73 65 6e 64 41 64 64 72 65     EEPROM sendAddre
     21d:	73 73 31 20 66 61 69 6c 65 64 2e 2e 00              ss1 failed...

0000022a <__c.1905>:
     22a:	69 32 63 20 73 74 61 72 74 20 66 61 69 6c 65 64     i2c start failed
     23a:	2e 2e 00                                            ...

0000023d <ef5x7>:
     23d:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     24d:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     25d:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
     26d:	1c 00 08 2a 1c 2a 08 08 08 3e 08 08 00 50 30 00     ...*.*...>...P0.
     27d:	00 08 08 08 08 08 00 30 30 00 00 20 10 08 04 02     .......00.. ....
     28d:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     29d:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     2ad:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     2bd:	29 1e 00 36 36 00 00 00 56 36 00 00 00 08 14 22     )..66...V6....."
     2cd:	41 14 14 14 14 14 41 22 14 08 00 02 01 51 09 06     A.....A".....Q..
     2dd:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     2ed:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     2fd:	09 01 01 3e 41 41 51 32 7f 08 08 08 7f 00 41 7f     ...>AAQ2......A.
     30d:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     31d:	40 7f 02 04 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     32d:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     33d:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     34d:	40 20 1f 7f 20 18 20 7f 63 14 08 14 63 03 04 78     @ .. . .c...c..x
     35d:	04 03 61 51 49 45 43 00 00 7f 41 41 02 04 08 10     ..aQIEC...AA....
     36d:	20 41 41 7f 00 00 04 02 01 02 04 40 40 40 40 40      AA........@@@@@
     37d:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     38d:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     39d:	09 01 02 08 14 54 54 3c 7f 08 04 04 78 00 44 7d     .....TT<....x.D}
     3ad:	40 00 20 40 44 3d 00 00 7f 10 28 44 00 41 7f 40     @. @D=....(D.A.@
     3bd:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     3cd:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     3dd:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     3ed:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     3fd:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     40d:	00 00 41 36 08 00 08 08 2a 1c 08 08 1c 2a 08 08     ..A6....*....*..

0000041d <sine0>:
     41d:	80 83 86 89 8c 8f 92 95 98 9c 9f a2 a5 a8 ab ae     ................
     42d:	b0 b3 b6 b9 bc bf c1 c4 c7 c9 cc ce d1 d3 d5 d8     ................
     43d:	da dc de e0 e2 e4 e6 e8 ea ec ed ef f0 f2 f3 f5     ................
     44d:	f6 f7 f8 f9 fa fb fc fc fd fe fe ff ff ff ff ff     ................
     45d:	ff ff ff ff ff ff fe fe fd fc fc fb fa f9 f8 f7     ................
     46d:	f6 f5 f3 f2 f0 ef ed ec ea e8 e6 e4 e2 e0 de dc     ................
     47d:	da d8 d5 d3 d1 ce cc c9 c7 c4 c1 bf bc b9 b6 b3     ................
     48d:	b0 ae ab a8 a5 a2 9f 9c 98 95 92 8f 8c 89 86 83     ................
     49d:	80 7c 79 76 73 70 6d 6a 67 63 60 5d 5a 57 54 51     .|yvspmjgc`]ZWTQ
     4ad:	4f 4c 49 46 43 40 3e 3b 38 36 33 31 2e 2c 2a 27     OLIFC@>;8631.,*'
     4bd:	25 23 21 1f 1d 1b 19 17 15 13 12 10 0f 0d 0c 0a     %#!.............
     4cd:	09 08 07 06 05 04 03 03 02 01 01 00 00 00 00 00     ................
     4dd:	00 00 00 00 00 00 01 01 02 03 03 04 05 06 07 08     ................
     4ed:	09 0a 0c 0d 0f 10 12 13 15 17 19 1b 1d 1f 21 23     ..............!#
     4fd:	25 27 2a 2c 2e 31 33 36 38 3b 3e 40 43 46 49 4c     %'*,.1368;>@CFIL
     50d:	4f 51 54 57 5a 5d 60 63 67 6a 6d 70 73 76 79 7c     OQTWZ]`cgjmpsvy|

0000051d <sine>:
     51d:	80 83 86 89 8c 8f 92 95 98 9c 9f a2 a5 a8 ab ae     ................
     52d:	b0 b3 b6 b9 bc bf c1 c4 c7 c9 cc ce d1 d3 d5 d8     ................
     53d:	da dc de e0 e2 e4 e6 e8 ea ec ed ef f0 f2 f3 f5     ................
     54d:	f6 f7 f8 f9 fa fb fc fc fd fe fe ff ff ff ff ff     ................
     55d:	ff ff ff ff ff ff fe fe fd fc fc fb fa f9 f8 f7     ................
     56d:	f6 f5 f3 f2 f0 ef ed ec ea e8 e6 e4 e2 e0 de dc     ................
     57d:	da d8 d5 d3 d1 ce cc c9 c7 c4 c1 bf bc b9 b6 b3     ................
     58d:	b0 ae ab a8 a5 a2 9f 9c 98 95 92 8f 8c 89 86 83     ................
     59d:	80 7c 79 76 73 70 6d 6a 67 63 60 5d 5a 57 54 51     .|yvspmjgc`]ZWTQ
     5ad:	4f 4c 49 46 43 40 3e 3b 38 36 33 31 2e 2c 2a 27     OLIFC@>;8631.,*'
     5bd:	25 23 21 1f 1d 1b 19 17 15 13 12 10 0f 0d 0c 0a     %#!.............
     5cd:	09 08 07 06 05 04 03 03 02 01 01 00 00 00 00 00     ................
     5dd:	00 00 00 00 00 00 01 01 02 03 03 04 05 06 07 08     ................
     5ed:	09 0a 0c 0d 0f 10 12 13 15 17 19 1b 1d 1f 21 23     ..............!#
     5fd:	25 27 2a 2c 2e 31 33 36 38 3b 3e 40 43 46 49 4c     %'*,.1368;>@CFIL
     60d:	4f 51 54 57 5a 5d 60 63 67 6a 6d 70 73 76 79 7c     OQTWZ]`cgjmpsvy|

0000061d <sine1>:
     61d:	00 05 09 0e 13 17 1c 21 25 2a 2f 33 38 3c 41 46     .......!%*/38<AF
     62d:	4a 4f 53 57 5c 60 64 69 6d 71 75 7a 7e 82 86 8a     JOSW\`dimquz~...
     63d:	8e 92 95 99 9d a1 a4 a8 ab af b2 b5 b9 bc bf c2     ................
     64d:	c5 c8 cb ce d0 d3 d6 d8 db dd df e2 e4 e6 e8 ea     ................
     65d:	ec ed ef f1 f2 f4 f5 f6 f7 f8 f9 fa fb fc fd fd     ................
     66d:	fe fe ff ff ff ff ff ff ff fe fe fe fd fc fc fb     ................
     67d:	fa f9 f8 f7 f6 f4 f3 f2 f0 ee ed eb e9 e7 e5 e3     ................
     68d:	e1 df dc da d7 d5 d2 d0 cd ca c7 c4 c1 be bb b8     ................
     69d:	b4 b1 ae aa a7 a3 9f 9c 98 94 90 8c 88 84 80 7c     ...............|
     6ad:	78 74 70 6c 67 63 5f 5a 56 51 4d 49 44 3f 3b 36     xtplgc_ZVQMID?;6
     6bd:	32 2d 29 24 1f 1b 16 11 0d 08 03 fe fa f5 f0 ec     2-)$............
     6cd:	e7 e2 de d9 d4 d0 cb c7 c2 bd b9 b4 b0 ac a7 a3     ................
     6dd:	9e 9a 96 92 8d 89 85 81 7d 79 75 71 6d 69 66 62     ........}yuqmifb
     6ed:	5e 5b 57 54 50 4d 49 46 43 40 3d 3a 37 34 31 2f     ^[WTPMIFC@=:741/
     6fd:	2c 29 27 24 22 20 1e 1c 19 18 16 14 12 10 0f 0d     ,)'$" ..........
     70d:	0c 0b 09 08 07 06 05 04 04 03 03 02 02 01 01 01     ................

0000071d <Timer_Value>:
     71d:	00 00 24 f4 73 cb 63 ae 97 98 a2 87 12 7a f9 6e     ..$.s.c......z.n
     72d:	ba 65 e6 5d 31 57 61 51 4b 4c ce 47 d1 43 3f 40     .e.]1WaQKL.G.C?@
     73d:	09 3d 21 3a 7d 37 13 35 dd 32 d4 30 f3 2e 36 2d     .=!:}7.5.2.0..6-
     74d:	99 2b 18 2a b1 28 61 27 26 26 fe 24 e7 23 e1 22     .+.*.(a'&&.$.#."
     75d:	e9 21 fe 20 20 20 4d 1f 85 1e c6 1d 10 1d 63 1c     .!.   M.......c.
     76d:	be 1b 20 1b 89 1a f9 19 6e 19 ea 18 6a 18 ef 17     .. .....n...j...
     77d:	7a 17 08 17 9b 16 32 16 cc 15 6a 15 0c 15 b1 14     z.....2...j.....
     78d:	58 14 03 14 b0 13 60 13 13 13 c8 12 7f 12 38 12     X.....`.......8.
     79d:	f4 11 b1 11 70 11 31 11 f4 10 b9 10 7f 10 47 10     ....p.1.......G.
     7ad:	10 10 da 0f a6 0f 74 0f 42 0f 12 0f e3 0e b5 0e     ......t.B.......
     7bd:	88 0e 5c 0e 32 0e 08 0e df 0d b7 0d 90 0d 6a 0d     ..\.2.........j.
     7cd:	45 0d 20 0d fc 0c d9 0c b7 0c 96 0c 75 0c 55 0c     E. .........u.U.
     7dd:	35 0c 16 0c f8 0b da 0b bd 0b a0 0b 84 0b 69 0b     5.............i.
     7ed:	4e 0b 33 0b 19 0b ff 0a e6 0a cd 0a b5 0a 9d 0a     N.3.............
     7fd:	86 0a 6f 0a 58 0a 42 0a 2c 0a 17 0a 01 0a ed 09     ..o.X.B.,.......
     80d:	d8 09 c4 09 b0 09 9d 09 89 09 76 09 64 09 51 09     ..........v.d.Q.
     81d:	3f 09 2e 09 1c 09 0b 09 fa 08 e9 08 d8 08 c8 08     ?...............
     82d:	b8 08 a8 08 99 08 89 08 7a 08 6b 08 5c 08 4e 08     ........z.k.\.N.
     83d:	3f 08 31 08 23 08 16 08 08 08 fa 07 ed 07 e0 07     ?.1.#...........
     84d:	d3 07 c6 07 ba 07 ad 07 a1 07 95 07 89 07 7d 07     ..............}.
     85d:	71 07 66 07 5b 07 4f 07 44 07 39 07 2e 07 23 07     q.f.[.O.D.9...#.
     86d:	19 07 0e 07 04 07 fa 06 f0 06 e6 06 dc 06 d2 06     ................
     87d:	c8 06 bf 06 b5 06 ac 06 a2 06 99 06 90 06 87 06     ................
     88d:	7e 06 75 06 6d 06 64 06 5c 06 53 06 4b 06 43 06     ~.u.m.d.\.S.K.C.
     89d:	3a 06 32 06 2a 06 22 06 35 0c 25 0c 16 0c 07 0c     :.2.*.".5.%.....
     8ad:	f8 0b e9 0b da 0b cb 0b bd 0b ae 0b a0 0b 92 0b     ................
     8bd:	84 0b 76 0b 69 0b 5b 0b 4e 0b 40 0b 33 0b 26 0b     ..v.i.[.N.@.3.&.
     8cd:	19 0b 0c 0b ff 0a f3 0a e6 0a da 0a cd 0a c1 0a     ................
     8dd:	b5 0a a9 0a 9d 0a 92 0a 86 0a 7a 0a 6f 0a 64 0a     ..........z.o.d.
     8ed:	58 0a 4d 0a 42 0a 37 0a 2c 0a 21 0a 17 0a 0c 0a     X.M.B.7.,.!.....
     8fd:	01 0a f7 09 ed 09 e2 09 d8 09 ce 09 c4 09 ba 09     ................
     90d:	b0 09 a6 09 9d 09 93 09 89 09 80 09 76 09 6d 09     ............v.m.
     91d:	64 09 5b 09 51 09 48 09 3f 09 36 09 2e 09 25 09     d.[.Q.H.?.6...%.
     92d:	1c 09 13 09 0b 09 02 09 fa 08 f1 08 e9 08 e1 08     ................
     93d:	d8 08 d0 08 c8 08 c0 08 b8 08 b0 08 a8 08 a0 08     ................
     94d:	99 08 91 08 89 08 82 08 7a 08 73 08 6b 08 64 08     ........z.s.k.d.
     95d:	5c 08 55 08 4e 08 47 08 3f 08 38 08 31 08 2a 08     \.U.N.G.?.8.1.*.
     96d:	23 08 1c 08 16 08 0f 08 08 08 01 08 fa 07 f4 07     #...............
     97d:	ed 07 e7 07 e0 07 da 07 d3 07 cd 07 c6 07 c0 07     ................
     98d:	ba 07 b4 07 ad 07 a7 07 a1 07 9b 07 95 07 8f 07     ................
     99d:	89 07 83 07 7d 07 77 07 71 07 6c 07 66 07 60 07     ....}.w.q.l.f.`.
     9ad:	5b 07 55 07 4f 07 4a 07 44 07 3f 07 39 07 34 07     [.U.O.J.D.?.9.4.
     9bd:	2e 07 29 07 23 07 1e 07 19 07 14 07 0e 07 09 07     ..).#...........
     9cd:	04 07 ff 06 fa 06 f5 06 f0 06 eb 06 e6 06 e1 06     ................
     9dd:	dc 06 d7 06 d2 06 cd 06 c8 06 c3 06 bf 06 ba 06     ................
     9ed:	b5 06 b0 06 ac 06 a7 06 a2 06 9e 06 99 06 95 06     ................
     9fd:	90 06 8c 06 87 06 83 06 7e 06 7a 06 75 06 71 06     ........~.z.u.q.
     a0d:	6d 06 68 06 64 06 60 06 5c 06 57 06 53 06 4f 06     m.h.d.`.\.W.S.O.
     a1d:	4b 06 47 06 43 06 3e 06 3a 06 36 06 32 06 2e 06     K.G.C.>.:.6.2...
     a2d:	2a 06 26 06 22 06 1e 06 35 0c 2d 0c 25 0c 1e 0c     *.&."...5.-.%...
     a3d:	16 0c 0e 0c 07 0c ff 0b f8 0b f0 0b e9 0b e1 0b     ................
     a4d:	da 0b d3 0b cb 0b c4 0b bd 0b b6 0b ae 0b a7 0b     ................
     a5d:	a0 0b 99 0b 92 0b 8b 0b 84 0b 7d 0b 76 0b 6f 0b     ..........}.v.o.
     a6d:	69 0b 62 0b 5b 0b 54 0b 4e 0b 47 0b 40 0b 3a 0b     i.b.[.T.N.G.@.:.
     a7d:	33 0b 2c 0b 26 0b 1f 0b 19 0b 12 0b 0c 0b 06 0b     3.,.&...........
     a8d:	ff 0a f9 0a f3 0a ec 0a e6 0a e0 0a da 0a d4 0a     ................
     a9d:	cd 0a c7 0a c1 0a bb 0a b5 0a af 0a a9 0a a3 0a     ................
     aad:	9d 0a 97 0a 92 0a 8c 0a 86 0a 80 0a 7a 0a 75 0a     ............z.u.
     abd:	6f 0a 69 0a 64 0a 5e 0a 58 0a 53 0a 4d 0a 48 0a     o.i.d.^.X.S.M.H.
     acd:	42 0a 3d 0a 37 0a 32 0a 2c 0a 27 0a 21 0a 1c 0a     B.=.7.2.,.'.!...
     add:	17 0a 11 0a 0c 0a 07 0a 01 0a fc 09 f7 09 f2 09     ................
     aed:	ed 09 e7 09 e2 09 dd 09 d8 09 d3 09 ce 09 c9 09     ................
     afd:	c4 09 bf 09 ba 09 b5 09 b0 09 ab 09 a6 09 a1 09     ................
     b0d:	9d 09 98 09 93 09 8e 09 89 09 85 09 80 09 7b 09     ..............{.
     b1d:	76 09 72 09 6d 09 68 09 64 09 5f 09 5b 09 56 09     v.r.m.h.d._.[.V.
     b2d:	51 09 4d 09 48 09 44 09 3f 09 3b 09 36 09 32 09     Q.M.H.D.?.;.6.2.
     b3d:	2e 09 29 09 25 09 20 09 1c 09 18 09 13 09 0f 09     ..).%. .........
     b4d:	0b 09 07 09 02 09 fe 08 fa 08 f6 08 f1 08 ed 08     ................
     b5d:	e9 08 e5 08 e1 08 dd 08 d8 08 d4 08 d0 08 cc 08     ................
     b6d:	c8 08 c4 08 c0 08 bc 08 b8 08 b4 08 b0 08 ac 08     ................
     b7d:	a8 08 a4 08 a0 08 9d 08 99 08 95 08 91 08 8d 08     ................
     b8d:	89 08 86 08 82 08 7e 08 7a 08 76 08 73 08 6f 08     ......~.z.v.s.o.
     b9d:	6b 08 67 08 64 08 60 08 5c 08 59 08 55 08 51 08     k.g.d.`.\.Y.U.Q.
     bad:	4e 08 4a 08 47 08 43 08 3f 08 3c 08 38 08 35 08     N.J.G.C.?.<.8.5.
     bbd:	31 08 2e 08 2a 08 27 08 47 10 40 10 39 10 32 10     1...*.'.G.@.9.2.
     bcd:	2b 10 24 10 1d 10 17 10 10 10 09 10 02 10 fc 0f     +.$.............
     bdd:	f5 0f ee 0f e8 0f e1 0f da 0f d4 0f cd 0f c7 0f     ................
     bed:	c0 0f ba 0f b3 0f ad 0f a6 0f a0 0f 9a 0f 93 0f     ................
     bfd:	8d 0f 87 0f 80 0f 7a 0f 74 0f 6d 0f 67 0f 61 0f     ......z.t.m.g.a.
     c0d:	5b 0f 55 0f 4e 0f 48 0f 42 0f 3c 0f 36 0f 30 0f     [.U.N.H.B.<.6.0.
     c1d:	2a 0f 24 0f 1e 0f 18 0f 12 0f 0c 0f 06 0f 00 0f     *.$.............
     c2d:	fa 0e f4 0e ef 0e e9 0e e3 0e dd 0e d7 0e d2 0e     ................
     c3d:	cc 0e c6 0e c0 0e bb 0e b5 0e af 0e aa 0e a4 0e     ................
     c4d:	9f 0e 99 0e 93 0e 8e 0e 88 0e 83 0e 7d 0e 78 0e     ............}.x.
     c5d:	72 0e 6d 0e 67 0e 62 0e 5c 0e 57 0e 52 0e 4c 0e     r.m.g.b.\.W.R.L.
     c6d:	47 0e 42 0e 3c 0e 37 0e 32 0e 2c 0e 27 0e 22 0e     G.B.<.7.2.,.'.".
     c7d:	1d 0e 18 0e 12 0e 0d 0e 08 0e 03 0e fe 0d f9 0d     ................
     c8d:	f3 0d ee 0d e9 0d e4 0d df 0d da 0d d5 0d d0 0d     ................
     c9d:	cb 0d c6 0d c1 0d bc 0d b7 0d b2 0d ad 0d a9 0d     ................
     cad:	a4 0d 9f 0d 9a 0d 95 0d 90 0d 8b 0d 87 0d 82 0d     ................
     cbd:	7d 0d 78 0d 74 0d 6f 0d 6a 0d 65 0d 61 0d 5c 0d     }.x.t.o.j.e.a.\.
     ccd:	57 0d 53 0d 4e 0d 49 0d 45 0d 40 0d 3c 0d 37 0d     W.S.N.I.E.@.<.7.
     cdd:	32 0d 2e 0d 29 0d 25 0d 20 0d 1c 0d 17 0d 13 0d     2...).%. .......
     ced:	0e 0d 0a 0d 05 0d 01 0d fc 0c f8 0c f4 0c ef 0c     ................
     cfd:	eb 0c e7 0c e2 0c de 0c d9 0c d5 0c d1 0c cd 0c     ................
     d0d:	c8 0c c4 0c c0 0c bb 0c b7 0c b3 0c af 0c ab 0c     ................
     d1d:	a6 0c a2 0c 9e 0c 9a 0c 96 0c 92 0c 8d 0c 89 0c     ................
     d2d:	85 0c 81 0c 7d 0c 79 0c 75 0c 71 0c 6d 0c 69 0c     ....}.y.u.q.m.i.
     d3d:	65 0c 61 0c 5d 0c 59 0c 55 0c 51 0c 4d 0c 49 0c     e.a.].Y.U.Q.M.I.
     d4d:	45 0c 41 0c 3d 0c 39 0c 6a 18 62 18 5a 18 53 18     E.A.=.9.j.b.Z.S.
     d5d:	4b 18 43 18 3b 18 34 18 2c 18 24 18 1d 18 15 18     K.C.;.4.,.$.....
     d6d:	0e 18 06 18 ff 17 f7 17 ef 17 e8 17 e0 17 d9 17     ................
     d7d:	d2 17 ca 17 c3 17 bb 17 b4 17 ad 17 a5 17 9e 17     ................
     d8d:	97 17 8f 17 88 17 81 17 7a 17 72 17 6b 17 64 17     ........z.r.k.d.
     d9d:	5d 17 56 17 4f 17 47 17 40 17 39 17 32 17 2b 17     ].V.O.G.@.9.2.+.
     dad:	24 17 1d 17 16 17 0f 17 08 17 01 17 fa 16 f3 16     $...............
     dbd:	ed 16 e6 16 df 16 d8 16 d1 16 ca 16 c4 16 bd 16     ................
     dcd:	b6 16 af 16 a8 16 a2 16 9b 16 94 16 8e 16 87 16     ................
     ddd:	80 16 7a 16 73 16 6d 16 66 16 5f 16 59 16 52 16     ..z.s.m.f._.Y.R.
     ded:	4c 16 45 16 3f 16 38 16 32 16 2b 16 25 16 1f 16     L.E.?.8.2.+.%...
     dfd:	18 16 12 16 0b 16 05 16 ff 15 f8 15 f2 15 ec 15     ................
     e0d:	e5 15 df 15 d9 15 d3 15 cc 15 c6 15 c0 15 ba 15     ................
     e1d:	b4 15 ad 15 a7 15 a1 15 9b 15 95 15 8f 15 89 15     ................
     e2d:	83 15 7d 15 77 15 70 15 6a 15 64 15 5e 15 58 15     ..}.w.p.j.d.^.X.
     e3d:	53 15 4d 15 47 15 41 15 3b 15 35 15 2f 15 29 15     S.M.G.A.;.5./.).
     e4d:	23 15 1d 15 18 15 12 15 0c 15 06 15 00 15 fb 14     #...............
     e5d:	f5 14 ef 14 e9 14 e4 14 de 14 d8 14 d2 14 cd 14     ................
     e6d:	c7 14 c1 14 bc 14 b6 14 b1 14 ab 14 a5 14 a0 14     ................
     e7d:	9a 14 95 14 8f 14 8a 14 84 14 7f 14 79 14 74 14     ............y.t.
     e8d:	6e 14 69 14 63 14 5e 14 58 14 53 14 4e 14 48 14     n.i.c.^.X.S.N.H.
     e9d:	43 14 3d 14 38 14 33 14 2d 14 28 14 23 14 1d 14     C.=.8.3.-.(.#...
     ead:	18 14 13 14 0d 14 08 14 03 14 fe 13 f8 13 f3 13     ................
     ebd:	ee 13 e9 13 e4 13 de 13 d9 13 d4 13 cf 13 ca 13     ................
     ecd:	c5 13 c0 13 bb 13 b5 13 b0 13 ab 13 a6 13 a1 13     ................
     edd:	9c 13 97 13 92 13 8d 13 88 13 00                    ...........

00000ee8 <__ctors_end>:
     ee8:	11 24       	eor	r1, r1
     eea:	1f be       	out	0x3f, r1	; 63
     eec:	cf ef       	ldi	r28, 0xFF	; 255
     eee:	d0 e1       	ldi	r29, 0x10	; 16
     ef0:	de bf       	out	0x3e, r29	; 62
     ef2:	cd bf       	out	0x3d, r28	; 61

00000ef4 <__do_copy_data>:
     ef4:	13 e0       	ldi	r17, 0x03	; 3
     ef6:	a0 e0       	ldi	r26, 0x00	; 0
     ef8:	b1 e0       	ldi	r27, 0x01	; 1
     efa:	ee e2       	ldi	r30, 0x2E	; 46
     efc:	f8 e3       	ldi	r31, 0x38	; 56
     efe:	00 e0       	ldi	r16, 0x00	; 0
     f00:	0b bf       	out	0x3b, r16	; 59
     f02:	02 c0       	rjmp	.+4      	; 0xf08 <__do_copy_data+0x14>
     f04:	07 90       	elpm	r0, Z+
     f06:	0d 92       	st	X+, r0
     f08:	a8 31       	cpi	r26, 0x18	; 24
     f0a:	b1 07       	cpc	r27, r17
     f0c:	d9 f7       	brne	.-10     	; 0xf04 <__do_copy_data+0x10>

00000f0e <__do_clear_bss>:
     f0e:	13 e0       	ldi	r17, 0x03	; 3
     f10:	a8 e1       	ldi	r26, 0x18	; 24
     f12:	b3 e0       	ldi	r27, 0x03	; 3
     f14:	01 c0       	rjmp	.+2      	; 0xf18 <.do_clear_bss_start>

00000f16 <.do_clear_bss_loop>:
     f16:	1d 92       	st	X+, r1

00000f18 <.do_clear_bss_start>:
     f18:	a9 34       	cpi	r26, 0x49	; 73
     f1a:	b1 07       	cpc	r27, r17
     f1c:	e1 f7       	brne	.-8      	; 0xf16 <.do_clear_bss_loop>
     f1e:	0e 94 01 11 	call	0x2202	; 0x2202 <main>
     f22:	0c 94 15 1c 	jmp	0x382a	; 0x382a <_exit>

00000f26 <__bad_interrupt>:
     f26:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000f2a <a2dSingleSample>:
}

// configure A2D converter to Single Sample mode
void a2dSingleSample(void)
{
	cbi(ADCSR, ADFR);
     f2a:	35 98       	cbi	0x06, 5	; 6
}
     f2c:	08 95       	ret

00000f2e <a2dAutoTrigger>:

// configure A2D converter to Auto Trigger mode
void a2dAutoTrigger(void)
{
	sbi(ADCSR, ADFR);
     f2e:	35 9a       	sbi	0x06, 5	; 6
}
     f30:	08 95       	ret

00000f32 <a2dSet10bit>:

// configure A2D converter right-adjusted result for 10bit conversion result
void a2dSet10bit(void)
{
	cbi(ADMUX, ADLAR);																					// set to right-adjusted result
     f32:	3d 98       	cbi	0x07, 5	; 7
}
     f34:	08 95       	ret

00000f36 <a2dSet8bit>:

// configure A2D converter right-adjusted result for 8bit conversion result
void a2dSet8bit(void)
{
	sbi(ADMUX, ADLAR);																					// clear right-adjusted result
     f36:	3d 9a       	sbi	0x07, 5	; 7
}
     f38:	08 95       	ret

00000f3a <a2dTurnOn>:

// turn on a2d converter
void a2dTurnOn(void)
{
	sbi(ADCSR, ADEN);																						// enable ADC (turn on ADC power)
     f3a:	37 9a       	sbi	0x06, 7	; 6
}
     f3c:	08 95       	ret

00000f3e <a2dTurnOff>:

// turn off a2d converter
void a2dTurnOff(void)
{
	#if (FastRead ==0) || (FastRead ==1)
		cbi(ADCSR, ADIE);																					// disable ADC interrupts
     f3e:	33 98       	cbi	0x06, 3	; 6
	#endif
	
	cbi(ADCSR, ADEN);																						// disable ADC (turn off ADC power)
     f40:	37 98       	cbi	0x06, 7	; 6
}
     f42:	08 95       	ret

00000f44 <a2dSetPrescaler>:

// configure A2D converter clock division (prescaling)
void a2dSetPrescaler(unsigned char prescale)
{
	outb(ADCSR, ((inb(ADCSR) & ~ADC_PRESCALE_MASK) | prescale));
     f44:	96 b1       	in	r25, 0x06	; 6
     f46:	98 7f       	andi	r25, 0xF8	; 248
     f48:	89 2b       	or	r24, r25
     f4a:	86 b9       	out	0x06, r24	; 6
}
     f4c:	08 95       	ret

00000f4e <a2dSetReference>:

// configure A2D converter voltage reference
void a2dSetReference(unsigned char ref)
{
	outb(ADMUX, ((inb(ADMUX) & ~ADC_REFERENCE_MASK) | (ref<<6)));
     f4e:	97 b1       	in	r25, 0x07	; 7
     f50:	82 95       	swap	r24
     f52:	88 0f       	add	r24, r24
     f54:	88 0f       	add	r24, r24
     f56:	80 7c       	andi	r24, 0xC0	; 192
     f58:	9f 73       	andi	r25, 0x3F	; 63
     f5a:	98 2b       	or	r25, r24
     f5c:	97 b9       	out	0x07, r25	; 7
}
     f5e:	08 95       	ret

00000f60 <a2dInit>:
// functions

// initialize a2d converter
void a2dInit(void)
{
	a2dTurnOn();																								// enable ADC (turn on ADC power)
     f60:	0e 94 9d 07 	call	0xf3a	; 0xf3a <a2dTurnOn>
	
	a2dSingleSample();																					// default to single sample convert mode
     f64:	0e 94 95 07 	call	0xf2a	; 0xf2a <a2dSingleSample>
	a2dSetPrescaler(ADC_PRESCALE);															// set default prescaler
     f68:	86 e0       	ldi	r24, 0x06	; 6
     f6a:	0e 94 a2 07 	call	0xf44	; 0xf44 <a2dSetPrescaler>
	a2dSetReference(ADC_REFERENCE);															// set default reference
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	0e 94 a7 07 	call	0xf4e	; 0xf4e <a2dSetReference>
	a2dSet10bit();																							// set to right-adjusted result
     f74:	0e 94 99 07 	call	0xf32	; 0xf32 <a2dSet10bit>

	#if (FastRead ==0) || (FastRead ==1)
		a2dCompleteFlag = False;																	// clear conversion complete flag
     f78:	10 92 25 03 	sts	0x0325, r1

		sbi(ADCSR, ADIE);																					// enable ADC interrupts
     f7c:	33 9a       	sbi	0x06, 3	; 6
	
		sei();																										// turn on interrupts (if not already on)
     f7e:	78 94       	sei
	#endif
}
     f80:	08 95       	ret

00000f82 <a2dSetChannel>:
}

// sets the a2d input channel
void a2dSetChannel(unsigned char ch)
{
	outb(ADMUX, (inb(ADMUX) & ~ADC_MUX_MASK) | (ch & ADC_MUX_MASK));			// set channel
     f82:	97 b1       	in	r25, 0x07	; 7
     f84:	8f 71       	andi	r24, 0x1F	; 31
     f86:	90 7e       	andi	r25, 0xE0	; 224
     f88:	98 2b       	or	r25, r24
     f8a:	97 b9       	out	0x07, r25	; 7
}
     f8c:	08 95       	ret

00000f8e <a2dStartConvert>:

// start a conversion on the current a2d input channel
void a2dStartConvert(void)
{
	#if (FastRead ==0) || (FastRead ==1)
		sbi(ADCSR, ADIF);																					// clear hardware "conversion complete" flag 
     f8e:	34 9a       	sbi	0x06, 4	; 6
	#endif
	
	sbi(ADCSR, ADSC);																						// start conversion
     f90:	36 9a       	sbi	0x06, 6	; 6
}
     f92:	08 95       	ret

00000f94 <a2dIsComplete>:

// return True if conversion is complete
unsigned char a2dIsComplete(void)
{
	return bit_is_set(ADCSR, ADSC);
     f94:	86 b1       	in	r24, 0x06	; 6
}
     f96:	80 74       	andi	r24, 0x40	; 64
     f98:	08 95       	ret

00000f9a <a2dConvert10bit>:
// Perform a 10-bit conversion
// starts conversion, waits until conversion is done, and returns result
unsigned short a2dConvert10bit(unsigned char ch)
{
	#if (FastRead ==0)
		a2dCompleteFlag = False;																						// clear conversion complete flag
     f9a:	10 92 25 03 	sts	0x0325, r1
		outb(ADMUX, (inb(ADMUX) & ~ADC_MUX_MASK) | (ch & ADC_MUX_MASK));		// set channel
     f9e:	97 b1       	in	r25, 0x07	; 7
     fa0:	8f 71       	andi	r24, 0x1F	; 31
     fa2:	90 7e       	andi	r25, 0xE0	; 224
     fa4:	98 2b       	or	r25, r24
     fa6:	97 b9       	out	0x07, r25	; 7
		
		sbi(ADCSR, ADIF);																										// clear hardware "conversion complete" flag 
     fa8:	34 9a       	sbi	0x06, 4	; 6
		sbi(ADCSR, ADSC);																										// start conversion
     faa:	36 9a       	sbi	0x06, 6	; 6
		while(!a2dCompleteFlag);																						// wait until conversion complete
     fac:	80 91 25 03 	lds	r24, 0x0325
     fb0:	88 23       	and	r24, r24
     fb2:	e1 f3       	breq	.-8      	; 0xfac <a2dConvert10bit+0x12>
		sbi(ADCSR, ADSC);																										// start conversion
		while(bit_is_set(ADCSR, ADSC));																			// wait until conversion complete

	#endif
	
	return (ADCW);																												// read ADC (full 10 bits);
     fb4:	24 b1       	in	r18, 0x04	; 4
     fb6:	35 b1       	in	r19, 0x05	; 5
}
     fb8:	82 2f       	mov	r24, r18
     fba:	93 2f       	mov	r25, r19
     fbc:	08 95       	ret

00000fbe <a2dConvert8bit>:
// starts conversion, waits until conversion is done, and returns result
unsigned char a2dConvert8bit(unsigned char ch)
{
	#if (FastRead ==0) || (FastRead ==1)
		// do 10-bit conversion and return highest 8 bits
		return (a2dConvert10bit(ch)>>2);																		// return ADC MSB byte
     fbe:	0e 94 cd 07 	call	0xf9a	; 0xf9a <a2dConvert10bit>
     fc2:	96 95       	lsr	r25
     fc4:	87 95       	ror	r24
     fc6:	96 95       	lsr	r25
     fc8:	87 95       	ror	r24
	
	#else
		return (ADCH);																											// read ADC (8 bits);
		
	#endif
}
     fca:	08 95       	ret

00000fcc <__vector_21>:

//! Interrupt handler for ADC complete interrupt.
ISR_ADC_COMPLETE()
{
     fcc:	1f 92       	push	r1
     fce:	0f 92       	push	r0
     fd0:	0f b6       	in	r0, 0x3f	; 63
     fd2:	0f 92       	push	r0
     fd4:	11 24       	eor	r1, r1
     fd6:	8f 93       	push	r24
	#if (FastRead ==0) || (FastRead ==1)
		// set the a2d conversion flag to indicate "complete"
		a2dCompleteFlag = True;
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	80 93 25 03 	sts	0x0325, r24
	#endif
}
     fde:	8f 91       	pop	r24
     fe0:	0f 90       	pop	r0
     fe2:	0f be       	out	0x3f, r0	; 63
     fe4:	0f 90       	pop	r0
     fe6:	1f 90       	pop	r1
     fe8:	18 95       	reti

00000fea <port_init>:
 PORTF = 0x00;
 DDRF  = 0x00;
 PORTG = 0x00;
 DDRG  = 0x00;
 */
 cli(); //disable all interrupts
     fea:	f8 94       	cli
sei(); //re-enable interrupts
     fec:	78 94       	sei
}
     fee:	08 95       	ret

00000ff0 <twi_init>:
//TWI initialize
// bit rate:18 (freq: 100Khz)
void twi_init(void)
{
 TWCR= 0X00; //disable twi
     ff0:	e4 e7       	ldi	r30, 0x74	; 116
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	10 82       	st	Z, r1
 TWBR= 0x12; //set bit rate
     ff6:	82 e1       	ldi	r24, 0x12	; 18
     ff8:	80 93 70 00 	sts	0x0070, r24
 TWSR= 0x00; //set prescale
     ffc:	10 92 71 00 	sts	0x0071, r1
 TWCR= 0x44; //enable twi
    1000:	84 e4       	ldi	r24, 0x44	; 68
    1002:	80 83       	st	Z, r24
}
    1004:	08 95       	ret

00001006 <init_devices>:
//call this routine to initialize all peripherals
void init_devices(void)
{
 //stop errant interrupts until set up
 cli(); //disable all interrupts
    1006:	f8 94       	cli
 XDIV  = 0x00; //xtal divider
    1008:	1c be       	out	0x3c, r1	; 60
 XMCRA = 0x00; //external memory
    100a:	10 92 6d 00 	sts	0x006D, r1
 port_init();
    100e:	0e 94 f5 07 	call	0xfea	; 0xfea <port_init>
 uart0_init();
    1012:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <uart0_init>
 twi_init();
    1016:	0e 94 f8 07 	call	0xff0	; 0xff0 <twi_init>
 
 MCUCR = 0x00;
    101a:	15 be       	out	0x35, r1	; 53
 EICRA = 0x00; //extended ext ints
    101c:	10 92 6a 00 	sts	0x006A, r1
 EICRB = 0x00; //extended ext ints
    1020:	1a be       	out	0x3a, r1	; 58
 EIMSK = 0x00;
    1022:	19 be       	out	0x39, r1	; 57
 TIMSK = 0x00; //timer interrupt sources
    1024:	17 be       	out	0x37, r1	; 55
 ETIMSK = 0x00; //extended timer interrupt sources
    1026:	10 92 7d 00 	sts	0x007D, r1
 //SEI(); //re-enable interrupts
} 
    102a:	08 95       	ret

0000102c <EEPROM_read>:

//******************************************************************
//Function to read given number of bytes from EEPROM 
//******************************************************************
unsigned char EEPROM_read(unsigned char highAddress, unsigned char lowAddress, unsigned char totalChar)
{
    102c:	cf 92       	push	r12
    102e:	df 92       	push	r13
    1030:	ff 92       	push	r15
    1032:	0f 93       	push	r16
    1034:	1f 93       	push	r17
    1036:	cf 93       	push	r28
    1038:	df 93       	push	r29
    103a:	18 2f       	mov	r17, r24
    103c:	06 2f       	mov	r16, r22
    103e:	f4 2e       	mov	r15, r20
   unsigned char errorStatus, i, data_1;
   
   errorStatus = i2c_start();
    1040:	0e 94 8d 09 	call	0x131a	; 0x131a <i2c_start>
   if(errorStatus == 1)
    1044:	81 30       	cpi	r24, 0x01	; 1
    1046:	41 f4       	brne	.+16     	; 0x1058 <EEPROM_read+0x2c>
   {
     transmitString_F(PSTR("i2c start failed.."));
    1048:	8a e2       	ldi	r24, 0x2A	; 42
    104a:	92 e0       	ldi	r25, 0x02	; 2
    104c:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <transmitString_F>
            i2c_stop();
    1050:	0e 94 fe 09 	call	0x13fc	; 0x13fc <i2c_stop>
         return(1);
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	7a c0       	rjmp	.+244    	; 0x114c <__stack+0x4d>
   } 
   
   errorStatus = i2c_sendAddress(EEPROM_W);
    1058:	80 ea       	ldi	r24, 0xA0	; 160
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	0e 94 ad 09 	call	0x135a	; 0x135a <i2c_sendAddress>
   
   if(errorStatus == 1)
    1060:	81 30       	cpi	r24, 0x01	; 1
    1062:	41 f4       	brne	.+16     	; 0x1074 <EEPROM_read+0x48>
   {
     transmitString_F(PSTR("EEPROM sendAddress1 failed.."));
    1064:	8d e0       	ldi	r24, 0x0D	; 13
    1066:	92 e0       	ldi	r25, 0x02	; 2
    1068:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <transmitString_F>
         i2c_stop();
    106c:	0e 94 fe 09 	call	0x13fc	; 0x13fc <i2c_stop>
         return(1);
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	6c c0       	rjmp	.+216    	; 0x114c <__stack+0x4d>
   } 
   
   errorStatus = i2c_sendData(highAddress);
    1074:	81 2f       	mov	r24, r17
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	0e 94 c8 09 	call	0x1390	; 0x1390 <i2c_sendData>
   if(errorStatus == 1)
    107c:	81 30       	cpi	r24, 0x01	; 1
    107e:	41 f4       	brne	.+16     	; 0x1090 <EEPROM_read+0x64>
   {
     transmitString_F(PSTR("EEPROM write-1 failed.."));
    1080:	85 ef       	ldi	r24, 0xF5	; 245
    1082:	91 e0       	ldi	r25, 0x01	; 1
    1084:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <transmitString_F>
         i2c_stop();
    1088:	0e 94 fe 09 	call	0x13fc	; 0x13fc <i2c_stop>
         return(1);
    108c:	81 e0       	ldi	r24, 0x01	; 1
    108e:	5e c0       	rjmp	.+188    	; 0x114c <__stack+0x4d>
   } 
   
 
   errorStatus = i2c_sendData(lowAddress);
    1090:	80 2f       	mov	r24, r16
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	0e 94 c8 09 	call	0x1390	; 0x1390 <i2c_sendData>
   if(errorStatus == 1)
    1098:	81 30       	cpi	r24, 0x01	; 1
    109a:	41 f4       	brne	.+16     	; 0x10ac <EEPROM_read+0x80>
   {
     transmitString_F(PSTR("EEPROM write-2 failed.."));
    109c:	8d ed       	ldi	r24, 0xDD	; 221
    109e:	91 e0       	ldi	r25, 0x01	; 1
    10a0:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <transmitString_F>
         i2c_stop();
    10a4:	0e 94 fe 09 	call	0x13fc	; 0x13fc <i2c_stop>
         return(1);
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	50 c0       	rjmp	.+160    	; 0x114c <__stack+0x4d>
   } 
   
   errorStatus = i2c_repeatStart();
    10ac:	0e 94 9d 09 	call	0x133a	; 0x133a <i2c_repeatStart>
   if(errorStatus == 1)
    10b0:	81 30       	cpi	r24, 0x01	; 1
    10b2:	41 f4       	brne	.+16     	; 0x10c4 <EEPROM_read+0x98>
   {
     transmitString_F(PSTR("i2c repeat-start failed.."));
    10b4:	83 ec       	ldi	r24, 0xC3	; 195
    10b6:	91 e0       	ldi	r25, 0x01	; 1
    10b8:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <transmitString_F>
         i2c_stop();
    10bc:	0e 94 fe 09 	call	0x13fc	; 0x13fc <i2c_stop>
         return(1);
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	44 c0       	rjmp	.+136    	; 0x114c <__stack+0x4d>
   } 
   
   errorStatus = i2c_sendAddress(EEPROM_R);
    10c4:	81 ea       	ldi	r24, 0xA1	; 161
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	0e 94 ad 09 	call	0x135a	; 0x135a <i2c_sendAddress>
   if(errorStatus == 1)
    10cc:	81 30       	cpi	r24, 0x01	; 1
    10ce:	19 f0       	breq	.+6      	; 0x10d6 <EEPROM_read+0xaa>
     transmitString_F(PSTR("EEPROM sendAddress2 failed.."));
         i2c_stop();
         return(1);
   } 
   
   for(i=0;i<totalChar;i++)
    10d0:	ff 20       	and	r15, r15
    10d2:	49 f4       	brne	.+18     	; 0x10e6 <EEPROM_read+0xba>
    10d4:	32 c0       	rjmp	.+100    	; 0x113a <__stack+0x3b>
   } 
   
   errorStatus = i2c_sendAddress(EEPROM_R);
   if(errorStatus == 1)
   {
     transmitString_F(PSTR("EEPROM sendAddress2 failed.."));
    10d6:	86 ea       	ldi	r24, 0xA6	; 166
    10d8:	91 e0       	ldi	r25, 0x01	; 1
    10da:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <transmitString_F>
         i2c_stop();
    10de:	0e 94 fe 09 	call	0x13fc	; 0x13fc <i2c_stop>
         return(1);
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	33 c0       	rjmp	.+102    	; 0x114c <__stack+0x4d>
   } 
   
   for(i=0;i<totalChar;i++)
    10e6:	c0 e0       	ldi	r28, 0x00	; 0
    10e8:	d0 e0       	ldi	r29, 0x00	; 0
   {
      if(i == (totalChar-1))           //no Acknowledge after receiving the last byte
    10ea:	cf 2c       	mov	r12, r15
    10ec:	dd 24       	eor	r13, r13
    10ee:	08 94       	sec
    10f0:	c1 08       	sbc	r12, r1
    10f2:	d1 08       	sbc	r13, r1
   errorStatus = i2c_sendAddress(EEPROM_R);
   if(errorStatus == 1)
   {
     transmitString_F(PSTR("EEPROM sendAddress2 failed.."));
         i2c_stop();
         return(1);
    10f4:	0c 2f       	mov	r16, r28
   } 
   
   for(i=0;i<totalChar;i++)
   {
      if(i == (totalChar-1))           //no Acknowledge after receiving the last byte
    10f6:	cc 15       	cp	r28, r12
    10f8:	dd 05       	cpc	r29, r13
    10fa:	21 f4       	brne	.+8      	; 0x1104 <__stack+0x5>
                     data_1 = i2c_receiveData_NACK();
    10fc:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <i2c_receiveData_NACK>
    1100:	18 2f       	mov	r17, r24
    1102:	03 c0       	rjmp	.+6      	; 0x110a <__stack+0xb>
          else
                    data_1 = i2c_receiveData_ACK();
    1104:	0e 94 da 09 	call	0x13b4	; 0x13b4 <i2c_receiveData_ACK>
    1108:	18 2f       	mov	r17, r24
                  
             if(data_1 == ERROR_CODE)
    110a:	1e 37       	cpi	r17, 0x7E	; 126
    110c:	41 f4       	brne	.+16     	; 0x111e <__stack+0x1f>
             {
                       transmitString_F(PSTR("EEPROM receive failed.."));
    110e:	8e e8       	ldi	r24, 0x8E	; 142
    1110:	91 e0       	ldi	r25, 0x01	; 1
    1112:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <transmitString_F>
                        i2c_stop();
    1116:	0e 94 fe 09 	call	0x13fc	; 0x13fc <i2c_stop>
                           return(1);
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	17 c0       	rjmp	.+46     	; 0x114c <__stack+0x4d>
             }
           
           if((i%16) == 0) 
    111e:	0f 70       	andi	r16, 0x0F	; 15
    1120:	31 f4       	brne	.+12     	; 0x112e <__stack+0x2f>
             TX_NEWLINE;
    1122:	8d e0       	ldi	r24, 0x0D	; 13
    1124:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <transmitByte>
    1128:	8a e0       	ldi	r24, 0x0A	; 10
    112a:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <transmitByte>
           transmitByte(data_1);
    112e:	81 2f       	mov	r24, r17
    1130:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <transmitByte>
    1134:	21 96       	adiw	r28, 0x01	; 1
     transmitString_F(PSTR("EEPROM sendAddress2 failed.."));
         i2c_stop();
         return(1);
   } 
   
   for(i=0;i<totalChar;i++)
    1136:	cf 15       	cp	r28, r15
    1138:	e8 f2       	brcs	.-70     	; 0x10f4 <EEPROM_read+0xc8>
             TX_NEWLINE;
           transmitByte(data_1);
           
   }
   
   TX_NEWLINE;
    113a:	8d e0       	ldi	r24, 0x0D	; 13
    113c:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <transmitByte>
    1140:	8a e0       	ldi	r24, 0x0A	; 10
    1142:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <transmitByte>
   i2c_stop();
    1146:	0e 94 fe 09 	call	0x13fc	; 0x13fc <i2c_stop>
   
   return(0);
    114a:	80 e0       	ldi	r24, 0x00	; 0
}
    114c:	df 91       	pop	r29
    114e:	cf 91       	pop	r28
    1150:	1f 91       	pop	r17
    1152:	0f 91       	pop	r16
    1154:	ff 90       	pop	r15
    1156:	df 90       	pop	r13
    1158:	cf 90       	pop	r12
    115a:	08 95       	ret

0000115c <EEPROM_write>:

//******************************************************************
//Function to a character string to EEPROM 
//******************************************************************
unsigned char EEPROM_write(unsigned char highAddress, unsigned char lowAddress,unsigned char data_new)
{
    115c:	ff 92       	push	r15
    115e:	0f 93       	push	r16
    1160:	1f 93       	push	r17
    1162:	08 2f       	mov	r16, r24
    1164:	f6 2e       	mov	r15, r22
    1166:	14 2f       	mov	r17, r20
   unsigned char errorStatus, data_1;
   
   errorStatus = i2c_start();
    1168:	0e 94 8d 09 	call	0x131a	; 0x131a <i2c_start>
   if(errorStatus == 1)
    116c:	81 30       	cpi	r24, 0x01	; 1
    116e:	41 f4       	brne	.+16     	; 0x1180 <EEPROM_write+0x24>
   {
     transmitString_F(PSTR("i2c start failed.."));
    1170:	8b e7       	ldi	r24, 0x7B	; 123
    1172:	91 e0       	ldi	r25, 0x01	; 1
    1174:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <transmitString_F>
            i2c_stop();
    1178:	0e 94 fe 09 	call	0x13fc	; 0x13fc <i2c_stop>
         return(1);
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	40 c0       	rjmp	.+128    	; 0x1200 <EEPROM_write+0xa4>
   } 
   
   errorStatus = i2c_sendAddress(EEPROM_W);
    1180:	80 ea       	ldi	r24, 0xA0	; 160
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	0e 94 ad 09 	call	0x135a	; 0x135a <i2c_sendAddress>
   
   if(errorStatus == 1)
    1188:	81 30       	cpi	r24, 0x01	; 1
    118a:	41 f4       	brne	.+16     	; 0x119c <EEPROM_write+0x40>
   {
     transmitString_F(PSTR("EEPROM sendAddress1 failed.."));
    118c:	8e e5       	ldi	r24, 0x5E	; 94
    118e:	91 e0       	ldi	r25, 0x01	; 1
    1190:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <transmitString_F>
         i2c_stop();
    1194:	0e 94 fe 09 	call	0x13fc	; 0x13fc <i2c_stop>
         return(1);
    1198:	81 e0       	ldi	r24, 0x01	; 1
    119a:	32 c0       	rjmp	.+100    	; 0x1200 <EEPROM_write+0xa4>
   } 
   
   errorStatus = i2c_sendData(highAddress);
    119c:	80 2f       	mov	r24, r16
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	0e 94 c8 09 	call	0x1390	; 0x1390 <i2c_sendData>
   if(errorStatus == 1)
    11a4:	81 30       	cpi	r24, 0x01	; 1
    11a6:	41 f4       	brne	.+16     	; 0x11b8 <EEPROM_write+0x5c>
   {
     transmitString_F(PSTR("EEPROM write-1 failed.."));
    11a8:	86 e4       	ldi	r24, 0x46	; 70
    11aa:	91 e0       	ldi	r25, 0x01	; 1
    11ac:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <transmitString_F>
         i2c_stop();
    11b0:	0e 94 fe 09 	call	0x13fc	; 0x13fc <i2c_stop>
         return(1);
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	24 c0       	rjmp	.+72     	; 0x1200 <EEPROM_write+0xa4>
   } 
   
 
   errorStatus = i2c_sendData(lowAddress);
    11b8:	8f 2d       	mov	r24, r15
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	0e 94 c8 09 	call	0x1390	; 0x1390 <i2c_sendData>
   if(errorStatus == 1)
    11c0:	81 30       	cpi	r24, 0x01	; 1
    11c2:	c9 f4       	brne	.+50     	; 0x11f6 <EEPROM_write+0x9a>
   {
     transmitString_F(PSTR("EEPROM write-2 failed.."));
    11c4:	8e e2       	ldi	r24, 0x2E	; 46
    11c6:	91 e0       	ldi	r25, 0x01	; 1
    11c8:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <transmitString_F>
         i2c_stop();
    11cc:	0e 94 fe 09 	call	0x13fc	; 0x13fc <i2c_stop>
         return(1);
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	16 c0       	rjmp	.+44     	; 0x1200 <EEPROM_write+0xa4>
   } 
   
   // while((data_1 = receiveByte()) != 0x0d)
    while((data_new) != 0x0d)
   {
      transmitByte(data_new);
    11d4:	81 2f       	mov	r24, r17
    11d6:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <transmitByte>
          if(data_new == 0x0d)
           transmitByte(0x0a);
          errorStatus = i2c_sendData(data_new);
    11da:	81 2f       	mov	r24, r17
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	0e 94 c8 09 	call	0x1390	; 0x1390 <i2c_sendData>
             if(errorStatus == 1)
    11e2:	81 30       	cpi	r24, 0x01	; 1
    11e4:	89 f4       	brne	.+34     	; 0x1208 <EEPROM_write+0xac>
             {
                       transmitString_F(PSTR("EEPROM write data_1 failed.."));
    11e6:	81 e1       	ldi	r24, 0x11	; 17
    11e8:	91 e0       	ldi	r25, 0x01	; 1
    11ea:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <transmitString_F>
                        i2c_stop();
    11ee:	0e 94 fe 09 	call	0x13fc	; 0x13fc <i2c_stop>
                           return(1);
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	05 c0       	rjmp	.+10     	; 0x1200 <EEPROM_write+0xa4>
         i2c_stop();
         return(1);
   } 
   
   // while((data_1 = receiveByte()) != 0x0d)
    while((data_new) != 0x0d)
    11f6:	1d 30       	cpi	r17, 0x0D	; 13
    11f8:	69 f7       	brne	.-38     	; 0x11d4 <EEPROM_write+0x78>
                        i2c_stop();
                           return(1);
             }
   }
   
   i2c_stop();
    11fa:	0e 94 fe 09 	call	0x13fc	; 0x13fc <i2c_stop>
   
   return(0);
    11fe:	80 e0       	ldi	r24, 0x00	; 0
}
    1200:	1f 91       	pop	r17
    1202:	0f 91       	pop	r16
    1204:	ff 90       	pop	r15
    1206:	08 95       	ret
   } 
   
   // while((data_1 = receiveByte()) != 0x0d)
    while((data_new) != 0x0d)
   {
      transmitByte(data_new);
    1208:	81 2f       	mov	r24, r17
    120a:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <transmitByte>
    120e:	e5 cf       	rjmp	.-54     	; 0x11da <EEPROM_write+0x7e>

00001210 <EEPROM_readPage>:
unsigned char EEPROM_readPage( unsigned int pageNumber )
{
  unsigned char highAddress, lowAddress, errorStatus;
  unsigned int pageAddress;
  
  pageAddress = pageNumber * 64;
    1210:	bc 01       	movw	r22, r24
    1212:	00 24       	eor	r0, r0
    1214:	76 95       	lsr	r23
    1216:	67 95       	ror	r22
    1218:	07 94       	ror	r0
    121a:	76 95       	lsr	r23
    121c:	67 95       	ror	r22
    121e:	07 94       	ror	r0
    1220:	76 2f       	mov	r23, r22
    1222:	60 2d       	mov	r22, r0
  
  highAddress = (unsigned char)((pageAddress >> 8) & 0x00ff);
  lowAddress  = (unsigned char)( pageAddress & 0x00ff);
  
  errorStatus = EEPROM_read(highAddress, lowAddress, 64);
    1224:	87 2f       	mov	r24, r23
    1226:	40 e4       	ldi	r20, 0x40	; 64
    1228:	0e 94 16 08 	call	0x102c	; 0x102c <EEPROM_read>
  
  return(errorStatus);
 } 
    122c:	08 95       	ret

0000122e <EEPROM_writePage>:
  
//******************************************************************
//Function to write one page of EEPROM 
//******************************************************************
unsigned char EEPROM_writePage( unsigned int pageNumber,unsigned char data_new )
{
    122e:	46 2f       	mov	r20, r22
  unsigned char highAddress, lowAddress, errorStatus;
  unsigned int pageAddress;
  
  pageAddress = pageNumber * 64;
    1230:	9c 01       	movw	r18, r24
    1232:	00 24       	eor	r0, r0
    1234:	36 95       	lsr	r19
    1236:	27 95       	ror	r18
    1238:	07 94       	ror	r0
    123a:	36 95       	lsr	r19
    123c:	27 95       	ror	r18
    123e:	07 94       	ror	r0
    1240:	32 2f       	mov	r19, r18
    1242:	20 2d       	mov	r18, r0
  
  highAddress = (unsigned char)((pageAddress >> 8) & 0x00ff);
  lowAddress  = (unsigned char)( pageAddress & 0x00ff);
  
  errorStatus = EEPROM_write(highAddress, lowAddress,data_new);
    1244:	83 2f       	mov	r24, r19
    1246:	62 2f       	mov	r22, r18
    1248:	0e 94 ae 08 	call	0x115c	; 0x115c <EEPROM_write>
  
  return(errorStatus);  
} 
    124c:	08 95       	ret

0000124e <EEPROM_erase>:
 
//******************************************************************
//Erasing EEPROM (filling it with data_1byte 0xff)
//******************************************************************
unsigned char EEPROM_erase(void)
{
    124e:	cf 93       	push	r28
    1250:	df 93       	push	r29
  
  unsigned char errorStatus;
  unsigned int i;
  
  TX_NEWLINE;
    1252:	8d e0       	ldi	r24, 0x0D	; 13
    1254:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <transmitByte>
    1258:	8a e0       	ldi	r24, 0x0A	; 10
    125a:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <transmitByte>
  TX_NEWLINE;
    125e:	8d e0       	ldi	r24, 0x0D	; 13
    1260:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <transmitByte>
    1264:	8a e0       	ldi	r24, 0x0A	; 10
    1266:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <transmitByte>
  transmitString_F(PSTR("Wait..."));
    126a:	89 e0       	ldi	r24, 0x09	; 9
    126c:	91 e0       	ldi	r25, 0x01	; 1
    126e:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <transmitString_F>
  TX_NEWLINE;
    1272:	8d e0       	ldi	r24, 0x0D	; 13
    1274:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <transmitByte>
    1278:	8a e0       	ldi	r24, 0x0A	; 10
    127a:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <transmitByte>
   
   errorStatus = i2c_start();
    127e:	0e 94 8d 09 	call	0x131a	; 0x131a <i2c_start>
   if(errorStatus == 1)
    1282:	81 30       	cpi	r24, 0x01	; 1
    1284:	41 f4       	brne	.+16     	; 0x1296 <EEPROM_erase+0x48>
   {
     transmitString_F(PSTR("i2c start failed.."));
    1286:	86 ef       	ldi	r24, 0xF6	; 246
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <transmitString_F>
            i2c_stop();
    128e:	0e 94 fe 09 	call	0x13fc	; 0x13fc <i2c_stop>
         return(1);
    1292:	81 e0       	ldi	r24, 0x01	; 1
    1294:	3f c0       	rjmp	.+126    	; 0x1314 <EEPROM_erase+0xc6>
   } 
   
   errorStatus = i2c_sendAddress(EEPROM_W);
    1296:	80 ea       	ldi	r24, 0xA0	; 160
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	0e 94 ad 09 	call	0x135a	; 0x135a <i2c_sendAddress>
   
   if(errorStatus == 1)
    129e:	81 30       	cpi	r24, 0x01	; 1
    12a0:	41 f4       	brne	.+16     	; 0x12b2 <EEPROM_erase+0x64>
   {
     transmitString_F(PSTR("EEPROM sendAddress1 failed.."));
    12a2:	89 ed       	ldi	r24, 0xD9	; 217
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <transmitString_F>
         i2c_stop();
    12aa:	0e 94 fe 09 	call	0x13fc	; 0x13fc <i2c_stop>
         return(1);
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	31 c0       	rjmp	.+98     	; 0x1314 <EEPROM_erase+0xc6>
   } 
   
   errorStatus = i2c_sendData(0x00);
    12b2:	80 e0       	ldi	r24, 0x00	; 0
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	0e 94 c8 09 	call	0x1390	; 0x1390 <i2c_sendData>
   if(errorStatus == 1)
    12ba:	81 30       	cpi	r24, 0x01	; 1
    12bc:	41 f4       	brne	.+16     	; 0x12ce <EEPROM_erase+0x80>
   {
     transmitString_F(PSTR("EEPROM write-1 failed.."));
    12be:	81 ec       	ldi	r24, 0xC1	; 193
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <transmitString_F>
         i2c_stop();
    12c6:	0e 94 fe 09 	call	0x13fc	; 0x13fc <i2c_stop>
         return(1);
    12ca:	81 e0       	ldi	r24, 0x01	; 1
    12cc:	23 c0       	rjmp	.+70     	; 0x1314 <EEPROM_erase+0xc6>
   } 
   
 
   errorStatus = i2c_sendData(0x00);
    12ce:	80 e0       	ldi	r24, 0x00	; 0
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	0e 94 c8 09 	call	0x1390	; 0x1390 <i2c_sendData>
   if(errorStatus == 1)
    12d6:	81 30       	cpi	r24, 0x01	; 1
    12d8:	41 f4       	brne	.+16     	; 0x12ea <EEPROM_erase+0x9c>
   {
     transmitString_F(PSTR("EEPROM write-2 failed.."));
    12da:	89 ea       	ldi	r24, 0xA9	; 169
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <transmitString_F>
         i2c_stop();
    12e2:	0e 94 fe 09 	call	0x13fc	; 0x13fc <i2c_stop>
         return(1);
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	15 c0       	rjmp	.+42     	; 0x1314 <EEPROM_erase+0xc6>
         return(1);
   } 
   
 
   errorStatus = i2c_sendData(0x00);
   if(errorStatus == 1)
    12ea:	c0 e0       	ldi	r28, 0x00	; 0
    12ec:	d0 e0       	ldi	r29, 0x00	; 0
         return(1);
   } 
   
    for(i=0;i<0x8000;i++)
   {
          errorStatus = i2c_sendData(0xff);
    12ee:	8f ef       	ldi	r24, 0xFF	; 255
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	0e 94 c8 09 	call	0x1390	; 0x1390 <i2c_sendData>
             if(errorStatus == 1)
    12f6:	81 30       	cpi	r24, 0x01	; 1
    12f8:	41 f4       	brne	.+16     	; 0x130a <EEPROM_erase+0xbc>
             {
                       transmitString_F(PSTR("EEPROM write data_1 failed.."));
    12fa:	8c e8       	ldi	r24, 0x8C	; 140
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <transmitString_F>
                        i2c_stop();
    1302:	0e 94 fe 09 	call	0x13fc	; 0x13fc <i2c_stop>
                           return(1);
    1306:	81 e0       	ldi	r24, 0x01	; 1
    1308:	05 c0       	rjmp	.+10     	; 0x1314 <EEPROM_erase+0xc6>
     transmitString_F(PSTR("EEPROM write-2 failed.."));
         i2c_stop();
         return(1);
   } 
   
    for(i=0;i<0x8000;i++)
    130a:	21 96       	adiw	r28, 0x01	; 1
    130c:	82 f7       	brpl	.-32     	; 0x12ee <EEPROM_erase+0xa0>
                        i2c_stop();
                           return(1);
             }
   }
   
   i2c_stop();
    130e:	0e 94 fe 09 	call	0x13fc	; 0x13fc <i2c_stop>
   
   return(0);
    1312:	80 e0       	ldi	r24, 0x00	; 0

}             
    1314:	df 91       	pop	r29
    1316:	cf 91       	pop	r28
    1318:	08 95       	ret

0000131a <i2c_start>:
//Function to start i2c communication
//*************************************************
unsigned char i2c_start(void)
{
 
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); 	//Send START condition
    131a:	84 ea       	ldi	r24, 0xA4	; 164
    131c:	80 93 74 00 	sts	0x0074, r24
	
    while (!(TWCR & (1<<TWINT)));   		//Wait for TWINT flag set. This indicates that the
    1320:	e4 e7       	ldi	r30, 0x74	; 116
    1322:	f0 e0       	ldi	r31, 0x00	; 0
    1324:	80 81       	ld	r24, Z
    1326:	88 23       	and	r24, r24
    1328:	ec f7       	brge	.-6      	; 0x1324 <i2c_start+0xa>
		  								//START condition has been transmitted
    if ((TWSR & 0xF8) == START)			//Check value of TWI Status Register
    132a:	90 91 71 00 	lds	r25, 0x0071
    132e:	98 7f       	andi	r25, 0xF8	; 248
 	   return(0);
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	98 30       	cpi	r25, 0x08	; 8
    1334:	09 f4       	brne	.+2      	; 0x1338 <i2c_start+0x1e>
    1336:	80 e0       	ldi	r24, 0x00	; 0
	else
	   return(1);
}
    1338:	08 95       	ret

0000133a <i2c_repeatStart>:
//Function for repeat start condition
//*************************************************
unsigned char i2c_repeatStart(void)
{
 
    TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); 		//Send START condition
    133a:	84 ea       	ldi	r24, 0xA4	; 164
    133c:	80 93 74 00 	sts	0x0074, r24
    while (!(TWCR & (1<<TWINT)));   		//Wait for TWINT flag set. This indicates that the
    1340:	e4 e7       	ldi	r30, 0x74	; 116
    1342:	f0 e0       	ldi	r31, 0x00	; 0
    1344:	80 81       	ld	r24, Z
    1346:	88 23       	and	r24, r24
    1348:	ec f7       	brge	.-6      	; 0x1344 <i2c_repeatStart+0xa>
		  								//START condition has been transmitted
    if ((TWSR & 0xF8) == REPEAT_START)			//Check value of TWI Status Register
    134a:	90 91 71 00 	lds	r25, 0x0071
    134e:	98 7f       	andi	r25, 0xF8	; 248
 	   return(0);
    1350:	81 e0       	ldi	r24, 0x01	; 1
    1352:	90 31       	cpi	r25, 0x10	; 16
    1354:	09 f4       	brne	.+2      	; 0x1358 <i2c_repeatStart+0x1e>
    1356:	80 e0       	ldi	r24, 0x00	; 0
	else
	   return(1);
}
    1358:	08 95       	ret

0000135a <i2c_sendAddress>:
//*************************************************
unsigned char i2c_sendAddress(unsigned char address)
{
   unsigned char STATUS;
   
   if((address & 0x01) == 0) 
    135a:	80 fd       	sbrc	r24, 0
    135c:	02 c0       	rjmp	.+4      	; 0x1362 <i2c_sendAddress+0x8>
     STATUS = MT_SLA_ACK;
    135e:	28 e1       	ldi	r18, 0x18	; 24
    1360:	01 c0       	rjmp	.+2      	; 0x1364 <i2c_sendAddress+0xa>
   else
     STATUS = MR_SLA_ACK; 
    1362:	20 e4       	ldi	r18, 0x40	; 64
   
   TWDR = address; 
    1364:	80 93 73 00 	sts	0x0073, r24
   TWCR = (1<<TWINT)|(1<<TWEN);	   //Load SLA_W into TWDR Register. Clear TWINT bit
    1368:	84 e8       	ldi	r24, 0x84	; 132
    136a:	80 93 74 00 	sts	0x0074, r24
   		  			 				   //in TWCR to start transmission of address
   while (!(TWCR & (1<<TWINT)));	   //Wait for TWINT flag set. This indicates that the
    136e:	e4 e7       	ldi	r30, 0x74	; 116
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	80 81       	ld	r24, Z
    1374:	88 23       	and	r24, r24
    1376:	ec f7       	brge	.-6      	; 0x1372 <i2c_sendAddress+0x18>
   		 		   					   //SLA+W has been transmitted, and
									   //ACK/NACK has been received.
   if ((TWSR & 0xF8) == STATUS)	   //Check value of TWI Status Register
    1378:	40 91 71 00 	lds	r20, 0x0071
    137c:	50 e0       	ldi	r21, 0x00	; 0
    137e:	48 7f       	andi	r20, 0xF8	; 248
    1380:	50 70       	andi	r21, 0x00	; 0
    1382:	30 e0       	ldi	r19, 0x00	; 0
   	  return(0);
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	42 17       	cp	r20, r18
    1388:	53 07       	cpc	r21, r19
    138a:	09 f4       	brne	.+2      	; 0x138e <i2c_sendAddress+0x34>
    138c:	80 e0       	ldi	r24, 0x00	; 0
   else 
      return(1);
}
    138e:	08 95       	ret

00001390 <i2c_sendData>:
//**************************************************
//Function to transmit a data byte
//*************************************************
unsigned char i2c_sendData(unsigned char data_2)
{
   TWDR = data_2; 
    1390:	80 93 73 00 	sts	0x0073, r24
   TWCR = (1<<TWINT) |(1<<TWEN);	   //Load SLA_W into TWDR Register. Clear TWINT bit
    1394:	84 e8       	ldi	r24, 0x84	; 132
    1396:	80 93 74 00 	sts	0x0074, r24
   		  			 				   //in TWCR to start transmission of data
   while (!(TWCR & (1<<TWINT)));	   //Wait for TWINT flag set. This indicates that the
    139a:	e4 e7       	ldi	r30, 0x74	; 116
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	80 81       	ld	r24, Z
    13a0:	88 23       	and	r24, r24
    13a2:	ec f7       	brge	.-6      	; 0x139e <i2c_sendData+0xe>
   		 		   					   //data has been transmitted, and
									   //ACK/NACK has been received.
   if ((TWSR & 0xF8) != MT_DATA_ACK)   //Check value of TWI Status Register
    13a4:	90 91 71 00 	lds	r25, 0x0071
    13a8:	98 7f       	andi	r25, 0xF8	; 248
   	  return(1);
    13aa:	81 e0       	ldi	r24, 0x01	; 1
    13ac:	98 32       	cpi	r25, 0x28	; 40
    13ae:	09 f4       	brne	.+2      	; 0x13b2 <i2c_sendData+0x22>
    13b0:	80 e0       	ldi	r24, 0x00	; 0
   else
      return(0);
}
    13b2:	08 95       	ret

000013b4 <i2c_receiveData_ACK>:
//*****************************************************
unsigned char i2c_receiveData_ACK(void)
{
  unsigned char data;
  
  TWCR = (1<<TWEA)|(1<<TWINT)|(1<<TWEN);
    13b4:	84 ec       	ldi	r24, 0xC4	; 196
    13b6:	80 93 74 00 	sts	0x0074, r24
  
  while (!(TWCR & (1<<TWINT)));	   	   //Wait for TWINT flag set. This indicates that the
    13ba:	e4 e7       	ldi	r30, 0x74	; 116
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	80 81       	ld	r24, Z
    13c0:	88 23       	and	r24, r24
    13c2:	ec f7       	brge	.-6      	; 0x13be <i2c_receiveData_ACK+0xa>
   		 		   					   //data has been received
  if ((TWSR & 0xF8) != MR_DATA_ACK)    //Check value of TWI Status Register
    13c4:	80 91 71 00 	lds	r24, 0x0071
    13c8:	88 7f       	andi	r24, 0xF8	; 248
    13ca:	80 35       	cpi	r24, 0x50	; 80
    13cc:	19 f4       	brne	.+6      	; 0x13d4 <i2c_receiveData_ACK+0x20>
   	  return(ERROR_CODE);
  
  data = TWDR;
    13ce:	80 91 73 00 	lds	r24, 0x0073
  return(data);
    13d2:	08 95       	ret
  TWCR = (1<<TWEA)|(1<<TWINT)|(1<<TWEN);
  
  while (!(TWCR & (1<<TWINT)));	   	   //Wait for TWINT flag set. This indicates that the
   		 		   					   //data has been received
  if ((TWSR & 0xF8) != MR_DATA_ACK)    //Check value of TWI Status Register
   	  return(ERROR_CODE);
    13d4:	8e e7       	ldi	r24, 0x7E	; 126
  
  data = TWDR;
  return(data);
}
    13d6:	08 95       	ret

000013d8 <i2c_receiveData_NACK>:
//******************************************************************
unsigned char i2c_receiveData_NACK(void)
{
  unsigned char data;
  
  TWCR = (1<<TWINT)|(1<<TWEN);
    13d8:	84 e8       	ldi	r24, 0x84	; 132
    13da:	80 93 74 00 	sts	0x0074, r24
  
  while (!(TWCR & (1<<TWINT)));	   	   //Wait for TWINT flag set. This indicates that the
    13de:	e4 e7       	ldi	r30, 0x74	; 116
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	80 81       	ld	r24, Z
    13e4:	88 23       	and	r24, r24
    13e6:	ec f7       	brge	.-6      	; 0x13e2 <i2c_receiveData_NACK+0xa>
   		 		   					   //data has been received
  if ((TWSR & 0xF8) != MR_DATA_NACK)    //Check value of TWI Status Register
    13e8:	80 91 71 00 	lds	r24, 0x0071
    13ec:	88 7f       	andi	r24, 0xF8	; 248
    13ee:	88 35       	cpi	r24, 0x58	; 88
    13f0:	19 f4       	brne	.+6      	; 0x13f8 <i2c_receiveData_NACK+0x20>
   	  return(ERROR_CODE);
  
  data = TWDR;
    13f2:	80 91 73 00 	lds	r24, 0x0073
  return(data);
    13f6:	08 95       	ret
  TWCR = (1<<TWINT)|(1<<TWEN);
  
  while (!(TWCR & (1<<TWINT)));	   	   //Wait for TWINT flag set. This indicates that the
   		 		   					   //data has been received
  if ((TWSR & 0xF8) != MR_DATA_NACK)    //Check value of TWI Status Register
   	  return(ERROR_CODE);
    13f8:	8e e7       	ldi	r24, 0x7E	; 126
  
  data = TWDR;
  return(data);
}
    13fa:	08 95       	ret

000013fc <i2c_stop>:
//**************************************************
//Function to end the i2c communication
//*************************************************   	
void i2c_stop(void)
{
  TWCR =  (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	  //Transmit STOP condition
    13fc:	84 e9       	ldi	r24, 0x94	; 148
    13fe:	80 93 74 00 	sts	0x0074, r24
}  
    1402:	08 95       	ret

00001404 <HW_init>:
	//***************************************************************************************
	//***************************************************************************************	
	void HW_init(void)
	{
		//--------- Initial all inputs/outputs & Start values
		BUZER_init();						// output & OFF
    1404:	a7 9a       	sbi	0x14, 7	; 20
    1406:	af 98       	cbi	0x15, 7	; 21
		
		GLED_init();						// output & OFF
    1408:	a5 9a       	sbi	0x14, 5	; 20
    140a:	ad 98       	cbi	0x15, 5	; 21
		RLED_init();						// output & OFF
    140c:	a6 9a       	sbi	0x14, 6	; 20
    140e:	ae 98       	cbi	0x15, 6	; 21
	}	//HW_init
    1410:	08 95       	ret

00001412 <BUZZER>:
	
	void BUZZER(unsigned char times)
	{
		unsigned char 				i;

		for(i=0; i<times; i++)
    1412:	88 23       	and	r24, r24
    1414:	91 f0       	breq	.+36     	; 0x143a <BUZZER+0x28>
    1416:	90 e0       	ldi	r25, 0x00	; 0
		{
			BUZER(ON);
    1418:	af 9a       	sbi	0x15, 7	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    141a:	e7 e9       	ldi	r30, 0x97	; 151
    141c:	fa e3       	ldi	r31, 0x3A	; 58
    141e:	31 97       	sbiw	r30, 0x01	; 1
    1420:	f1 f7       	brne	.-4      	; 0x141e <BUZZER+0xc>
    1422:	00 c0       	rjmp	.+0      	; 0x1424 <BUZZER+0x12>
    1424:	00 00       	nop
				_delay_ms(SIGNAL_ON_DUR *30);
			
			BUZER(OFF);
    1426:	af 98       	cbi	0x15, 7	; 21
    1428:	e7 ec       	ldi	r30, 0xC7	; 199
    142a:	ff ea       	ldi	r31, 0xAF	; 175
    142c:	31 97       	sbiw	r30, 0x01	; 1
    142e:	f1 f7       	brne	.-4      	; 0x142c <BUZZER+0x1a>
    1430:	00 c0       	rjmp	.+0      	; 0x1432 <BUZZER+0x20>
    1432:	00 00       	nop
	
	void BUZZER(unsigned char times)
	{
		unsigned char 				i;

		for(i=0; i<times; i++)
    1434:	9f 5f       	subi	r25, 0xFF	; 255
    1436:	98 17       	cp	r25, r24
    1438:	78 f3       	brcs	.-34     	; 0x1418 <BUZZER+0x6>
    143a:	08 95       	ret

0000143c <pinChange>:

#include<util/delay.h>

void pinChange(int a, int b)
{
	if(b == 0)
    143c:	61 15       	cp	r22, r1
    143e:	71 05       	cpc	r23, r1
    1440:	09 f0       	breq	.+2      	; 0x1444 <pinChange+0x8>
    1442:	a0 c0       	rjmp	.+320    	; 0x1584 <pinChange+0x148>
	{
		if(a == eS_PORTA0)
    1444:	00 97       	sbiw	r24, 0x00	; 0
    1446:	11 f4       	brne	.+4      	; 0x144c <pinChange+0x10>
		  PORTA &= ~(1<<PA0);
    1448:	d8 98       	cbi	0x1b, 0	; 27
    144a:	08 95       	ret
		else if(a == eS_PORTA1)
    144c:	81 30       	cpi	r24, 0x01	; 1
    144e:	91 05       	cpc	r25, r1
    1450:	11 f4       	brne	.+4      	; 0x1456 <pinChange+0x1a>
		  PORTA &= ~(1<<PA1); 
    1452:	d9 98       	cbi	0x1b, 1	; 27
    1454:	08 95       	ret
		else if(a == eS_PORTA2)
    1456:	82 30       	cpi	r24, 0x02	; 2
    1458:	91 05       	cpc	r25, r1
    145a:	11 f4       	brne	.+4      	; 0x1460 <pinChange+0x24>
		  PORTA &= ~(1<<PA2);
    145c:	da 98       	cbi	0x1b, 2	; 27
    145e:	08 95       	ret
		else if(a == eS_PORTA3)
    1460:	83 30       	cpi	r24, 0x03	; 3
    1462:	91 05       	cpc	r25, r1
    1464:	11 f4       	brne	.+4      	; 0x146a <pinChange+0x2e>
		  PORTA &= ~(1<<PA3); 
    1466:	db 98       	cbi	0x1b, 3	; 27
    1468:	08 95       	ret
		else if(a == eS_PORTA4)
    146a:	84 30       	cpi	r24, 0x04	; 4
    146c:	91 05       	cpc	r25, r1
    146e:	11 f4       	brne	.+4      	; 0x1474 <pinChange+0x38>
		  PORTA &= ~(1<<PA4); 
    1470:	dc 98       	cbi	0x1b, 4	; 27
    1472:	08 95       	ret
		else if(a == eS_PORTA5)
    1474:	85 30       	cpi	r24, 0x05	; 5
    1476:	91 05       	cpc	r25, r1
    1478:	11 f4       	brne	.+4      	; 0x147e <pinChange+0x42>
		  PORTA &= ~(1<<PA5); 
    147a:	dd 98       	cbi	0x1b, 5	; 27
    147c:	08 95       	ret
		else if(a == eS_PORTA6)
    147e:	86 30       	cpi	r24, 0x06	; 6
    1480:	91 05       	cpc	r25, r1
    1482:	11 f4       	brne	.+4      	; 0x1488 <pinChange+0x4c>
		  PORTA &= ~(1<<PA6);  
    1484:	de 98       	cbi	0x1b, 6	; 27
    1486:	08 95       	ret
		else if(a == eS_PORTA7)
    1488:	87 30       	cpi	r24, 0x07	; 7
    148a:	91 05       	cpc	r25, r1
    148c:	11 f4       	brne	.+4      	; 0x1492 <pinChange+0x56>
		  PORTA &= ~(1<<PA7);
    148e:	df 98       	cbi	0x1b, 7	; 27
    1490:	08 95       	ret
		else if(a == eS_PORTB0)
    1492:	8a 30       	cpi	r24, 0x0A	; 10
    1494:	91 05       	cpc	r25, r1
    1496:	11 f4       	brne	.+4      	; 0x149c <pinChange+0x60>
		  PORTB &= ~(1<<PB0);  
    1498:	c0 98       	cbi	0x18, 0	; 24
    149a:	08 95       	ret
		else if(a == eS_PORTB1)
    149c:	8b 30       	cpi	r24, 0x0B	; 11
    149e:	91 05       	cpc	r25, r1
    14a0:	11 f4       	brne	.+4      	; 0x14a6 <pinChange+0x6a>
		  PORTB &= ~(1<<PB1);
    14a2:	c1 98       	cbi	0x18, 1	; 24
    14a4:	08 95       	ret
		else if(a == eS_PORTB2)
    14a6:	8c 30       	cpi	r24, 0x0C	; 12
    14a8:	91 05       	cpc	r25, r1
    14aa:	11 f4       	brne	.+4      	; 0x14b0 <pinChange+0x74>
		  PORTB &= ~(1<<PB2);  
    14ac:	c2 98       	cbi	0x18, 2	; 24
    14ae:	08 95       	ret
		else if(a == eS_PORTB3)
    14b0:	8d 30       	cpi	r24, 0x0D	; 13
    14b2:	91 05       	cpc	r25, r1
    14b4:	11 f4       	brne	.+4      	; 0x14ba <pinChange+0x7e>
		  PORTB &= ~(1<<PB3);  
    14b6:	c3 98       	cbi	0x18, 3	; 24
    14b8:	08 95       	ret
		else if(a == eS_PORTB4)
    14ba:	8e 30       	cpi	r24, 0x0E	; 14
    14bc:	91 05       	cpc	r25, r1
    14be:	11 f4       	brne	.+4      	; 0x14c4 <pinChange+0x88>
		  PORTB &= ~(1<<PB4);  
    14c0:	c4 98       	cbi	0x18, 4	; 24
    14c2:	08 95       	ret
		else if(a == eS_PORTB5)
    14c4:	8f 30       	cpi	r24, 0x0F	; 15
    14c6:	91 05       	cpc	r25, r1
    14c8:	11 f4       	brne	.+4      	; 0x14ce <pinChange+0x92>
		  PORTB &= ~(1<<PB5);  
    14ca:	c5 98       	cbi	0x18, 5	; 24
    14cc:	08 95       	ret
		else if(a == eS_PORTB6)
    14ce:	80 31       	cpi	r24, 0x10	; 16
    14d0:	91 05       	cpc	r25, r1
    14d2:	11 f4       	brne	.+4      	; 0x14d8 <pinChange+0x9c>
		  PORTB &= ~(1<<PB6);  
    14d4:	c6 98       	cbi	0x18, 6	; 24
    14d6:	08 95       	ret
		else if(a == eS_PORTB7)
    14d8:	81 31       	cpi	r24, 0x11	; 17
    14da:	91 05       	cpc	r25, r1
    14dc:	11 f4       	brne	.+4      	; 0x14e2 <pinChange+0xa6>
		  PORTB &= ~(1<<PB7);
    14de:	c7 98       	cbi	0x18, 7	; 24
    14e0:	08 95       	ret
		else if(a == eS_PORTC0)
    14e2:	84 31       	cpi	r24, 0x14	; 20
    14e4:	91 05       	cpc	r25, r1
    14e6:	11 f4       	brne	.+4      	; 0x14ec <pinChange+0xb0>
		  PORTC &= ~(1<<PC0);   
    14e8:	a8 98       	cbi	0x15, 0	; 21
    14ea:	08 95       	ret
		else if(a == eS_PORTC1)
    14ec:	85 31       	cpi	r24, 0x15	; 21
    14ee:	91 05       	cpc	r25, r1
    14f0:	11 f4       	brne	.+4      	; 0x14f6 <pinChange+0xba>
		  PORTC &= ~(1<<PC1); 
    14f2:	a9 98       	cbi	0x15, 1	; 21
    14f4:	08 95       	ret
		else if(a == eS_PORTC2)
    14f6:	86 31       	cpi	r24, 0x16	; 22
    14f8:	91 05       	cpc	r25, r1
    14fa:	11 f4       	brne	.+4      	; 0x1500 <pinChange+0xc4>
		  PORTC &= ~(1<<PC2);
    14fc:	aa 98       	cbi	0x15, 2	; 21
    14fe:	08 95       	ret
		else if(a == eS_PORTC3)
    1500:	87 31       	cpi	r24, 0x17	; 23
    1502:	91 05       	cpc	r25, r1
    1504:	11 f4       	brne	.+4      	; 0x150a <pinChange+0xce>
		  PORTC &= ~(1<<PC3);   
    1506:	ab 98       	cbi	0x15, 3	; 21
    1508:	08 95       	ret
		else if(a == eS_PORTC4)
    150a:	88 31       	cpi	r24, 0x18	; 24
    150c:	91 05       	cpc	r25, r1
    150e:	11 f4       	brne	.+4      	; 0x1514 <pinChange+0xd8>
		  PORTC &= ~(1<<PC4);  
    1510:	ac 98       	cbi	0x15, 4	; 21
    1512:	08 95       	ret
		else if(a == eS_PORTC5)
    1514:	89 31       	cpi	r24, 0x19	; 25
    1516:	91 05       	cpc	r25, r1
    1518:	11 f4       	brne	.+4      	; 0x151e <pinChange+0xe2>
		  PORTC &= ~(1<<PC5);  
    151a:	ad 98       	cbi	0x15, 5	; 21
    151c:	08 95       	ret
        else if(a == eS_PORTC6)
    151e:	8a 31       	cpi	r24, 0x1A	; 26
    1520:	91 05       	cpc	r25, r1
    1522:	11 f4       	brne	.+4      	; 0x1528 <pinChange+0xec>
          PORTC &= ~(1<<PC6);		
    1524:	ae 98       	cbi	0x15, 6	; 21
    1526:	08 95       	ret
		else if(a == eS_PORTC7)
    1528:	8b 31       	cpi	r24, 0x1B	; 27
    152a:	91 05       	cpc	r25, r1
    152c:	11 f4       	brne	.+4      	; 0x1532 <pinChange+0xf6>
		  PORTC &= ~(1<<PC7);
    152e:	af 98       	cbi	0x15, 7	; 21
    1530:	08 95       	ret
		else if(a == eS_PORTD0)
    1532:	8e 31       	cpi	r24, 0x1E	; 30
    1534:	91 05       	cpc	r25, r1
    1536:	11 f4       	brne	.+4      	; 0x153c <pinChange+0x100>
		  PORTD &= ~(1<<PD0);
    1538:	90 98       	cbi	0x12, 0	; 18
    153a:	08 95       	ret
		else if(a == eS_PORTD1)
    153c:	8f 31       	cpi	r24, 0x1F	; 31
    153e:	91 05       	cpc	r25, r1
    1540:	11 f4       	brne	.+4      	; 0x1546 <pinChange+0x10a>
		  PORTD &= ~(1<<PD1);  
    1542:	91 98       	cbi	0x12, 1	; 18
    1544:	08 95       	ret
		else if(a == eS_PORTD2)
    1546:	80 32       	cpi	r24, 0x20	; 32
    1548:	91 05       	cpc	r25, r1
    154a:	11 f4       	brne	.+4      	; 0x1550 <pinChange+0x114>
		  PORTD &= ~(1<<PD2);
    154c:	92 98       	cbi	0x12, 2	; 18
    154e:	08 95       	ret
		else if(a == eS_PORTD3)
    1550:	81 32       	cpi	r24, 0x21	; 33
    1552:	91 05       	cpc	r25, r1
    1554:	11 f4       	brne	.+4      	; 0x155a <pinChange+0x11e>
		  PORTD &= ~(1<<PD3);
    1556:	93 98       	cbi	0x12, 3	; 18
    1558:	08 95       	ret
		else if(a == eS_PORTD4)
    155a:	82 32       	cpi	r24, 0x22	; 34
    155c:	91 05       	cpc	r25, r1
    155e:	11 f4       	brne	.+4      	; 0x1564 <pinChange+0x128>
		  PORTD &= ~(1<<PD4);
    1560:	94 98       	cbi	0x12, 4	; 18
    1562:	08 95       	ret
		else if(a == eS_PORTD5)
    1564:	83 32       	cpi	r24, 0x23	; 35
    1566:	91 05       	cpc	r25, r1
    1568:	11 f4       	brne	.+4      	; 0x156e <pinChange+0x132>
		  PORTD &= ~(1<<PD5);
    156a:	95 98       	cbi	0x12, 5	; 18
    156c:	08 95       	ret
		else if(a == eS_PORTD6)
    156e:	84 32       	cpi	r24, 0x24	; 36
    1570:	91 05       	cpc	r25, r1
    1572:	11 f4       	brne	.+4      	; 0x1578 <pinChange+0x13c>
		  PORTD &= ~(1<<PD6);   
    1574:	96 98       	cbi	0x12, 6	; 18
    1576:	08 95       	ret
		else if(a == eS_PORTD7)
    1578:	85 32       	cpi	r24, 0x25	; 37
    157a:	91 05       	cpc	r25, r1
    157c:	09 f0       	breq	.+2      	; 0x1580 <pinChange+0x144>
    157e:	a0 c0       	rjmp	.+320    	; 0x16c0 <pinChange+0x284>
		  PORTD &= ~(1<<PD7);           
    1580:	97 98       	cbi	0x12, 7	; 18
    1582:	08 95       	ret
	}
	else
	{
		if(a == eS_PORTA0)
    1584:	00 97       	sbiw	r24, 0x00	; 0
    1586:	11 f4       	brne	.+4      	; 0x158c <pinChange+0x150>
		  PORTA |= (1<<PA0);
    1588:	d8 9a       	sbi	0x1b, 0	; 27
    158a:	08 95       	ret
		else if(a == eS_PORTA1)
    158c:	81 30       	cpi	r24, 0x01	; 1
    158e:	91 05       	cpc	r25, r1
    1590:	11 f4       	brne	.+4      	; 0x1596 <pinChange+0x15a>
		  PORTA |= (1<<PA1);
    1592:	d9 9a       	sbi	0x1b, 1	; 27
    1594:	08 95       	ret
		else if(a == eS_PORTA2)
    1596:	82 30       	cpi	r24, 0x02	; 2
    1598:	91 05       	cpc	r25, r1
    159a:	11 f4       	brne	.+4      	; 0x15a0 <pinChange+0x164>
		  PORTA |= (1<<PA2);
    159c:	da 9a       	sbi	0x1b, 2	; 27
    159e:	08 95       	ret
		else if(a == eS_PORTA3)
    15a0:	83 30       	cpi	r24, 0x03	; 3
    15a2:	91 05       	cpc	r25, r1
    15a4:	11 f4       	brne	.+4      	; 0x15aa <pinChange+0x16e>
		  PORTA |= (1<<PA3);
    15a6:	db 9a       	sbi	0x1b, 3	; 27
    15a8:	08 95       	ret
		else if(a == eS_PORTA4)
    15aa:	84 30       	cpi	r24, 0x04	; 4
    15ac:	91 05       	cpc	r25, r1
    15ae:	11 f4       	brne	.+4      	; 0x15b4 <pinChange+0x178>
		  PORTA |= (1<<PA4);
    15b0:	dc 9a       	sbi	0x1b, 4	; 27
    15b2:	08 95       	ret
		else if(a == eS_PORTA5)
    15b4:	85 30       	cpi	r24, 0x05	; 5
    15b6:	91 05       	cpc	r25, r1
    15b8:	11 f4       	brne	.+4      	; 0x15be <pinChange+0x182>
		  PORTA |= (1<<PA5);
    15ba:	dd 9a       	sbi	0x1b, 5	; 27
    15bc:	08 95       	ret
		else if(a == eS_PORTA6)
    15be:	86 30       	cpi	r24, 0x06	; 6
    15c0:	91 05       	cpc	r25, r1
    15c2:	11 f4       	brne	.+4      	; 0x15c8 <pinChange+0x18c>
		  PORTA |= (1<<PA6);
    15c4:	de 9a       	sbi	0x1b, 6	; 27
    15c6:	08 95       	ret
		else if(a == eS_PORTA7)
    15c8:	87 30       	cpi	r24, 0x07	; 7
    15ca:	91 05       	cpc	r25, r1
    15cc:	11 f4       	brne	.+4      	; 0x15d2 <pinChange+0x196>
		  PORTA |= (1<<PA7);
    15ce:	df 9a       	sbi	0x1b, 7	; 27
    15d0:	08 95       	ret
		else if(a == eS_PORTB0)
    15d2:	8a 30       	cpi	r24, 0x0A	; 10
    15d4:	91 05       	cpc	r25, r1
    15d6:	11 f4       	brne	.+4      	; 0x15dc <pinChange+0x1a0>
	  	  PORTB |= (1<<PB0);
    15d8:	c0 9a       	sbi	0x18, 0	; 24
    15da:	08 95       	ret
		else if(a == eS_PORTB1)
    15dc:	8b 30       	cpi	r24, 0x0B	; 11
    15de:	91 05       	cpc	r25, r1
    15e0:	11 f4       	brne	.+4      	; 0x15e6 <pinChange+0x1aa>
		  PORTB |= (1<<PB1);
    15e2:	c1 9a       	sbi	0x18, 1	; 24
    15e4:	08 95       	ret
		else if(a == eS_PORTB2)
    15e6:	8c 30       	cpi	r24, 0x0C	; 12
    15e8:	91 05       	cpc	r25, r1
    15ea:	11 f4       	brne	.+4      	; 0x15f0 <pinChange+0x1b4>
		  PORTB |= (1<<PB2);
    15ec:	c2 9a       	sbi	0x18, 2	; 24
    15ee:	08 95       	ret
		else if(a == eS_PORTB3)
    15f0:	8d 30       	cpi	r24, 0x0D	; 13
    15f2:	91 05       	cpc	r25, r1
    15f4:	11 f4       	brne	.+4      	; 0x15fa <pinChange+0x1be>
		  PORTB |= (1<<PB3);
    15f6:	c3 9a       	sbi	0x18, 3	; 24
    15f8:	08 95       	ret
		else if(a == eS_PORTB4)
    15fa:	8e 30       	cpi	r24, 0x0E	; 14
    15fc:	91 05       	cpc	r25, r1
    15fe:	11 f4       	brne	.+4      	; 0x1604 <pinChange+0x1c8>
		  PORTB |= (1<<PB4);
    1600:	c4 9a       	sbi	0x18, 4	; 24
    1602:	08 95       	ret
		else if(a == eS_PORTB5)
    1604:	8f 30       	cpi	r24, 0x0F	; 15
    1606:	91 05       	cpc	r25, r1
    1608:	11 f4       	brne	.+4      	; 0x160e <pinChange+0x1d2>
		  PORTB |= (1<<PB5);
    160a:	c5 9a       	sbi	0x18, 5	; 24
    160c:	08 95       	ret
		else if(a == eS_PORTB6)
    160e:	80 31       	cpi	r24, 0x10	; 16
    1610:	91 05       	cpc	r25, r1
    1612:	11 f4       	brne	.+4      	; 0x1618 <pinChange+0x1dc>
		  PORTB |= (1<<PB6);
    1614:	c6 9a       	sbi	0x18, 6	; 24
    1616:	08 95       	ret
		else if(a == eS_PORTB7)
    1618:	81 31       	cpi	r24, 0x11	; 17
    161a:	91 05       	cpc	r25, r1
    161c:	11 f4       	brne	.+4      	; 0x1622 <pinChange+0x1e6>
		  PORTB |= (1<<PB7);
    161e:	c7 9a       	sbi	0x18, 7	; 24
    1620:	08 95       	ret
		else if(a == eS_PORTC0)
    1622:	84 31       	cpi	r24, 0x14	; 20
    1624:	91 05       	cpc	r25, r1
    1626:	11 f4       	brne	.+4      	; 0x162c <pinChange+0x1f0>
		  PORTC |= (1<<PC0);
    1628:	a8 9a       	sbi	0x15, 0	; 21
    162a:	08 95       	ret
		else if(a == eS_PORTC1)
    162c:	85 31       	cpi	r24, 0x15	; 21
    162e:	91 05       	cpc	r25, r1
    1630:	11 f4       	brne	.+4      	; 0x1636 <pinChange+0x1fa>
		  PORTC |= (1<<PC1);
    1632:	a9 9a       	sbi	0x15, 1	; 21
    1634:	08 95       	ret
		else if(a == eS_PORTC2)
    1636:	86 31       	cpi	r24, 0x16	; 22
    1638:	91 05       	cpc	r25, r1
    163a:	11 f4       	brne	.+4      	; 0x1640 <pinChange+0x204>
	  	  PORTC |= (1<<PC2);
    163c:	aa 9a       	sbi	0x15, 2	; 21
    163e:	08 95       	ret
		else if(a == eS_PORTC3)
    1640:	87 31       	cpi	r24, 0x17	; 23
    1642:	91 05       	cpc	r25, r1
    1644:	11 f4       	brne	.+4      	; 0x164a <pinChange+0x20e>
		  PORTC |= (1<<PC3);
    1646:	ab 9a       	sbi	0x15, 3	; 21
    1648:	08 95       	ret
		else if(a == eS_PORTC4)
    164a:	88 31       	cpi	r24, 0x18	; 24
    164c:	91 05       	cpc	r25, r1
    164e:	11 f4       	brne	.+4      	; 0x1654 <pinChange+0x218>
		  PORTC |= (1<<PC4);
    1650:	ac 9a       	sbi	0x15, 4	; 21
    1652:	08 95       	ret
		else if(a == eS_PORTC5)
    1654:	89 31       	cpi	r24, 0x19	; 25
    1656:	91 05       	cpc	r25, r1
    1658:	11 f4       	brne	.+4      	; 0x165e <pinChange+0x222>
		  PORTC |= (1<<PC5);
    165a:	ad 9a       	sbi	0x15, 5	; 21
    165c:	08 95       	ret
		else if(a == eS_PORTC6)
    165e:	8a 31       	cpi	r24, 0x1A	; 26
    1660:	91 05       	cpc	r25, r1
    1662:	11 f4       	brne	.+4      	; 0x1668 <pinChange+0x22c>
		  PORTC |= (1<<PC6);  
    1664:	ae 9a       	sbi	0x15, 6	; 21
    1666:	08 95       	ret
		else if(a == eS_PORTC7)
    1668:	8b 31       	cpi	r24, 0x1B	; 27
    166a:	91 05       	cpc	r25, r1
    166c:	11 f4       	brne	.+4      	; 0x1672 <pinChange+0x236>
		  PORTC |= (1<<PC7);
    166e:	af 9a       	sbi	0x15, 7	; 21
    1670:	08 95       	ret
		else if(a == eS_PORTD0)
    1672:	8e 31       	cpi	r24, 0x1E	; 30
    1674:	91 05       	cpc	r25, r1
    1676:	11 f4       	brne	.+4      	; 0x167c <pinChange+0x240>
		  PORTD |= (1<<PD0);
    1678:	90 9a       	sbi	0x12, 0	; 18
    167a:	08 95       	ret
		else if(a == eS_PORTD1)
    167c:	8f 31       	cpi	r24, 0x1F	; 31
    167e:	91 05       	cpc	r25, r1
    1680:	11 f4       	brne	.+4      	; 0x1686 <pinChange+0x24a>
		  PORTD |= (1<<PD1);
    1682:	91 9a       	sbi	0x12, 1	; 18
    1684:	08 95       	ret
		else if(a == eS_PORTD2)
    1686:	80 32       	cpi	r24, 0x20	; 32
    1688:	91 05       	cpc	r25, r1
    168a:	11 f4       	brne	.+4      	; 0x1690 <pinChange+0x254>
		  PORTD |= (1<<PD2);
    168c:	92 9a       	sbi	0x12, 2	; 18
    168e:	08 95       	ret
		else if(a == eS_PORTD3)
    1690:	81 32       	cpi	r24, 0x21	; 33
    1692:	91 05       	cpc	r25, r1
    1694:	11 f4       	brne	.+4      	; 0x169a <pinChange+0x25e>
		  PORTD |= (1<<PD3);
    1696:	93 9a       	sbi	0x12, 3	; 18
    1698:	08 95       	ret
		else if(a == eS_PORTD4)
    169a:	82 32       	cpi	r24, 0x22	; 34
    169c:	91 05       	cpc	r25, r1
    169e:	11 f4       	brne	.+4      	; 0x16a4 <pinChange+0x268>
		  PORTD |= (1<<PD4);
    16a0:	94 9a       	sbi	0x12, 4	; 18
    16a2:	08 95       	ret
		else if(a == eS_PORTD5)
    16a4:	83 32       	cpi	r24, 0x23	; 35
    16a6:	91 05       	cpc	r25, r1
    16a8:	11 f4       	brne	.+4      	; 0x16ae <pinChange+0x272>
		  PORTD |= (1<<PD5);
    16aa:	95 9a       	sbi	0x12, 5	; 18
    16ac:	08 95       	ret
		else if(a == eS_PORTD6)
    16ae:	84 32       	cpi	r24, 0x24	; 36
    16b0:	91 05       	cpc	r25, r1
    16b2:	11 f4       	brne	.+4      	; 0x16b8 <pinChange+0x27c>
		  PORTD |= (1<<PD6);
    16b4:	96 9a       	sbi	0x12, 6	; 18
    16b6:	08 95       	ret
		else if(a == eS_PORTD7)
    16b8:	85 32       	cpi	r24, 0x25	; 37
    16ba:	91 05       	cpc	r25, r1
    16bc:	09 f4       	brne	.+2      	; 0x16c0 <pinChange+0x284>
		  PORTD |= (1<<PD7);
    16be:	97 9a       	sbi	0x12, 7	; 18
    16c0:	08 95       	ret

000016c2 <Lcd8_Port>:



//LCD 8 Bit Interfacing Functions
void Lcd8_Port(char a)
{
    16c2:	0f 93       	push	r16
    16c4:	1f 93       	push	r17
    16c6:	08 2f       	mov	r16, r24
	if(a & 1)
    16c8:	18 2f       	mov	r17, r24
    16ca:	80 ff       	sbrs	r24, 0
    16cc:	07 c0       	rjmp	.+14     	; 0x16dc <Lcd8_Port+0x1a>
	pinChange(D0,1);
    16ce:	80 e0       	ldi	r24, 0x00	; 0
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	61 e0       	ldi	r22, 0x01	; 1
    16d4:	70 e0       	ldi	r23, 0x00	; 0
    16d6:	0e 94 1e 0a 	call	0x143c	; 0x143c <pinChange>
    16da:	06 c0       	rjmp	.+12     	; 0x16e8 <Lcd8_Port+0x26>
	else
	pinChange(D0,0);
    16dc:	80 e0       	ldi	r24, 0x00	; 0
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	60 e0       	ldi	r22, 0x00	; 0
    16e2:	70 e0       	ldi	r23, 0x00	; 0
    16e4:	0e 94 1e 0a 	call	0x143c	; 0x143c <pinChange>
	
	if(a & 2)
    16e8:	11 ff       	sbrs	r17, 1
    16ea:	07 c0       	rjmp	.+14     	; 0x16fa <Lcd8_Port+0x38>
	pinChange(D1,1);
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	61 e0       	ldi	r22, 0x01	; 1
    16f2:	70 e0       	ldi	r23, 0x00	; 0
    16f4:	0e 94 1e 0a 	call	0x143c	; 0x143c <pinChange>
    16f8:	06 c0       	rjmp	.+12     	; 0x1706 <Lcd8_Port+0x44>
	else
	pinChange(D1,0);
    16fa:	81 e0       	ldi	r24, 0x01	; 1
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	60 e0       	ldi	r22, 0x00	; 0
    1700:	70 e0       	ldi	r23, 0x00	; 0
    1702:	0e 94 1e 0a 	call	0x143c	; 0x143c <pinChange>
	
	if(a & 4)
    1706:	12 ff       	sbrs	r17, 2
    1708:	07 c0       	rjmp	.+14     	; 0x1718 <Lcd8_Port+0x56>
	pinChange(D2,1);
    170a:	82 e0       	ldi	r24, 0x02	; 2
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	61 e0       	ldi	r22, 0x01	; 1
    1710:	70 e0       	ldi	r23, 0x00	; 0
    1712:	0e 94 1e 0a 	call	0x143c	; 0x143c <pinChange>
    1716:	06 c0       	rjmp	.+12     	; 0x1724 <Lcd8_Port+0x62>
	else
	pinChange(D2,0);
    1718:	82 e0       	ldi	r24, 0x02	; 2
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	60 e0       	ldi	r22, 0x00	; 0
    171e:	70 e0       	ldi	r23, 0x00	; 0
    1720:	0e 94 1e 0a 	call	0x143c	; 0x143c <pinChange>
	
	if(a & 8)
    1724:	13 ff       	sbrs	r17, 3
    1726:	07 c0       	rjmp	.+14     	; 0x1736 <Lcd8_Port+0x74>
	pinChange(D3,1);
    1728:	83 e0       	ldi	r24, 0x03	; 3
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	61 e0       	ldi	r22, 0x01	; 1
    172e:	70 e0       	ldi	r23, 0x00	; 0
    1730:	0e 94 1e 0a 	call	0x143c	; 0x143c <pinChange>
    1734:	06 c0       	rjmp	.+12     	; 0x1742 <Lcd8_Port+0x80>
	else
	pinChange(D3,0);
    1736:	83 e0       	ldi	r24, 0x03	; 3
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	60 e0       	ldi	r22, 0x00	; 0
    173c:	70 e0       	ldi	r23, 0x00	; 0
    173e:	0e 94 1e 0a 	call	0x143c	; 0x143c <pinChange>
	
	if(a & 16)
    1742:	14 ff       	sbrs	r17, 4
    1744:	07 c0       	rjmp	.+14     	; 0x1754 <Lcd8_Port+0x92>
	pinChange(D4,1);
    1746:	88 e1       	ldi	r24, 0x18	; 24
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	61 e0       	ldi	r22, 0x01	; 1
    174c:	70 e0       	ldi	r23, 0x00	; 0
    174e:	0e 94 1e 0a 	call	0x143c	; 0x143c <pinChange>
    1752:	06 c0       	rjmp	.+12     	; 0x1760 <Lcd8_Port+0x9e>
	else
	pinChange(D4,0);
    1754:	88 e1       	ldi	r24, 0x18	; 24
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	60 e0       	ldi	r22, 0x00	; 0
    175a:	70 e0       	ldi	r23, 0x00	; 0
    175c:	0e 94 1e 0a 	call	0x143c	; 0x143c <pinChange>

	if(a & 32)
    1760:	15 ff       	sbrs	r17, 5
    1762:	07 c0       	rjmp	.+14     	; 0x1772 <Lcd8_Port+0xb0>
	pinChange(D5,1);
    1764:	89 e1       	ldi	r24, 0x19	; 25
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	61 e0       	ldi	r22, 0x01	; 1
    176a:	70 e0       	ldi	r23, 0x00	; 0
    176c:	0e 94 1e 0a 	call	0x143c	; 0x143c <pinChange>
    1770:	06 c0       	rjmp	.+12     	; 0x177e <Lcd8_Port+0xbc>
	else
	pinChange(D5,0);
    1772:	89 e1       	ldi	r24, 0x19	; 25
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	60 e0       	ldi	r22, 0x00	; 0
    1778:	70 e0       	ldi	r23, 0x00	; 0
    177a:	0e 94 1e 0a 	call	0x143c	; 0x143c <pinChange>
	
	if(a & 64)
    177e:	16 ff       	sbrs	r17, 6
    1780:	07 c0       	rjmp	.+14     	; 0x1790 <Lcd8_Port+0xce>
	pinChange(D6,1);
    1782:	8a e1       	ldi	r24, 0x1A	; 26
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	61 e0       	ldi	r22, 0x01	; 1
    1788:	70 e0       	ldi	r23, 0x00	; 0
    178a:	0e 94 1e 0a 	call	0x143c	; 0x143c <pinChange>
    178e:	06 c0       	rjmp	.+12     	; 0x179c <Lcd8_Port+0xda>
	else
	pinChange(D6,0);
    1790:	8a e1       	ldi	r24, 0x1A	; 26
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	60 e0       	ldi	r22, 0x00	; 0
    1796:	70 e0       	ldi	r23, 0x00	; 0
    1798:	0e 94 1e 0a 	call	0x143c	; 0x143c <pinChange>
	
	if(a & 128)
    179c:	00 23       	and	r16, r16
    179e:	3c f4       	brge	.+14     	; 0x17ae <Lcd8_Port+0xec>
	pinChange(D7,1);
    17a0:	8b e1       	ldi	r24, 0x1B	; 27
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	61 e0       	ldi	r22, 0x01	; 1
    17a6:	70 e0       	ldi	r23, 0x00	; 0
    17a8:	0e 94 1e 0a 	call	0x143c	; 0x143c <pinChange>
    17ac:	06 c0       	rjmp	.+12     	; 0x17ba <Lcd8_Port+0xf8>
	else
	pinChange(D7,0);
    17ae:	8b e1       	ldi	r24, 0x1B	; 27
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	60 e0       	ldi	r22, 0x00	; 0
    17b4:	70 e0       	ldi	r23, 0x00	; 0
    17b6:	0e 94 1e 0a 	call	0x143c	; 0x143c <pinChange>
}
    17ba:	1f 91       	pop	r17
    17bc:	0f 91       	pop	r16
    17be:	08 95       	ret

000017c0 <Lcd8_Cmd>:
void Lcd8_Cmd(char a)
{
    17c0:	1f 93       	push	r17
    17c2:	18 2f       	mov	r17, r24
	pinChange(RS,0);             // => RS = 0
    17c4:	86 e1       	ldi	r24, 0x16	; 22
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	60 e0       	ldi	r22, 0x00	; 0
    17ca:	70 e0       	ldi	r23, 0x00	; 0
    17cc:	0e 94 1e 0a 	call	0x143c	; 0x143c <pinChange>
	Lcd8_Port(a);             //Data transfer
    17d0:	81 2f       	mov	r24, r17
    17d2:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <Lcd8_Port>
	pinChange(EN,1);             // => E = 1
    17d6:	87 e1       	ldi	r24, 0x17	; 23
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	61 e0       	ldi	r22, 0x01	; 1
    17dc:	70 e0       	ldi	r23, 0x00	; 0
    17de:	0e 94 1e 0a 	call	0x143c	; 0x143c <pinChange>
    17e2:	89 ef       	ldi	r24, 0xF9	; 249
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	01 97       	sbiw	r24, 0x01	; 1
    17e8:	f1 f7       	brne	.-4      	; 0x17e6 <Lcd8_Cmd+0x26>
    17ea:	00 c0       	rjmp	.+0      	; 0x17ec <Lcd8_Cmd+0x2c>
    17ec:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);             // => E = 0
    17ee:	87 e1       	ldi	r24, 0x17	; 23
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	60 e0       	ldi	r22, 0x00	; 0
    17f4:	70 e0       	ldi	r23, 0x00	; 0
    17f6:	0e 94 1e 0a 	call	0x143c	; 0x143c <pinChange>
    17fa:	89 ef       	ldi	r24, 0xF9	; 249
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	01 97       	sbiw	r24, 0x01	; 1
    1800:	f1 f7       	brne	.-4      	; 0x17fe <Lcd8_Cmd+0x3e>
    1802:	00 c0       	rjmp	.+0      	; 0x1804 <Lcd8_Cmd+0x44>
    1804:	00 00       	nop
	_delay_ms(1);
}
    1806:	1f 91       	pop	r17
    1808:	08 95       	ret

0000180a <Lcd8_Clear>:

void Lcd8_Clear()
{
	Lcd8_Cmd(1);
    180a:	81 e0       	ldi	r24, 0x01	; 1
    180c:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <Lcd8_Cmd>
}
    1810:	08 95       	ret

00001812 <Lcd8_Set_Cursor>:

void Lcd8_Set_Cursor(char a, char b)
{
	if(a == 1)
    1812:	81 30       	cpi	r24, 0x01	; 1
    1814:	29 f4       	brne	.+10     	; 0x1820 <Lcd8_Set_Cursor+0xe>
	Lcd8_Cmd(0x80 + b);
    1816:	86 2f       	mov	r24, r22
    1818:	80 58       	subi	r24, 0x80	; 128
    181a:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <Lcd8_Cmd>
    181e:	08 95       	ret
	else if(a == 2)
    1820:	82 30       	cpi	r24, 0x02	; 2
    1822:	21 f4       	brne	.+8      	; 0x182c <Lcd8_Set_Cursor+0x1a>
	Lcd8_Cmd(0xC0 + b);
    1824:	86 2f       	mov	r24, r22
    1826:	80 54       	subi	r24, 0x40	; 64
    1828:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <Lcd8_Cmd>
    182c:	08 95       	ret

0000182e <Lcd8_Init>:
}

void Lcd8_Init()
{
	pinChange(RS,0);
    182e:	86 e1       	ldi	r24, 0x16	; 22
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	60 e0       	ldi	r22, 0x00	; 0
    1834:	70 e0       	ldi	r23, 0x00	; 0
    1836:	0e 94 1e 0a 	call	0x143c	; 0x143c <pinChange>
	pinChange(EN,0);
    183a:	87 e1       	ldi	r24, 0x17	; 23
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	60 e0       	ldi	r22, 0x00	; 0
    1840:	70 e0       	ldi	r23, 0x00	; 0
    1842:	0e 94 1e 0a 	call	0x143c	; 0x143c <pinChange>
    1846:	87 e8       	ldi	r24, 0x87	; 135
    1848:	93 e1       	ldi	r25, 0x13	; 19
    184a:	01 97       	sbiw	r24, 0x01	; 1
    184c:	f1 f7       	brne	.-4      	; 0x184a <Lcd8_Init+0x1c>
    184e:	00 c0       	rjmp	.+0      	; 0x1850 <Lcd8_Init+0x22>
    1850:	00 00       	nop
	_delay_ms(20);
	///////////// Reset process from datasheet /////////
	Lcd8_Cmd(0x30);
    1852:	80 e3       	ldi	r24, 0x30	; 48
    1854:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <Lcd8_Cmd>
    1858:	81 ee       	ldi	r24, 0xE1	; 225
    185a:	94 e0       	ldi	r25, 0x04	; 4
    185c:	01 97       	sbiw	r24, 0x01	; 1
    185e:	f1 f7       	brne	.-4      	; 0x185c <Lcd8_Init+0x2e>
    1860:	00 c0       	rjmp	.+0      	; 0x1862 <Lcd8_Init+0x34>
    1862:	00 00       	nop
	_delay_ms(5);
	Lcd8_Cmd(0x30);
    1864:	80 e3       	ldi	r24, 0x30	; 48
    1866:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <Lcd8_Cmd>
    186a:	89 ef       	ldi	r24, 0xF9	; 249
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	01 97       	sbiw	r24, 0x01	; 1
    1870:	f1 f7       	brne	.-4      	; 0x186e <Lcd8_Init+0x40>
    1872:	00 c0       	rjmp	.+0      	; 0x1874 <Lcd8_Init+0x46>
    1874:	00 00       	nop
	_delay_ms(1);
	Lcd8_Cmd(0x30);
    1876:	80 e3       	ldi	r24, 0x30	; 48
    1878:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <Lcd8_Cmd>
    187c:	83 ec       	ldi	r24, 0xC3	; 195
    187e:	99 e0       	ldi	r25, 0x09	; 9
    1880:	01 97       	sbiw	r24, 0x01	; 1
    1882:	f1 f7       	brne	.-4      	; 0x1880 <Lcd8_Init+0x52>
    1884:	00 c0       	rjmp	.+0      	; 0x1886 <Lcd8_Init+0x58>
    1886:	00 00       	nop
	_delay_ms(10);
	/////////////////////////////////////////////////////
	Lcd8_Cmd(0x38);    //function set
    1888:	88 e3       	ldi	r24, 0x38	; 56
    188a:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <Lcd8_Cmd>
	Lcd8_Cmd(0x0C);    //display on,cursor off,blink off
    188e:	8c e0       	ldi	r24, 0x0C	; 12
    1890:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <Lcd8_Cmd>
	Lcd8_Cmd(0x01);    //clear display
    1894:	81 e0       	ldi	r24, 0x01	; 1
    1896:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <Lcd8_Cmd>
	Lcd8_Cmd(0x06);    //entry mode, set increment
    189a:	86 e0       	ldi	r24, 0x06	; 6
    189c:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <Lcd8_Cmd>
}
    18a0:	08 95       	ret

000018a2 <Lcd8_Write_Char>:

void Lcd8_Write_Char(char a)
{
    18a2:	1f 93       	push	r17
    18a4:	18 2f       	mov	r17, r24
	pinChange(RS,1);             // => RS = 1
    18a6:	86 e1       	ldi	r24, 0x16	; 22
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	61 e0       	ldi	r22, 0x01	; 1
    18ac:	70 e0       	ldi	r23, 0x00	; 0
    18ae:	0e 94 1e 0a 	call	0x143c	; 0x143c <pinChange>
	Lcd8_Port(a);             //Data transfer
    18b2:	81 2f       	mov	r24, r17
    18b4:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <Lcd8_Port>
	pinChange(EN,1);             // => E = 1
    18b8:	87 e1       	ldi	r24, 0x17	; 23
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	61 e0       	ldi	r22, 0x01	; 1
    18be:	70 e0       	ldi	r23, 0x00	; 0
    18c0:	0e 94 1e 0a 	call	0x143c	; 0x143c <pinChange>
    18c4:	89 ef       	ldi	r24, 0xF9	; 249
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	01 97       	sbiw	r24, 0x01	; 1
    18ca:	f1 f7       	brne	.-4      	; 0x18c8 <Lcd8_Write_Char+0x26>
    18cc:	00 c0       	rjmp	.+0      	; 0x18ce <Lcd8_Write_Char+0x2c>
    18ce:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);             // => E = 04
    18d0:	87 e1       	ldi	r24, 0x17	; 23
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	60 e0       	ldi	r22, 0x00	; 0
    18d6:	70 e0       	ldi	r23, 0x00	; 0
    18d8:	0e 94 1e 0a 	call	0x143c	; 0x143c <pinChange>
    18dc:	89 ef       	ldi	r24, 0xF9	; 249
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	01 97       	sbiw	r24, 0x01	; 1
    18e2:	f1 f7       	brne	.-4      	; 0x18e0 <Lcd8_Write_Char+0x3e>
    18e4:	00 c0       	rjmp	.+0      	; 0x18e6 <Lcd8_Write_Char+0x44>
    18e6:	00 00       	nop
	_delay_ms(1);
}
    18e8:	1f 91       	pop	r17
    18ea:	08 95       	ret

000018ec <Lcd8_Write_String>:

void Lcd8_Write_String(char *a)
{
    18ec:	cf 93       	push	r28
    18ee:	df 93       	push	r29
    18f0:	ec 01       	movw	r28, r24
	int i;
	for(i=0;a[i]!='\0';i++)
    18f2:	88 81       	ld	r24, Y
    18f4:	88 23       	and	r24, r24
    18f6:	31 f0       	breq	.+12     	; 0x1904 <Lcd8_Write_String+0x18>
	_delay_ms(1);
	pinChange(EN,0);             // => E = 04
	_delay_ms(1);
}

void Lcd8_Write_String(char *a)
    18f8:	21 96       	adiw	r28, 0x01	; 1
{
	int i;
	for(i=0;a[i]!='\0';i++)
	Lcd8_Write_Char(a[i]);
    18fa:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <Lcd8_Write_Char>
}

void Lcd8_Write_String(char *a)
{
	int i;
	for(i=0;a[i]!='\0';i++)
    18fe:	89 91       	ld	r24, Y+
    1900:	88 23       	and	r24, r24
    1902:	d9 f7       	brne	.-10     	; 0x18fa <Lcd8_Write_String+0xe>
	Lcd8_Write_Char(a[i]);
}
    1904:	df 91       	pop	r29
    1906:	cf 91       	pop	r28
    1908:	08 95       	ret

0000190a <Lcd8_Shift_Right>:

void Lcd8_Shift_Right()
{
	Lcd8_Cmd(0x1C);
    190a:	8c e1       	ldi	r24, 0x1C	; 28
    190c:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <Lcd8_Cmd>
}
    1910:	08 95       	ret

00001912 <Lcd8_Shift_Left>:

void Lcd8_Shift_Left()
{
	Lcd8_Cmd(0x18);
    1912:	88 e1       	ldi	r24, 0x18	; 24
    1914:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <Lcd8_Cmd>
}
    1918:	08 95       	ret

0000191a <Lcd4_Port>:
//End LCD 8 Bit Interfacing Functions

//LCD 4 Bit Interfacing Functions

void Lcd4_Port(char a)
{
    191a:	cf 93       	push	r28
    191c:	df 93       	push	r29
	if(a & 1)
    191e:	c8 2f       	mov	r28, r24
    1920:	d0 e0       	ldi	r29, 0x00	; 0
    1922:	ce 01       	movw	r24, r28
    1924:	80 ff       	sbrs	r24, 0
    1926:	07 c0       	rjmp	.+14     	; 0x1936 <Lcd4_Port+0x1c>
	pinChange(D4,1);
    1928:	88 e1       	ldi	r24, 0x18	; 24
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	61 e0       	ldi	r22, 0x01	; 1
    192e:	70 e0       	ldi	r23, 0x00	; 0
    1930:	0e 94 1e 0a 	call	0x143c	; 0x143c <pinChange>
    1934:	06 c0       	rjmp	.+12     	; 0x1942 <Lcd4_Port+0x28>
	else
	pinChange(D4,0);
    1936:	88 e1       	ldi	r24, 0x18	; 24
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	60 e0       	ldi	r22, 0x00	; 0
    193c:	70 e0       	ldi	r23, 0x00	; 0
    193e:	0e 94 1e 0a 	call	0x143c	; 0x143c <pinChange>
	
	if(a & 2)
    1942:	c1 ff       	sbrs	r28, 1
    1944:	07 c0       	rjmp	.+14     	; 0x1954 <Lcd4_Port+0x3a>
	pinChange(D5,1);
    1946:	89 e1       	ldi	r24, 0x19	; 25
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	61 e0       	ldi	r22, 0x01	; 1
    194c:	70 e0       	ldi	r23, 0x00	; 0
    194e:	0e 94 1e 0a 	call	0x143c	; 0x143c <pinChange>
    1952:	06 c0       	rjmp	.+12     	; 0x1960 <Lcd4_Port+0x46>
	else
	pinChange(D5,0);
    1954:	89 e1       	ldi	r24, 0x19	; 25
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	60 e0       	ldi	r22, 0x00	; 0
    195a:	70 e0       	ldi	r23, 0x00	; 0
    195c:	0e 94 1e 0a 	call	0x143c	; 0x143c <pinChange>
	
	if(a & 4)
    1960:	c2 ff       	sbrs	r28, 2
    1962:	07 c0       	rjmp	.+14     	; 0x1972 <Lcd4_Port+0x58>
	pinChange(D6,1);
    1964:	8a e1       	ldi	r24, 0x1A	; 26
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	61 e0       	ldi	r22, 0x01	; 1
    196a:	70 e0       	ldi	r23, 0x00	; 0
    196c:	0e 94 1e 0a 	call	0x143c	; 0x143c <pinChange>
    1970:	06 c0       	rjmp	.+12     	; 0x197e <Lcd4_Port+0x64>
	else
	pinChange(D6,0);
    1972:	8a e1       	ldi	r24, 0x1A	; 26
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	60 e0       	ldi	r22, 0x00	; 0
    1978:	70 e0       	ldi	r23, 0x00	; 0
    197a:	0e 94 1e 0a 	call	0x143c	; 0x143c <pinChange>
	
	if(a & 8)
    197e:	c3 ff       	sbrs	r28, 3
    1980:	07 c0       	rjmp	.+14     	; 0x1990 <Lcd4_Port+0x76>
	pinChange(D7,1);
    1982:	8b e1       	ldi	r24, 0x1B	; 27
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	61 e0       	ldi	r22, 0x01	; 1
    1988:	70 e0       	ldi	r23, 0x00	; 0
    198a:	0e 94 1e 0a 	call	0x143c	; 0x143c <pinChange>
    198e:	06 c0       	rjmp	.+12     	; 0x199c <Lcd4_Port+0x82>
	else
	pinChange(D7,0);
    1990:	8b e1       	ldi	r24, 0x1B	; 27
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	60 e0       	ldi	r22, 0x00	; 0
    1996:	70 e0       	ldi	r23, 0x00	; 0
    1998:	0e 94 1e 0a 	call	0x143c	; 0x143c <pinChange>
}
    199c:	df 91       	pop	r29
    199e:	cf 91       	pop	r28
    19a0:	08 95       	ret

000019a2 <Lcd4_Cmd>:
void Lcd4_Cmd(char a)
{
    19a2:	1f 93       	push	r17
    19a4:	18 2f       	mov	r17, r24
	pinChange(RS,0);             // => RS = 0
    19a6:	86 e1       	ldi	r24, 0x16	; 22
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	60 e0       	ldi	r22, 0x00	; 0
    19ac:	70 e0       	ldi	r23, 0x00	; 0
    19ae:	0e 94 1e 0a 	call	0x143c	; 0x143c <pinChange>
	Lcd4_Port(a);
    19b2:	81 2f       	mov	r24, r17
    19b4:	0e 94 8d 0c 	call	0x191a	; 0x191a <Lcd4_Port>
	pinChange(EN,1);            // => E = 1
    19b8:	87 e1       	ldi	r24, 0x17	; 23
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	61 e0       	ldi	r22, 0x01	; 1
    19be:	70 e0       	ldi	r23, 0x00	; 0
    19c0:	0e 94 1e 0a 	call	0x143c	; 0x143c <pinChange>
    19c4:	89 ef       	ldi	r24, 0xF9	; 249
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	01 97       	sbiw	r24, 0x01	; 1
    19ca:	f1 f7       	brne	.-4      	; 0x19c8 <Lcd4_Cmd+0x26>
    19cc:	00 c0       	rjmp	.+0      	; 0x19ce <Lcd4_Cmd+0x2c>
    19ce:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);             // => E = 0
    19d0:	87 e1       	ldi	r24, 0x17	; 23
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	60 e0       	ldi	r22, 0x00	; 0
    19d6:	70 e0       	ldi	r23, 0x00	; 0
    19d8:	0e 94 1e 0a 	call	0x143c	; 0x143c <pinChange>
    19dc:	89 ef       	ldi	r24, 0xF9	; 249
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	01 97       	sbiw	r24, 0x01	; 1
    19e2:	f1 f7       	brne	.-4      	; 0x19e0 <Lcd4_Cmd+0x3e>
    19e4:	00 c0       	rjmp	.+0      	; 0x19e6 <Lcd4_Cmd+0x44>
    19e6:	00 00       	nop
	_delay_ms(1);
}
    19e8:	1f 91       	pop	r17
    19ea:	08 95       	ret

000019ec <Lcd4_Clear>:

void Lcd4_Clear()
{
	Lcd4_Cmd(0);
    19ec:	80 e0       	ldi	r24, 0x00	; 0
    19ee:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <Lcd4_Cmd>
	Lcd4_Cmd(1);
    19f2:	81 e0       	ldi	r24, 0x01	; 1
    19f4:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <Lcd4_Cmd>
}
    19f8:	08 95       	ret

000019fa <Lcd4_Set_Cursor>:

void Lcd4_Set_Cursor(char a, char b)
{
    19fa:	1f 93       	push	r17
	char temp,z,y;
	if(a == 1)
    19fc:	81 30       	cpi	r24, 0x01	; 1
    19fe:	61 f4       	brne	.+24     	; 0x1a18 <Lcd4_Set_Cursor+0x1e>
	{
		temp = 0x80 + b;
    1a00:	16 2f       	mov	r17, r22
    1a02:	10 58       	subi	r17, 0x80	; 128
		z = temp>>4;
		y = (0x80+b) & 0x0F;
		Lcd4_Cmd(z);
    1a04:	81 2f       	mov	r24, r17
    1a06:	82 95       	swap	r24
    1a08:	8f 70       	andi	r24, 0x0F	; 15
    1a0a:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <Lcd4_Cmd>
		Lcd4_Cmd(y);
    1a0e:	81 2f       	mov	r24, r17
    1a10:	8f 70       	andi	r24, 0x0F	; 15
    1a12:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <Lcd4_Cmd>
    1a16:	0d c0       	rjmp	.+26     	; 0x1a32 <Lcd4_Set_Cursor+0x38>
	}
	else if(a == 2)
    1a18:	82 30       	cpi	r24, 0x02	; 2
    1a1a:	59 f4       	brne	.+22     	; 0x1a32 <Lcd4_Set_Cursor+0x38>
	{
		temp = 0xC0 + b;
    1a1c:	16 2f       	mov	r17, r22
    1a1e:	10 54       	subi	r17, 0x40	; 64
		z = temp>>4;
		y = (0xC0+b) & 0x0F;
		Lcd4_Cmd(z);
    1a20:	81 2f       	mov	r24, r17
    1a22:	82 95       	swap	r24
    1a24:	8f 70       	andi	r24, 0x0F	; 15
    1a26:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <Lcd4_Cmd>
		Lcd4_Cmd(y);
    1a2a:	81 2f       	mov	r24, r17
    1a2c:	8f 70       	andi	r24, 0x0F	; 15
    1a2e:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <Lcd4_Cmd>
	}
}
    1a32:	1f 91       	pop	r17
    1a34:	08 95       	ret

00001a36 <Lcd4_Init>:

void Lcd4_Init()
{
	Lcd4_Port(0x00);
    1a36:	80 e0       	ldi	r24, 0x00	; 0
    1a38:	0e 94 8d 0c 	call	0x191a	; 0x191a <Lcd4_Port>
    1a3c:	87 e8       	ldi	r24, 0x87	; 135
    1a3e:	93 e1       	ldi	r25, 0x13	; 19
    1a40:	01 97       	sbiw	r24, 0x01	; 1
    1a42:	f1 f7       	brne	.-4      	; 0x1a40 <Lcd4_Init+0xa>
    1a44:	00 c0       	rjmp	.+0      	; 0x1a46 <Lcd4_Init+0x10>
    1a46:	00 00       	nop
	_delay_ms(20);
	///////////// Reset process from datasheet /////////
	Lcd4_Cmd(0x03);
    1a48:	83 e0       	ldi	r24, 0x03	; 3
    1a4a:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <Lcd4_Cmd>
    1a4e:	81 ee       	ldi	r24, 0xE1	; 225
    1a50:	94 e0       	ldi	r25, 0x04	; 4
    1a52:	01 97       	sbiw	r24, 0x01	; 1
    1a54:	f1 f7       	brne	.-4      	; 0x1a52 <Lcd4_Init+0x1c>
    1a56:	00 c0       	rjmp	.+0      	; 0x1a58 <Lcd4_Init+0x22>
    1a58:	00 00       	nop
	_delay_ms(5);
	Lcd4_Cmd(0x03);
    1a5a:	83 e0       	ldi	r24, 0x03	; 3
    1a5c:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <Lcd4_Cmd>
    1a60:	8d eb       	ldi	r24, 0xBD	; 189
    1a62:	9a e0       	ldi	r25, 0x0A	; 10
    1a64:	01 97       	sbiw	r24, 0x01	; 1
    1a66:	f1 f7       	brne	.-4      	; 0x1a64 <Lcd4_Init+0x2e>
    1a68:	00 c0       	rjmp	.+0      	; 0x1a6a <Lcd4_Init+0x34>
    1a6a:	00 00       	nop
	_delay_ms(11);
	Lcd4_Cmd(0x03);
    1a6c:	83 e0       	ldi	r24, 0x03	; 3
    1a6e:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <Lcd4_Cmd>
	/////////////////////////////////////////////////////
	Lcd4_Cmd(0x02);
    1a72:	82 e0       	ldi	r24, 0x02	; 2
    1a74:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <Lcd4_Cmd>
	Lcd4_Cmd(0x02);
    1a78:	82 e0       	ldi	r24, 0x02	; 2
    1a7a:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <Lcd4_Cmd>
	Lcd4_Cmd(0x08);
    1a7e:	88 e0       	ldi	r24, 0x08	; 8
    1a80:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <Lcd4_Cmd>
	Lcd4_Cmd(0x00);
    1a84:	80 e0       	ldi	r24, 0x00	; 0
    1a86:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <Lcd4_Cmd>
	Lcd4_Cmd(0x0C);
    1a8a:	8c e0       	ldi	r24, 0x0C	; 12
    1a8c:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <Lcd4_Cmd>
	Lcd4_Cmd(0x00);
    1a90:	80 e0       	ldi	r24, 0x00	; 0
    1a92:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <Lcd4_Cmd>
	Lcd4_Cmd(0x06);
    1a96:	86 e0       	ldi	r24, 0x06	; 6
    1a98:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <Lcd4_Cmd>
}
    1a9c:	08 95       	ret

00001a9e <Lcd4_Write_Char>:

void Lcd4_Write_Char(char a)
{
    1a9e:	1f 93       	push	r17
    1aa0:	18 2f       	mov	r17, r24
	char temp,y;
	temp = a&0x0F;
	y = a&0xF0;
	pinChange(RS,1);             // => RS = 1
    1aa2:	86 e1       	ldi	r24, 0x16	; 22
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	61 e0       	ldi	r22, 0x01	; 1
    1aa8:	70 e0       	ldi	r23, 0x00	; 0
    1aaa:	0e 94 1e 0a 	call	0x143c	; 0x143c <pinChange>
	Lcd4_Port(y>>4);             //Data transfer
    1aae:	81 2f       	mov	r24, r17
    1ab0:	82 95       	swap	r24
    1ab2:	8f 70       	andi	r24, 0x0F	; 15
    1ab4:	0e 94 8d 0c 	call	0x191a	; 0x191a <Lcd4_Port>
	pinChange(EN,1);
    1ab8:	87 e1       	ldi	r24, 0x17	; 23
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	61 e0       	ldi	r22, 0x01	; 1
    1abe:	70 e0       	ldi	r23, 0x00	; 0
    1ac0:	0e 94 1e 0a 	call	0x143c	; 0x143c <pinChange>
    1ac4:	89 ef       	ldi	r24, 0xF9	; 249
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	01 97       	sbiw	r24, 0x01	; 1
    1aca:	f1 f7       	brne	.-4      	; 0x1ac8 <Lcd4_Write_Char+0x2a>
    1acc:	00 c0       	rjmp	.+0      	; 0x1ace <Lcd4_Write_Char+0x30>
    1ace:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);
    1ad0:	87 e1       	ldi	r24, 0x17	; 23
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	60 e0       	ldi	r22, 0x00	; 0
    1ad6:	70 e0       	ldi	r23, 0x00	; 0
    1ad8:	0e 94 1e 0a 	call	0x143c	; 0x143c <pinChange>
    1adc:	89 ef       	ldi	r24, 0xF9	; 249
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	01 97       	sbiw	r24, 0x01	; 1
    1ae2:	f1 f7       	brne	.-4      	; 0x1ae0 <Lcd4_Write_Char+0x42>
    1ae4:	00 c0       	rjmp	.+0      	; 0x1ae6 <Lcd4_Write_Char+0x48>
    1ae6:	00 00       	nop
	_delay_ms(1);
	Lcd4_Port(temp);
    1ae8:	81 2f       	mov	r24, r17
    1aea:	8f 70       	andi	r24, 0x0F	; 15
    1aec:	0e 94 8d 0c 	call	0x191a	; 0x191a <Lcd4_Port>
	pinChange(EN,1);
    1af0:	87 e1       	ldi	r24, 0x17	; 23
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	61 e0       	ldi	r22, 0x01	; 1
    1af6:	70 e0       	ldi	r23, 0x00	; 0
    1af8:	0e 94 1e 0a 	call	0x143c	; 0x143c <pinChange>
    1afc:	89 ef       	ldi	r24, 0xF9	; 249
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	01 97       	sbiw	r24, 0x01	; 1
    1b02:	f1 f7       	brne	.-4      	; 0x1b00 <Lcd4_Write_Char+0x62>
    1b04:	00 c0       	rjmp	.+0      	; 0x1b06 <Lcd4_Write_Char+0x68>
    1b06:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);
    1b08:	87 e1       	ldi	r24, 0x17	; 23
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	60 e0       	ldi	r22, 0x00	; 0
    1b0e:	70 e0       	ldi	r23, 0x00	; 0
    1b10:	0e 94 1e 0a 	call	0x143c	; 0x143c <pinChange>
    1b14:	89 ef       	ldi	r24, 0xF9	; 249
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	01 97       	sbiw	r24, 0x01	; 1
    1b1a:	f1 f7       	brne	.-4      	; 0x1b18 <Lcd4_Write_Char+0x7a>
    1b1c:	00 c0       	rjmp	.+0      	; 0x1b1e <Lcd4_Write_Char+0x80>
    1b1e:	00 00       	nop
	_delay_ms(1);
}
    1b20:	1f 91       	pop	r17
    1b22:	08 95       	ret

00001b24 <Lcd4_Write_String>:

void Lcd4_Write_String(char *a)
{
    1b24:	cf 93       	push	r28
    1b26:	df 93       	push	r29
    1b28:	ec 01       	movw	r28, r24
	int i;
	for(i=0;a[i]!='\0';i++)
    1b2a:	88 81       	ld	r24, Y
    1b2c:	88 23       	and	r24, r24
    1b2e:	31 f0       	breq	.+12     	; 0x1b3c <Lcd4_Write_String+0x18>
	_delay_ms(1);
	pinChange(EN,0);
	_delay_ms(1);
}

void Lcd4_Write_String(char *a)
    1b30:	21 96       	adiw	r28, 0x01	; 1
{
	int i;
	for(i=0;a[i]!='\0';i++)
	Lcd4_Write_Char(a[i]);
    1b32:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <Lcd4_Write_Char>
}

void Lcd4_Write_String(char *a)
{
	int i;
	for(i=0;a[i]!='\0';i++)
    1b36:	89 91       	ld	r24, Y+
    1b38:	88 23       	and	r24, r24
    1b3a:	d9 f7       	brne	.-10     	; 0x1b32 <Lcd4_Write_String+0xe>
	Lcd4_Write_Char(a[i]);
}
    1b3c:	df 91       	pop	r29
    1b3e:	cf 91       	pop	r28
    1b40:	08 95       	ret

00001b42 <Lcd4_Shift_Right>:

void Lcd4_Shift_Right()
{
	Lcd4_Cmd(0x01);
    1b42:	81 e0       	ldi	r24, 0x01	; 1
    1b44:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <Lcd4_Cmd>
	Lcd4_Cmd(0x0C);
    1b48:	8c e0       	ldi	r24, 0x0C	; 12
    1b4a:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <Lcd4_Cmd>
}
    1b4e:	08 95       	ret

00001b50 <Lcd4_Shift_Left>:

void Lcd4_Shift_Left()
{
	Lcd4_Cmd(0x01);
    1b50:	81 e0       	ldi	r24, 0x01	; 1
    1b52:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <Lcd4_Cmd>
	Lcd4_Cmd(0x08);
    1b56:	88 e0       	ldi	r24, 0x08	; 8
    1b58:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <Lcd4_Cmd>
}
    1b5c:	08 95       	ret

00001b5e <Eeprom_Initial>:

//---------------------------------------------------------//
//---------------------------------------------------------//

void Eeprom_Initial(unsigned char data_1)
{
    1b5e:	0f 93       	push	r16
    1b60:	1f 93       	push	r17
    1b62:	cf 93       	push	r28
    1b64:	df 93       	push	r29
    1b66:	18 2f       	mov	r17, r24
	//#include "Eeprom\EEPROM_routines.c"
	Lcd4_Init();
    1b68:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <Lcd4_Init>
	Lcd4_Set_Cursor(1,1);
    1b6c:	81 e0       	ldi	r24, 0x01	; 1
    1b6e:	61 e0       	ldi	r22, 0x01	; 1
    1b70:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <Lcd4_Set_Cursor>
	Lcd4_Write_String("Eeprom_Initial") ;
    1b74:	80 e0       	ldi	r24, 0x00	; 0
    1b76:	91 e0       	ldi	r25, 0x01	; 1
    1b78:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <Lcd4_Write_String>
//	transmitString_F(PSTR(" Enter text: "));
	errorStatus = EEPROM_write(0x00,0x00,data_1);
    1b7c:	80 e0       	ldi	r24, 0x00	; 0
    1b7e:	60 e0       	ldi	r22, 0x00	; 0
    1b80:	41 2f       	mov	r20, r17
    1b82:	0e 94 ae 08 	call	0x115c	; 0x115c <EEPROM_write>
    1b86:	80 93 2a 03 	sts	0x032A, r24
	sprintf(Ctemp, "EEPROM_write:%03d.%01d", (data_1/10), (data_1%10));
    1b8a:	81 2f       	mov	r24, r17
    1b8c:	6a e0       	ldi	r22, 0x0A	; 10
    1b8e:	0e 94 8b 18 	call	0x3116	; 0x3116 <__udivmodqi4>
    1b92:	08 2f       	mov	r16, r24
    1b94:	19 2f       	mov	r17, r25
    1b96:	8d b7       	in	r24, 0x3d	; 61
    1b98:	9e b7       	in	r25, 0x3e	; 62
    1b9a:	08 97       	sbiw	r24, 0x08	; 8
    1b9c:	0f b6       	in	r0, 0x3f	; 63
    1b9e:	f8 94       	cli
    1ba0:	9e bf       	out	0x3e, r25	; 62
    1ba2:	0f be       	out	0x3f, r0	; 63
    1ba4:	8d bf       	out	0x3d, r24	; 61
    1ba6:	ed b7       	in	r30, 0x3d	; 61
    1ba8:	fe b7       	in	r31, 0x3e	; 62
    1baa:	31 96       	adiw	r30, 0x01	; 1
    1bac:	cc e2       	ldi	r28, 0x2C	; 44
    1bae:	d3 e0       	ldi	r29, 0x03	; 3
    1bb0:	ad b7       	in	r26, 0x3d	; 61
    1bb2:	be b7       	in	r27, 0x3e	; 62
    1bb4:	12 96       	adiw	r26, 0x02	; 2
    1bb6:	dc 93       	st	X, r29
    1bb8:	ce 93       	st	-X, r28
    1bba:	11 97       	sbiw	r26, 0x01	; 1
    1bbc:	8f e0       	ldi	r24, 0x0F	; 15
    1bbe:	91 e0       	ldi	r25, 0x01	; 1
    1bc0:	93 83       	std	Z+3, r25	; 0x03
    1bc2:	82 83       	std	Z+2, r24	; 0x02
    1bc4:	04 83       	std	Z+4, r16	; 0x04
    1bc6:	15 82       	std	Z+5, r1	; 0x05
    1bc8:	16 83       	std	Z+6, r17	; 0x06
    1bca:	17 82       	std	Z+7, r1	; 0x07
    1bcc:	0e 94 25 19 	call	0x324a	; 0x324a <sprintf>
    Lcd4_Set_Cursor(2,1);
    1bd0:	8d b7       	in	r24, 0x3d	; 61
    1bd2:	9e b7       	in	r25, 0x3e	; 62
    1bd4:	08 96       	adiw	r24, 0x08	; 8
    1bd6:	0f b6       	in	r0, 0x3f	; 63
    1bd8:	f8 94       	cli
    1bda:	9e bf       	out	0x3e, r25	; 62
    1bdc:	0f be       	out	0x3f, r0	; 63
    1bde:	8d bf       	out	0x3d, r24	; 61
    1be0:	82 e0       	ldi	r24, 0x02	; 2
    1be2:	61 e0       	ldi	r22, 0x01	; 1
    1be4:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <Lcd4_Set_Cursor>
	Lcd4_Write_String(Ctemp) ;
    1be8:	ce 01       	movw	r24, r28
    1bea:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <Lcd4_Write_String>
	
	errorStatus = EEPROM_read(0x00,0x00,2);
    1bee:	80 e0       	ldi	r24, 0x00	; 0
    1bf0:	60 e0       	ldi	r22, 0x00	; 0
    1bf2:	42 e0       	ldi	r20, 0x02	; 2
    1bf4:	0e 94 16 08 	call	0x102c	; 0x102c <EEPROM_read>
    1bf8:	80 93 2a 03 	sts	0x032A, r24
	sprintf(Ctemp, "EEPROM_read:%03d.%01d ", (data_1/10), (data_1%10));
    1bfc:	ad b7       	in	r26, 0x3d	; 61
    1bfe:	be b7       	in	r27, 0x3e	; 62
    1c00:	18 97       	sbiw	r26, 0x08	; 8
    1c02:	0f b6       	in	r0, 0x3f	; 63
    1c04:	f8 94       	cli
    1c06:	be bf       	out	0x3e, r27	; 62
    1c08:	0f be       	out	0x3f, r0	; 63
    1c0a:	ad bf       	out	0x3d, r26	; 61
    1c0c:	ed b7       	in	r30, 0x3d	; 61
    1c0e:	fe b7       	in	r31, 0x3e	; 62
    1c10:	31 96       	adiw	r30, 0x01	; 1
    1c12:	12 96       	adiw	r26, 0x02	; 2
    1c14:	dc 93       	st	X, r29
    1c16:	ce 93       	st	-X, r28
    1c18:	11 97       	sbiw	r26, 0x01	; 1
    1c1a:	86 e2       	ldi	r24, 0x26	; 38
    1c1c:	91 e0       	ldi	r25, 0x01	; 1
    1c1e:	93 83       	std	Z+3, r25	; 0x03
    1c20:	82 83       	std	Z+2, r24	; 0x02
    1c22:	04 83       	std	Z+4, r16	; 0x04
    1c24:	15 82       	std	Z+5, r1	; 0x05
    1c26:	16 83       	std	Z+6, r17	; 0x06
    1c28:	17 82       	std	Z+7, r1	; 0x07
    1c2a:	0e 94 25 19 	call	0x324a	; 0x324a <sprintf>
    Lcd4_Set_Cursor(2,1);
    1c2e:	8d b7       	in	r24, 0x3d	; 61
    1c30:	9e b7       	in	r25, 0x3e	; 62
    1c32:	08 96       	adiw	r24, 0x08	; 8
    1c34:	0f b6       	in	r0, 0x3f	; 63
    1c36:	f8 94       	cli
    1c38:	9e bf       	out	0x3e, r25	; 62
    1c3a:	0f be       	out	0x3f, r0	; 63
    1c3c:	8d bf       	out	0x3d, r24	; 61
    1c3e:	82 e0       	ldi	r24, 0x02	; 2
    1c40:	61 e0       	ldi	r22, 0x01	; 1
    1c42:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <Lcd4_Set_Cursor>
	Lcd4_Write_String(Ctemp) ;
    1c46:	ce 01       	movw	r24, r28
    1c48:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <Lcd4_Write_String>
}
    1c4c:	df 91       	pop	r29
    1c4e:	cf 91       	pop	r28
    1c50:	1f 91       	pop	r17
    1c52:	0f 91       	pop	r16
    1c54:	08 95       	ret

00001c56 <Splash>:
			"Copyright:",
			"    OZHAN KD"
			};

	//-------------
	StringAt(0, 2, SPchar[0]);
    1c56:	82 e0       	ldi	r24, 0x02	; 2
    1c58:	60 e0       	ldi	r22, 0x00	; 0
    1c5a:	0e 94 3f 12 	call	0x247e	; 0x247e <N11_GotoXR>
    1c5e:	8d e3       	ldi	r24, 0x3D	; 61
    1c60:	91 e0       	ldi	r25, 0x01	; 1
    1c62:	0e 94 11 13 	call	0x2622	; 0x2622 <N11_PrintString>
	StringAt(2, 2, SPchar[1]);
    1c66:	82 e0       	ldi	r24, 0x02	; 2
    1c68:	62 e0       	ldi	r22, 0x02	; 2
    1c6a:	0e 94 3f 12 	call	0x247e	; 0x247e <N11_GotoXR>
    1c6e:	8c e4       	ldi	r24, 0x4C	; 76
    1c70:	91 e0       	ldi	r25, 0x01	; 1
    1c72:	0e 94 11 13 	call	0x2622	; 0x2622 <N11_PrintString>
	StringAt(3, 2, SPchar[2]);
    1c76:	82 e0       	ldi	r24, 0x02	; 2
    1c78:	63 e0       	ldi	r22, 0x03	; 3
    1c7a:	0e 94 3f 12 	call	0x247e	; 0x247e <N11_GotoXR>
    1c7e:	81 e5       	ldi	r24, 0x51	; 81
    1c80:	91 e0       	ldi	r25, 0x01	; 1
    1c82:	0e 94 11 13 	call	0x2622	; 0x2622 <N11_PrintString>
	StringAt(5, 2, SPchar[3]);
    1c86:	82 e0       	ldi	r24, 0x02	; 2
    1c88:	65 e0       	ldi	r22, 0x05	; 5
    1c8a:	0e 94 3f 12 	call	0x247e	; 0x247e <N11_GotoXR>
    1c8e:	87 e6       	ldi	r24, 0x67	; 103
    1c90:	91 e0       	ldi	r25, 0x01	; 1
    1c92:	0e 94 11 13 	call	0x2622	; 0x2622 <N11_PrintString>
	StringAt(6, 2, SPchar[4]);
    1c96:	82 e0       	ldi	r24, 0x02	; 2
    1c98:	66 e0       	ldi	r22, 0x06	; 6
    1c9a:	0e 94 3f 12 	call	0x247e	; 0x247e <N11_GotoXR>
    1c9e:	82 e7       	ldi	r24, 0x72	; 114
    1ca0:	91 e0       	ldi	r25, 0x01	; 1
    1ca2:	0e 94 11 13 	call	0x2622	; 0x2622 <N11_PrintString>
    1ca6:	8f eb       	ldi	r24, 0xBF	; 191
    1ca8:	97 e2       	ldi	r25, 0x27	; 39
    1caa:	a9 e0       	ldi	r26, 0x09	; 9
    1cac:	81 50       	subi	r24, 0x01	; 1
    1cae:	90 40       	sbci	r25, 0x00	; 0
    1cb0:	a0 40       	sbci	r26, 0x00	; 0
    1cb2:	e1 f7       	brne	.-8      	; 0x1cac <Splash+0x56>
    1cb4:	00 c0       	rjmp	.+0      	; 0x1cb6 <Splash+0x60>
    1cb6:	00 00       	nop

	//-------------
	_delay_ms(3000);
	N11_CLS();
    1cb8:	0e 94 55 12 	call	0x24aa	; 0x24aa <N11_CLS>
}	//Splash
    1cbc:	08 95       	ret

00001cbe <Initial>:

//---------------------------------------------------------//
//---------------------------------------------------------//
void Initial(void)
{
	cli();												//Interrupts disable
    1cbe:	f8 94       	cli

	HW_init();
    1cc0:	0e 94 02 0a 	call	0x1404	; 0x1404 <HW_init>
	a2dInit();										//AVCC & DIV64
    1cc4:	0e 94 b0 07 	call	0xf60	; 0xf60 <a2dInit>
    1cc8:	8f e9       	ldi	r24, 0x9F	; 159
    1cca:	96 e8       	ldi	r25, 0x86	; 134
    1ccc:	a1 e0       	ldi	r26, 0x01	; 1
    1cce:	81 50       	subi	r24, 0x01	; 1
    1cd0:	90 40       	sbci	r25, 0x00	; 0
    1cd2:	a0 40       	sbci	r26, 0x00	; 0
    1cd4:	e1 f7       	brne	.-8      	; 0x1cce <Initial+0x10>
    1cd6:	00 c0       	rjmp	.+0      	; 0x1cd8 <Initial+0x1a>
    1cd8:	00 00       	nop
	
	_delay_ms(500);

	//----------------------
	N11_Init();
    1cda:	0e 94 79 12 	call	0x24f2	; 0x24f2 <N11_Init>
	N11_Contrast(10);
    1cde:	8a e0       	ldi	r24, 0x0A	; 10
    1ce0:	0e 94 db 12 	call	0x25b6	; 0x25b6 <N11_Contrast>
	N11_Backlight(ON);
    1ce4:	81 e0       	ldi	r24, 0x01	; 1
    1ce6:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <N11_Backlight>
	
	//----------------------
	BUZZER(BOOT_sign);
    1cea:	82 e0       	ldi	r24, 0x02	; 2
    1cec:	0e 94 09 0a 	call	0x1412	; 0x1412 <BUZZER>
    1cf0:	8f e9       	ldi	r24, 0x9F	; 159
    1cf2:	96 e8       	ldi	r25, 0x86	; 134
    1cf4:	a1 e0       	ldi	r26, 0x01	; 1
    1cf6:	81 50       	subi	r24, 0x01	; 1
    1cf8:	90 40       	sbci	r25, 0x00	; 0
    1cfa:	a0 40       	sbci	r26, 0x00	; 0
    1cfc:	e1 f7       	brne	.-8      	; 0x1cf6 <Initial+0x38>
    1cfe:	00 c0       	rjmp	.+0      	; 0x1d00 <Initial+0x42>
    1d00:	00 00       	nop

	//----------------------
	//static FILE mystdout = FDEV_SETUP_STREAM(N11_PrintChar, NULL, _FDEV_SETUP_WRITE);
  //stdout = &mystdout;
	
	N11_CLS();
    1d02:	0e 94 55 12 	call	0x24aa	; 0x24aa <N11_CLS>
	
	//----------------------
	Splash();
    1d06:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <Splash>
	BUZZER(OK_sign);
    1d0a:	81 e0       	ldi	r24, 0x01	; 1
    1d0c:	0e 94 09 0a 	call	0x1412	; 0x1412 <BUZZER>

	//------------
	sei();												//Interrupts enabel
    1d10:	78 94       	sei
	
	
}	//Initial
    1d12:	08 95       	ret

00001d14 <test01>:


//---------------------------------------------------------//
//---------------------------------------------------------//
void test01(void)
{
    1d14:	2f 92       	push	r2
    1d16:	3f 92       	push	r3
    1d18:	4f 92       	push	r4
    1d1a:	5f 92       	push	r5
    1d1c:	6f 92       	push	r6
    1d1e:	7f 92       	push	r7
    1d20:	8f 92       	push	r8
    1d22:	9f 92       	push	r9
    1d24:	af 92       	push	r10
    1d26:	bf 92       	push	r11
    1d28:	cf 92       	push	r12
    1d2a:	df 92       	push	r13
    1d2c:	ef 92       	push	r14
    1d2e:	ff 92       	push	r15
    1d30:	0f 93       	push	r16
    1d32:	1f 93       	push	r17
    1d34:	df 93       	push	r29
    1d36:	cf 93       	push	r28
    1d38:	cd b7       	in	r28, 0x3d	; 61
    1d3a:	de b7       	in	r29, 0x3e	; 62
    1d3c:	a2 97       	sbiw	r28, 0x22	; 34
    1d3e:	0f b6       	in	r0, 0x3f	; 63
    1d40:	f8 94       	cli
    1d42:	de bf       	out	0x3e, r29	; 62
    1d44:	0f be       	out	0x3f, r0	; 63
    1d46:	cd bf       	out	0x3d, r28	; 61

	unsigned int				FRQtemp;
	unsigned char				ACCtemp;
	unsigned char				DECtemp;

	SPWM_init();
    1d48:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <SPWM_init>
	
	ADC_CH_init(FRQ_ACH);
    1d4c:	a1 e6       	ldi	r26, 0x61	; 97
    1d4e:	b0 e0       	ldi	r27, 0x00	; 0
    1d50:	8c 91       	ld	r24, X
    1d52:	8e 7f       	andi	r24, 0xFE	; 254
    1d54:	8c 93       	st	X, r24
    1d56:	e2 e6       	ldi	r30, 0x62	; 98
    1d58:	f0 e0       	ldi	r31, 0x00	; 0
    1d5a:	80 81       	ld	r24, Z
    1d5c:	8e 7f       	andi	r24, 0xFE	; 254
    1d5e:	80 83       	st	Z, r24
	ADC_CH_init(ACC_ACH);
    1d60:	8c 91       	ld	r24, X
    1d62:	8d 7f       	andi	r24, 0xFD	; 253
    1d64:	8c 93       	st	X, r24
    1d66:	80 81       	ld	r24, Z
    1d68:	8d 7f       	andi	r24, 0xFD	; 253
    1d6a:	80 83       	st	Z, r24
	ADC_CH_init(DEC_ACH);
    1d6c:	8c 91       	ld	r24, X
    1d6e:	8b 7f       	andi	r24, 0xFB	; 251
    1d70:	8c 93       	st	X, r24
    1d72:	80 81       	ld	r24, Z
    1d74:	8b 7f       	andi	r24, 0xFB	; 251
    1d76:	80 83       	st	Z, r24
//---------------------------------------------------------//
void test01(void)
{
	unsigned char				LVflag 	= 0;
	unsigned int				TCRtemp = 0;
	unsigned char				i 			= 0;
    1d78:	19 a2       	std	Y+33, r1	; 0x21
//---------------------------------------------------------//
//---------------------------------------------------------//
void test01(void)
{
	unsigned char				LVflag 	= 0;
	unsigned int				TCRtemp = 0;
    1d7a:	cc 24       	eor	r12, r12
    1d7c:	dd 24       	eor	r13, r13

//---------------------------------------------------------//
//---------------------------------------------------------//
void test01(void)
{
	unsigned char				LVflag 	= 0;
    1d7e:	ee 24       	eor	r14, r14
   break; 
  case STOP_gc:
   temp_key_code=STOP_CODE;
   break;
  case DIR_gc:
   temp_key_code=DIR_CODE;
    1d80:	99 24       	eor	r9, r9
    1d82:	68 94       	set
    1d84:	91 f8       	bld	r9, 1
  {
  case RUN_gc:
   temp_key_code=RUN_CODE;
   break; 
  case STOP_gc:
   temp_key_code=STOP_CODE;
    1d86:	ff 24       	eor	r15, r15
    1d88:	f3 94       	inc	r15
   }   
   else old_key_code=key_code;
   break;   
  }
  char str2[16];
   itoa(mode, str2, 10);
    1d8a:	8e 01       	movw	r16, r28
    1d8c:	0f 5f       	subi	r16, 0xFF	; 255
    1d8e:	1f 4f       	sbci	r17, 0xFF	; 255
			//itoa();
  Lcd4_Init();
  Lcd4_Set_Cursor(1,1);
  sprintf(str2, "mode:%03d ", mode);
    1d90:	0f 2e       	mov	r0, r31
    1d92:	ff e7       	ldi	r31, 0x7F	; 127
    1d94:	af 2e       	mov	r10, r31
    1d96:	f1 e0       	ldi	r31, 0x01	; 1
    1d98:	bf 2e       	mov	r11, r31
    1d9a:	f0 2d       	mov	r31, r0
			
			Lcd4_Set_Cursor(1,5);
			Lcd4_Write_String(str) ;   
			*/
			
			sprintf(Ctemp, "FRQ:%03d.%01dHz ", (FRQtemp/10), (FRQtemp%10));
    1d9c:	0f 2e       	mov	r0, r31
    1d9e:	fc e2       	ldi	r31, 0x2C	; 44
    1da0:	4f 2e       	mov	r4, r31
    1da2:	f3 e0       	ldi	r31, 0x03	; 3
    1da4:	5f 2e       	mov	r5, r31
    1da6:	f0 2d       	mov	r31, r0
	
	//----- main loop!
	while(1)  
	{
		unsigned char temp8;	
  temp8=KEY_PIN&((1<<DIR_KEY_bp)|(1<<STOP_KEY_bp)|(1<<RUN_KEY_bp));
    1da8:	81 b1       	in	r24, 0x01	; 1
    1daa:	80 77       	andi	r24, 0x70	; 112
  switch(temp8)
    1dac:	80 35       	cpi	r24, 0x50	; 80
    1dae:	41 f0       	breq	.+16     	; 0x1dc0 <test01+0xac>
    1db0:	80 36       	cpi	r24, 0x60	; 96
    1db2:	19 f0       	breq	.+6      	; 0x1dba <test01+0xa6>
    1db4:	80 33       	cpi	r24, 0x30	; 48
    1db6:	51 f4       	brne	.+20     	; 0x1dcc <test01+0xb8>
    1db8:	06 c0       	rjmp	.+12     	; 0x1dc6 <test01+0xb2>
  {
  case RUN_gc:
   temp_key_code=RUN_CODE;
    1dba:	10 92 14 02 	sts	0x0214, r1
   break; 
    1dbe:	09 c0       	rjmp	.+18     	; 0x1dd2 <test01+0xbe>
  case STOP_gc:
   temp_key_code=STOP_CODE;
    1dc0:	f0 92 14 02 	sts	0x0214, r15
   break;
    1dc4:	06 c0       	rjmp	.+12     	; 0x1dd2 <test01+0xbe>
  case DIR_gc:
   temp_key_code=DIR_CODE;
    1dc6:	90 92 14 02 	sts	0x0214, r9
   break;
    1dca:	03 c0       	rjmp	.+6      	; 0x1dd2 <test01+0xbe>
  default:
   temp_key_code=NO_KEY_CODE;  
    1dcc:	83 e0       	ldi	r24, 0x03	; 3
    1dce:	80 93 14 02 	sts	0x0214, r24
  }
  
  key_code=temp_key_code;
    1dd2:	80 91 14 02 	lds	r24, 0x0214
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	90 93 48 03 	sts	0x0348, r25
    1ddc:	80 93 47 03 	sts	0x0347, r24
  switch(mode)
    1de0:	20 91 18 03 	lds	r18, 0x0318
    1de4:	21 30       	cpi	r18, 0x01	; 1
    1de6:	09 f4       	brne	.+2      	; 0x1dea <test01+0xd6>
    1de8:	55 c0       	rjmp	.+170    	; 0x1e94 <test01+0x180>
    1dea:	21 30       	cpi	r18, 0x01	; 1
    1dec:	20 f0       	brcs	.+8      	; 0x1df6 <test01+0xe2>
    1dee:	22 30       	cpi	r18, 0x02	; 2
    1df0:	09 f0       	breq	.+2      	; 0x1df4 <test01+0xe0>
    1df2:	bc c0       	rjmp	.+376    	; 0x1f6c <test01+0x258>
    1df4:	a0 c0       	rjmp	.+320    	; 0x1f36 <test01+0x222>
  {
  
//----------------------------------------------------------------
  
  case STOP_MODE:   // 0
   if((FAULT_PIN&(1<<FAULT_bp))==0)
    1df6:	85 99       	sbic	0x10, 5	; 16
    1df8:	09 c0       	rjmp	.+18     	; 0x1e0c <test01+0xf8>
   {
    old_key_code=key_code;
    1dfa:	90 93 45 03 	sts	0x0345, r25
    1dfe:	80 93 44 03 	sts	0x0344, r24
    mode=FAULT_MODE; // IR2130 fault condition
    1e02:	90 92 18 03 	sts	0x0318, r9
	RUN_LED_OFF;
    1e06:	92 9a       	sbi	0x12, 2	; 18
	DISABLE_MOTOR;
    1e08:	90 98       	cbi	0x12, 0	; 18
	
    break;
    1e0a:	b0 c0       	rjmp	.+352    	; 0x1f6c <test01+0x258>
   }
   if((key_code==RUN_CODE)&&(key_code!=old_key_code))
    1e0c:	00 97       	sbiw	r24, 0x00	; 0
    1e0e:	c9 f4       	brne	.+50     	; 0x1e42 <test01+0x12e>
    1e10:	20 91 44 03 	lds	r18, 0x0344
    1e14:	30 91 45 03 	lds	r19, 0x0345
    1e18:	21 15       	cp	r18, r1
    1e1a:	31 05       	cpc	r19, r1
    1e1c:	91 f0       	breq	.+36     	; 0x1e42 <test01+0x12e>
   {
    old_key_code=key_code;
    1e1e:	10 92 45 03 	sts	0x0345, r1
    1e22:	10 92 44 03 	sts	0x0344, r1
    mode=RUN_MODE;
    1e26:	f0 92 18 03 	sts	0x0318, r15
    RUN_LED_ON;
    1e2a:	92 98       	cbi	0x12, 2	; 18
    ENABLE_MOTOR; 
    1e2c:	90 9a       	sbi	0x12, 0	; 18
	 if(flags.dir_f)
    1e2e:	80 91 46 03 	lds	r24, 0x0346
    1e32:	80 ff       	sbrs	r24, 0
    1e34:	03 c0       	rjmp	.+6      	; 0x1e3c <test01+0x128>
    {     
     DIR_LED1_ON;
    1e36:	93 98       	cbi	0x12, 3	; 18
     DIR_LED2_OFF;     
    1e38:	94 9a       	sbi	0x12, 4	; 18
    1e3a:	98 c0       	rjmp	.+304    	; 0x1f6c <test01+0x258>
    }
    else
    {     
     DIR_LED1_OFF;
    1e3c:	93 9a       	sbi	0x12, 3	; 18
     DIR_LED2_ON;
    1e3e:	94 98       	cbi	0x12, 4	; 18
    1e40:	95 c0       	rjmp	.+298    	; 0x1f6c <test01+0x258>
    }      
   }
   else if((key_code==DIR_CODE)&&(key_code!=old_key_code))
    1e42:	82 30       	cpi	r24, 0x02	; 2
    1e44:	91 05       	cpc	r25, r1
    1e46:	09 f5       	brne	.+66     	; 0x1e8a <test01+0x176>
    1e48:	20 91 44 03 	lds	r18, 0x0344
    1e4c:	30 91 45 03 	lds	r19, 0x0345
    1e50:	22 30       	cpi	r18, 0x02	; 2
    1e52:	31 05       	cpc	r19, r1
    1e54:	d1 f0       	breq	.+52     	; 0x1e8a <test01+0x176>
   {
    old_key_code=key_code;
    1e56:	a2 e0       	ldi	r26, 0x02	; 2
    1e58:	b0 e0       	ldi	r27, 0x00	; 0
    1e5a:	b0 93 45 03 	sts	0x0345, r27
    1e5e:	a0 93 44 03 	sts	0x0344, r26
    if(flags.dir_f)
    1e62:	80 91 46 03 	lds	r24, 0x0346
    1e66:	80 ff       	sbrs	r24, 0
    1e68:	03 c0       	rjmp	.+6      	; 0x1e70 <test01+0x15c>
    {     
     DIR_LED1_ON;
    1e6a:	93 98       	cbi	0x12, 3	; 18
     DIR_LED2_OFF;     
    1e6c:	94 9a       	sbi	0x12, 4	; 18
    1e6e:	02 c0       	rjmp	.+4      	; 0x1e74 <test01+0x160>
    }
    else
    {     
     DIR_LED1_OFF;
    1e70:	93 9a       	sbi	0x12, 3	; 18
     DIR_LED2_ON;
    1e72:	94 98       	cbi	0x12, 4	; 18
    }
    flags.dir_f^=1;
    1e74:	90 91 46 03 	lds	r25, 0x0346
    1e78:	91 70       	andi	r25, 0x01	; 1
    1e7a:	9f 25       	eor	r25, r15
    1e7c:	80 91 46 03 	lds	r24, 0x0346
    1e80:	8e 7f       	andi	r24, 0xFE	; 254
    1e82:	89 2b       	or	r24, r25
    1e84:	80 93 46 03 	sts	0x0346, r24
    1e88:	71 c0       	rjmp	.+226    	; 0x1f6c <test01+0x258>
   }
   else old_key_code=key_code;   
    1e8a:	90 93 45 03 	sts	0x0345, r25
    1e8e:	80 93 44 03 	sts	0x0344, r24
    1e92:	6c c0       	rjmp	.+216    	; 0x1f6c <test01+0x258>
   break;
  
//----------------------------------------------------------------
  
  case RUN_MODE:    //1
   if((FAULT_PIN&(1<<FAULT_bp))==0)
    1e94:	85 99       	sbic	0x10, 5	; 16
    1e96:	17 c0       	rjmp	.+46     	; 0x1ec6 <test01+0x1b2>
   {
	   
    DISABLE_MOTOR;
    1e98:	90 98       	cbi	0x12, 0	; 18
	RUN_LED_OFF;
    1e9a:	92 9a       	sbi	0x12, 2	; 18
    flags.deceleration_f=0;
    1e9c:	80 91 46 03 	lds	r24, 0x0346
    1ea0:	8d 7f       	andi	r24, 0xFD	; 253
    1ea2:	80 93 46 03 	sts	0x0346, r24
    flags.dir_change_f=0;
    1ea6:	80 91 46 03 	lds	r24, 0x0346
    1eaa:	8b 7f       	andi	r24, 0xFB	; 251
    1eac:	80 93 46 03 	sts	0x0346, r24
    old_key_code=key_code;
    1eb0:	80 91 47 03 	lds	r24, 0x0347
    1eb4:	90 91 48 03 	lds	r25, 0x0348
    1eb8:	90 93 45 03 	sts	0x0345, r25
    1ebc:	80 93 44 03 	sts	0x0344, r24
    mode=FAULT_MODE; // Fault condition
    1ec0:	90 92 18 03 	sts	0x0318, r9
    break;
    1ec4:	53 c0       	rjmp	.+166    	; 0x1f6c <test01+0x258>
   }
   if((key_code==STOP_CODE)&&(key_code!=old_key_code))
    1ec6:	81 30       	cpi	r24, 0x01	; 1
    1ec8:	91 05       	cpc	r25, r1
    1eca:	99 f4       	brne	.+38     	; 0x1ef2 <test01+0x1de>
    1ecc:	20 91 44 03 	lds	r18, 0x0344
    1ed0:	30 91 45 03 	lds	r19, 0x0345
    1ed4:	21 30       	cpi	r18, 0x01	; 1
    1ed6:	31 05       	cpc	r19, r1
    1ed8:	61 f0       	breq	.+24     	; 0x1ef2 <test01+0x1de>
   {
    old_key_code=key_code;    
    1eda:	81 e0       	ldi	r24, 0x01	; 1
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	90 93 45 03 	sts	0x0345, r25
    1ee2:	80 93 44 03 	sts	0x0344, r24
    flags.deceleration_f=1;    
    1ee6:	80 91 46 03 	lds	r24, 0x0346
    1eea:	82 60       	ori	r24, 0x02	; 2
    1eec:	80 93 46 03 	sts	0x0346, r24
    1ef0:	3d c0       	rjmp	.+122    	; 0x1f6c <test01+0x258>
   }
   else if((key_code==DIR_CODE)&&(key_code!=old_key_code))
    1ef2:	82 30       	cpi	r24, 0x02	; 2
    1ef4:	91 05       	cpc	r25, r1
    1ef6:	d1 f4       	brne	.+52     	; 0x1f2c <test01+0x218>
    1ef8:	20 91 44 03 	lds	r18, 0x0344
    1efc:	30 91 45 03 	lds	r19, 0x0345
    1f00:	22 30       	cpi	r18, 0x02	; 2
    1f02:	31 05       	cpc	r19, r1
    1f04:	99 f0       	breq	.+38     	; 0x1f2c <test01+0x218>
   {
    old_key_code=key_code;
    1f06:	a2 e0       	ldi	r26, 0x02	; 2
    1f08:	b0 e0       	ldi	r27, 0x00	; 0
    1f0a:	b0 93 45 03 	sts	0x0345, r27
    1f0e:	a0 93 44 03 	sts	0x0344, r26
    cli()   ; 
    1f12:	f8 94       	cli
    flags.deceleration_f=1;
    1f14:	80 91 46 03 	lds	r24, 0x0346
    1f18:	82 60       	ori	r24, 0x02	; 2
    1f1a:	80 93 46 03 	sts	0x0346, r24
    flags.dir_change_f=1;
    1f1e:	80 91 46 03 	lds	r24, 0x0346
    1f22:	84 60       	ori	r24, 0x04	; 4
    1f24:	80 93 46 03 	sts	0x0346, r24
    sei() ;  
    1f28:	78 94       	sei
    1f2a:	20 c0       	rjmp	.+64     	; 0x1f6c <test01+0x258>
   }
   else old_key_code=key_code;
    1f2c:	90 93 45 03 	sts	0x0345, r25
    1f30:	80 93 44 03 	sts	0x0344, r24
    1f34:	1b c0       	rjmp	.+54     	; 0x1f6c <test01+0x258>
//----------------------------------------------------------------
  
  case FAULT_MODE:  //   2
  
  
   if((FAULT_PIN&(1<<FAULT_bp))&&(key_code==STOP_CODE)&&(key_code!=old_key_code))    
    1f36:	85 9b       	sbis	0x10, 5	; 16
    1f38:	15 c0       	rjmp	.+42     	; 0x1f64 <test01+0x250>
    1f3a:	81 30       	cpi	r24, 0x01	; 1
    1f3c:	91 05       	cpc	r25, r1
    1f3e:	91 f4       	brne	.+36     	; 0x1f64 <test01+0x250>
    1f40:	20 91 44 03 	lds	r18, 0x0344
    1f44:	30 91 45 03 	lds	r19, 0x0345
    1f48:	21 30       	cpi	r18, 0x01	; 1
    1f4a:	31 05       	cpc	r19, r1
    1f4c:	59 f0       	breq	.+22     	; 0x1f64 <test01+0x250>
   {
     old_key_code=key_code;
    1f4e:	81 e0       	ldi	r24, 0x01	; 1
    1f50:	90 e0       	ldi	r25, 0x00	; 0
    1f52:	90 93 45 03 	sts	0x0345, r25
    1f56:	80 93 44 03 	sts	0x0344, r24
     mode=STOP_MODE;
    1f5a:	10 92 18 03 	sts	0x0318, r1
     RUN_LED_OFF;DISABLE_MOTOR;
    1f5e:	92 9a       	sbi	0x12, 2	; 18
    1f60:	90 98       	cbi	0x12, 0	; 18
    1f62:	04 c0       	rjmp	.+8      	; 0x1f6c <test01+0x258>
   }   
   else old_key_code=key_code;
    1f64:	90 93 45 03 	sts	0x0345, r25
    1f68:	80 93 44 03 	sts	0x0344, r24
   break;   
  }
  char str2[16];
   itoa(mode, str2, 10);
    1f6c:	80 91 18 03 	lds	r24, 0x0318
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	b8 01       	movw	r22, r16
    1f74:	4a e0       	ldi	r20, 0x0A	; 10
    1f76:	50 e0       	ldi	r21, 0x00	; 0
    1f78:	0e 94 04 19 	call	0x3208	; 0x3208 <itoa>
			//itoa();
  Lcd4_Init();
    1f7c:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <Lcd4_Init>
  Lcd4_Set_Cursor(1,1);
    1f80:	8f 2d       	mov	r24, r15
    1f82:	6f 2d       	mov	r22, r15
    1f84:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <Lcd4_Set_Cursor>
  sprintf(str2, "mode:%03d ", mode);
    1f88:	80 91 18 03 	lds	r24, 0x0318
    1f8c:	00 d0       	rcall	.+0      	; 0x1f8e <test01+0x27a>
    1f8e:	00 d0       	rcall	.+0      	; 0x1f90 <test01+0x27c>
    1f90:	00 d0       	rcall	.+0      	; 0x1f92 <test01+0x27e>
    1f92:	ed b7       	in	r30, 0x3d	; 61
    1f94:	fe b7       	in	r31, 0x3e	; 62
    1f96:	31 96       	adiw	r30, 0x01	; 1
    1f98:	ad b7       	in	r26, 0x3d	; 61
    1f9a:	be b7       	in	r27, 0x3e	; 62
    1f9c:	12 96       	adiw	r26, 0x02	; 2
    1f9e:	1c 93       	st	X, r17
    1fa0:	0e 93       	st	-X, r16
    1fa2:	11 97       	sbiw	r26, 0x01	; 1
    1fa4:	b3 82       	std	Z+3, r11	; 0x03
    1fa6:	a2 82       	std	Z+2, r10	; 0x02
    1fa8:	84 83       	std	Z+4, r24	; 0x04
    1faa:	15 82       	std	Z+5, r1	; 0x05
    1fac:	0e 94 25 19 	call	0x324a	; 0x324a <sprintf>
  Lcd4_Write_String(str2) ;
    1fb0:	8d b7       	in	r24, 0x3d	; 61
    1fb2:	9e b7       	in	r25, 0x3e	; 62
    1fb4:	06 96       	adiw	r24, 0x06	; 6
    1fb6:	0f b6       	in	r0, 0x3f	; 63
    1fb8:	f8 94       	cli
    1fba:	9e bf       	out	0x3e, r25	; 62
    1fbc:	0f be       	out	0x3f, r0	; 63
    1fbe:	8d bf       	out	0x3d, r24	; 61
    1fc0:	c8 01       	movw	r24, r16
    1fc2:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <Lcd4_Write_String>
    1fc6:	a3 ec       	ldi	r26, 0xC3	; 195
    1fc8:	b9 e0       	ldi	r27, 0x09	; 9
    1fca:	11 97       	sbiw	r26, 0x01	; 1
    1fcc:	f1 f7       	brne	.-4      	; 0x1fca <test01+0x2b6>
    1fce:	00 c0       	rjmp	.+0      	; 0x1fd0 <test01+0x2bc>
    1fd0:	00 00       	nop
  _delay_ms(10);
  	
		if((TCounter>=TCRtemp) &&  mode!=FAULT_MODE && mode!=STOP_MODE)//&& !bit_is_set(PORTD, 1))									//100mS //loop until fault is coming from portd.1 
    1fd2:	80 91 21 03 	lds	r24, 0x0321
    1fd6:	90 91 22 03 	lds	r25, 0x0322
    1fda:	8c 15       	cp	r24, r12
    1fdc:	9d 05       	cpc	r25, r13
    1fde:	08 f4       	brcc	.+2      	; 0x1fe2 <test01+0x2ce>
    1fe0:	c6 c0       	rjmp	.+396    	; 0x216e <test01+0x45a>
    1fe2:	80 91 18 03 	lds	r24, 0x0318
    1fe6:	82 30       	cpi	r24, 0x02	; 2
    1fe8:	09 f4       	brne	.+2      	; 0x1fec <test01+0x2d8>
    1fea:	c1 c0       	rjmp	.+386    	; 0x216e <test01+0x45a>
    1fec:	80 91 18 03 	lds	r24, 0x0318
    1ff0:	88 23       	and	r24, r24
    1ff2:	09 f4       	brne	.+2      	; 0x1ff6 <test01+0x2e2>
    1ff4:	bc c0       	rjmp	.+376    	; 0x216e <test01+0x45a>
		{
			TCRtemp = TCounter +100;						//1mS x100
    1ff6:	80 91 21 03 	lds	r24, 0x0321
    1ffa:	90 91 22 03 	lds	r25, 0x0322
    1ffe:	0f 2e       	mov	r0, r31
    2000:	f4 e6       	ldi	r31, 0x64	; 100
    2002:	cf 2e       	mov	r12, r31
    2004:	dd 24       	eor	r13, r13
    2006:	f0 2d       	mov	r31, r0
    2008:	c8 0e       	add	r12, r24
    200a:	d9 1e       	adc	r13, r25
			
			FRQtemp = a2dConvert10bit(FRQ_ACH);
    200c:	80 e0       	ldi	r24, 0x00	; 0
    200e:	0e 94 cd 07 	call	0xf9a	; 0xf9a <a2dConvert10bit>
    2012:	1c 01       	movw	r2, r24
			ACCtemp = a2dConvert8bit(ACC_ACH);
    2014:	8f 2d       	mov	r24, r15
    2016:	0e 94 df 07 	call	0xfbe	; 0xfbe <a2dConvert8bit>
    201a:	88 2e       	mov	r8, r24
			DECtemp = a2dConvert8bit(DEC_ACH);
    201c:	89 2d       	mov	r24, r9
    201e:	0e 94 df 07 	call	0xfbe	; 0xfbe <a2dConvert8bit>
    2022:	78 2e       	mov	r7, r24
			
			//-------------------------------
			FRQtemp = SetFrequency(FRQtemp);
    2024:	c1 01       	movw	r24, r2
    2026:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <SetFrequency>
    202a:	1c 01       	movw	r2, r24
			ACCtemp = SetAcceleration(ACCtemp);
    202c:	88 2d       	mov	r24, r8
    202e:	0e 94 d3 15 	call	0x2ba6	; 0x2ba6 <SetAcceleration>
    2032:	88 2e       	mov	r8, r24
			DECtemp = SetDeceleration(DECtemp);
    2034:	87 2d       	mov	r24, r7
    2036:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <SetDeceleration>
    203a:	8a a3       	std	Y+34, r24	; 0x22
			//-------------------------------
			
			float a;
			char str[16];

			a = (FRQtemp/10); // or some other calculation
    203c:	c1 01       	movw	r24, r2
    203e:	6a e0       	ldi	r22, 0x0A	; 10
    2040:	70 e0       	ldi	r23, 0x00	; 0
    2042:	0e 94 97 18 	call	0x312e	; 0x312e <__udivmodhi4>
    2046:	3b 01       	movw	r6, r22
    2048:	1c 01       	movw	r2, r24
    204a:	80 e0       	ldi	r24, 0x00	; 0
    204c:	90 e0       	ldi	r25, 0x00	; 0
    204e:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <__floatunsisf>
			itoa(a, str, 10);
    2052:	0e 94 21 16 	call	0x2c42	; 0x2c42 <__fixsfsi>
    2056:	dc 01       	movw	r26, r24
    2058:	cb 01       	movw	r24, r22
    205a:	be 01       	movw	r22, r28
    205c:	6f 5e       	subi	r22, 0xEF	; 239
    205e:	7f 4f       	sbci	r23, 0xFF	; 255
    2060:	4a e0       	ldi	r20, 0x0A	; 10
    2062:	50 e0       	ldi	r21, 0x00	; 0
    2064:	0e 94 04 19 	call	0x3208	; 0x3208 <itoa>
			//itoa();
			Lcd4_Init();
    2068:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <Lcd4_Init>
			
			Lcd4_Set_Cursor(1,5);
			Lcd4_Write_String(str) ;   
			*/
			
			sprintf(Ctemp, "FRQ:%03d.%01dHz ", (FRQtemp/10), (FRQtemp%10));
    206c:	8d b7       	in	r24, 0x3d	; 61
    206e:	9e b7       	in	r25, 0x3e	; 62
    2070:	08 97       	sbiw	r24, 0x08	; 8
    2072:	0f b6       	in	r0, 0x3f	; 63
    2074:	f8 94       	cli
    2076:	9e bf       	out	0x3e, r25	; 62
    2078:	0f be       	out	0x3f, r0	; 63
    207a:	8d bf       	out	0x3d, r24	; 61
    207c:	ed b7       	in	r30, 0x3d	; 61
    207e:	fe b7       	in	r31, 0x3e	; 62
    2080:	31 96       	adiw	r30, 0x01	; 1
    2082:	ad b7       	in	r26, 0x3d	; 61
    2084:	be b7       	in	r27, 0x3e	; 62
    2086:	12 96       	adiw	r26, 0x02	; 2
    2088:	5c 92       	st	X, r5
    208a:	4e 92       	st	-X, r4
    208c:	11 97       	sbiw	r26, 0x01	; 1
    208e:	8a e8       	ldi	r24, 0x8A	; 138
    2090:	91 e0       	ldi	r25, 0x01	; 1
    2092:	93 83       	std	Z+3, r25	; 0x03
    2094:	82 83       	std	Z+2, r24	; 0x02
    2096:	75 82       	std	Z+5, r7	; 0x05
    2098:	64 82       	std	Z+4, r6	; 0x04
    209a:	37 82       	std	Z+7, r3	; 0x07
    209c:	26 82       	std	Z+6, r2	; 0x06
    209e:	0e 94 25 19 	call	0x324a	; 0x324a <sprintf>
			Lcd4_Set_Cursor(1,1);
    20a2:	ad b7       	in	r26, 0x3d	; 61
    20a4:	be b7       	in	r27, 0x3e	; 62
    20a6:	18 96       	adiw	r26, 0x08	; 8
    20a8:	0f b6       	in	r0, 0x3f	; 63
    20aa:	f8 94       	cli
    20ac:	be bf       	out	0x3e, r27	; 62
    20ae:	0f be       	out	0x3f, r0	; 63
    20b0:	ad bf       	out	0x3d, r26	; 61
    20b2:	8f 2d       	mov	r24, r15
    20b4:	6f 2d       	mov	r22, r15
    20b6:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <Lcd4_Set_Cursor>
			Lcd4_Write_String(Ctemp) ;
    20ba:	c2 01       	movw	r24, r4
    20bc:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <Lcd4_Write_String>
			
			//StringAt(1, 2, Ctemp);
			
			sprintf(Ctemp,"%03dS ", ACCtemp);
    20c0:	00 d0       	rcall	.+0      	; 0x20c2 <test01+0x3ae>
    20c2:	00 d0       	rcall	.+0      	; 0x20c4 <test01+0x3b0>
    20c4:	00 d0       	rcall	.+0      	; 0x20c6 <test01+0x3b2>
    20c6:	ed b7       	in	r30, 0x3d	; 61
    20c8:	fe b7       	in	r31, 0x3e	; 62
    20ca:	31 96       	adiw	r30, 0x01	; 1
    20cc:	ad b7       	in	r26, 0x3d	; 61
    20ce:	be b7       	in	r27, 0x3e	; 62
    20d0:	12 96       	adiw	r26, 0x02	; 2
    20d2:	5c 92       	st	X, r5
    20d4:	4e 92       	st	-X, r4
    20d6:	11 97       	sbiw	r26, 0x01	; 1
    20d8:	8b e9       	ldi	r24, 0x9B	; 155
    20da:	91 e0       	ldi	r25, 0x01	; 1
    20dc:	93 83       	std	Z+3, r25	; 0x03
    20de:	82 83       	std	Z+2, r24	; 0x02
    20e0:	84 82       	std	Z+4, r8	; 0x04
    20e2:	15 82       	std	Z+5, r1	; 0x05
    20e4:	0e 94 25 19 	call	0x324a	; 0x324a <sprintf>
			Lcd4_Set_Cursor(1,13);
    20e8:	ad b7       	in	r26, 0x3d	; 61
    20ea:	be b7       	in	r27, 0x3e	; 62
    20ec:	16 96       	adiw	r26, 0x06	; 6
    20ee:	0f b6       	in	r0, 0x3f	; 63
    20f0:	f8 94       	cli
    20f2:	be bf       	out	0x3e, r27	; 62
    20f4:	0f be       	out	0x3f, r0	; 63
    20f6:	ad bf       	out	0x3d, r26	; 61
    20f8:	8f 2d       	mov	r24, r15
    20fa:	6d e0       	ldi	r22, 0x0D	; 13
    20fc:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <Lcd4_Set_Cursor>
			Lcd4_Write_String("ACC:");
    2100:	82 ea       	ldi	r24, 0xA2	; 162
    2102:	91 e0       	ldi	r25, 0x01	; 1
    2104:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <Lcd4_Write_String>
			Lcd4_Set_Cursor(2,1);
    2108:	89 2d       	mov	r24, r9
    210a:	6f 2d       	mov	r22, r15
    210c:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <Lcd4_Set_Cursor>
			Lcd4_Write_String(Ctemp) ;
    2110:	c2 01       	movw	r24, r4
    2112:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <Lcd4_Write_String>
			
			//StringAt(3, 2, Ctemp);
	
			sprintf(Ctemp, "DEC:%03dS ", DECtemp);
    2116:	00 d0       	rcall	.+0      	; 0x2118 <test01+0x404>
    2118:	00 d0       	rcall	.+0      	; 0x211a <test01+0x406>
    211a:	00 d0       	rcall	.+0      	; 0x211c <test01+0x408>
    211c:	ed b7       	in	r30, 0x3d	; 61
    211e:	fe b7       	in	r31, 0x3e	; 62
    2120:	31 96       	adiw	r30, 0x01	; 1
    2122:	ad b7       	in	r26, 0x3d	; 61
    2124:	be b7       	in	r27, 0x3e	; 62
    2126:	12 96       	adiw	r26, 0x02	; 2
    2128:	5c 92       	st	X, r5
    212a:	4e 92       	st	-X, r4
    212c:	11 97       	sbiw	r26, 0x01	; 1
    212e:	87 ea       	ldi	r24, 0xA7	; 167
    2130:	91 e0       	ldi	r25, 0x01	; 1
    2132:	93 83       	std	Z+3, r25	; 0x03
    2134:	82 83       	std	Z+2, r24	; 0x02
    2136:	9a a1       	ldd	r25, Y+34	; 0x22
    2138:	94 83       	std	Z+4, r25	; 0x04
    213a:	15 82       	std	Z+5, r1	; 0x05
    213c:	0e 94 25 19 	call	0x324a	; 0x324a <sprintf>
			Lcd4_Set_Cursor(2,6);
    2140:	ad b7       	in	r26, 0x3d	; 61
    2142:	be b7       	in	r27, 0x3e	; 62
    2144:	16 96       	adiw	r26, 0x06	; 6
    2146:	0f b6       	in	r0, 0x3f	; 63
    2148:	f8 94       	cli
    214a:	be bf       	out	0x3e, r27	; 62
    214c:	0f be       	out	0x3f, r0	; 63
    214e:	ad bf       	out	0x3d, r26	; 61
    2150:	89 2d       	mov	r24, r9
    2152:	66 e0       	ldi	r22, 0x06	; 6
    2154:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <Lcd4_Set_Cursor>
			Lcd4_Write_String(Ctemp) ;
    2158:	c2 01       	movw	r24, r4
    215a:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <Lcd4_Write_String>
			//StringAt(5, 2, Ctemp);
			
			i++;
    215e:	b9 a1       	ldd	r27, Y+33	; 0x21
    2160:	bf 5f       	subi	r27, 0xFF	; 255
    2162:	b9 a3       	std	Y+33, r27	; 0x21
			if(i==5)					{						LVflag = 1;		}
    2164:	b5 30       	cpi	r27, 0x05	; 5
    2166:	b9 f1       	breq	.+110    	; 0x21d6 <test01+0x4c2>
			else if(i==10)		{	i = 0;		LVflag = 0;	}
    2168:	ba 30       	cpi	r27, 0x0A	; 10
    216a:	91 f5       	brne	.+100    	; 0x21d0 <test01+0x4bc>
    216c:	38 c0       	rjmp	.+112    	; 0x21de <test01+0x4ca>
		}
		else if( mode==FAULT_MODE)
    216e:	80 91 18 03 	lds	r24, 0x0318
    2172:	82 30       	cpi	r24, 0x02	; 2
    2174:	a9 f4       	brne	.+42     	; 0x21a0 <test01+0x48c>
		{
		 Lcd4_Set_Cursor(1,1);
    2176:	8f 2d       	mov	r24, r15
    2178:	6f 2d       	mov	r22, r15
    217a:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <Lcd4_Set_Cursor>
		Lcd4_Write_String("Fault accrued !!") ;	
    217e:	82 eb       	ldi	r24, 0xB2	; 178
    2180:	91 e0       	ldi	r25, 0x01	; 1
    2182:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <Lcd4_Write_String>
		FRQtemp = SetFrequency(0);
    2186:	80 e0       	ldi	r24, 0x00	; 0
    2188:	90 e0       	ldi	r25, 0x00	; 0
    218a:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <SetFrequency>
			ACCtemp = SetAcceleration(1);
    218e:	8f 2d       	mov	r24, r15
    2190:	0e 94 d3 15 	call	0x2ba6	; 0x2ba6 <SetAcceleration>
			DECtemp = SetDeceleration(1);
    2194:	8f 2d       	mov	r24, r15
    2196:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <SetDeceleration>
			RUN_LED_OFF;DISABLE_MOTOR;
    219a:	92 9a       	sbi	0x12, 2	; 18
    219c:	90 98       	cbi	0x12, 0	; 18
    219e:	18 c0       	rjmp	.+48     	; 0x21d0 <test01+0x4bc>
		}
		else if( mode==STOP_MODE)
    21a0:	80 91 18 03 	lds	r24, 0x0318
    21a4:	88 23       	and	r24, r24
    21a6:	a1 f4       	brne	.+40     	; 0x21d0 <test01+0x4bc>
		{
		 Lcd4_Set_Cursor(1,1);
    21a8:	8f 2d       	mov	r24, r15
    21aa:	6f 2d       	mov	r22, r15
    21ac:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <Lcd4_Set_Cursor>
		Lcd4_Write_String("STOP_MODE accrued !!") ;	
    21b0:	83 ec       	ldi	r24, 0xC3	; 195
    21b2:	91 e0       	ldi	r25, 0x01	; 1
    21b4:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <Lcd4_Write_String>
		FRQtemp = SetFrequency(0);
    21b8:	80 e0       	ldi	r24, 0x00	; 0
    21ba:	90 e0       	ldi	r25, 0x00	; 0
    21bc:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <SetFrequency>
			ACCtemp = SetAcceleration(1);
    21c0:	8f 2d       	mov	r24, r15
    21c2:	0e 94 d3 15 	call	0x2ba6	; 0x2ba6 <SetAcceleration>
			DECtemp = SetDeceleration(1);
    21c6:	8f 2d       	mov	r24, r15
    21c8:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <SetDeceleration>
			RUN_LED_OFF;DISABLE_MOTOR;
    21cc:	92 9a       	sbi	0x12, 2	; 18
    21ce:	90 98       	cbi	0x12, 0	; 18
		}
		
		GLED(LVflag);
    21d0:	ee 20       	and	r14, r14
    21d2:	31 f0       	breq	.+12     	; 0x21e0 <test01+0x4cc>
    21d4:	01 c0       	rjmp	.+2      	; 0x21d8 <test01+0x4c4>
			Lcd4_Set_Cursor(2,6);
			Lcd4_Write_String(Ctemp) ;
			//StringAt(5, 2, Ctemp);
			
			i++;
			if(i==5)					{						LVflag = 1;		}
    21d6:	ef 2c       	mov	r14, r15
			ACCtemp = SetAcceleration(1);
			DECtemp = SetDeceleration(1);
			RUN_LED_OFF;DISABLE_MOTOR;
		}
		
		GLED(LVflag);
    21d8:	ad 9a       	sbi	0x15, 5	; 21
    21da:	85 b3       	in	r24, 0x15	; 21
    21dc:	e5 cd       	rjmp	.-1078   	; 0x1da8 <test01+0x94>
			Lcd4_Write_String(Ctemp) ;
			//StringAt(5, 2, Ctemp);
			
			i++;
			if(i==5)					{						LVflag = 1;		}
			else if(i==10)		{	i = 0;		LVflag = 0;	}
    21de:	19 a2       	std	Y+33, r1	; 0x21
			ACCtemp = SetAcceleration(1);
			DECtemp = SetDeceleration(1);
			RUN_LED_OFF;DISABLE_MOTOR;
		}
		
		GLED(LVflag);
    21e0:	ad 98       	cbi	0x15, 5	; 21
    21e2:	85 b3       	in	r24, 0x15	; 21
    21e4:	ee 24       	eor	r14, r14
    21e6:	e0 cd       	rjmp	.-1088   	; 0x1da8 <test01+0x94>

000021e8 <LCD_0>:
dim LCD_D7_Direction as sbit at DDc7_bit

*/

//DDRD = 0xFF;
DDRC = 0xFF;
    21e8:	8f ef       	ldi	r24, 0xFF	; 255
    21ea:	84 bb       	out	0x14, r24	; 20
int i;
Lcd4_Init();
    21ec:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <Lcd4_Init>
Lcd4_Set_Cursor(1,1);
    21f0:	81 e0       	ldi	r24, 0x01	; 1
    21f2:	61 e0       	ldi	r22, 0x01	; 1
    21f4:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <Lcd4_Set_Cursor>
Lcd4_Write_String("Elasa.ir Test");  
    21f8:	88 ed       	ldi	r24, 0xD8	; 216
    21fa:	91 e0       	ldi	r25, 0x01	; 1
    21fc:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <Lcd4_Write_String>
	
}	
    2200:	08 95       	ret

00002202 <main>:
//	<<< main function >>>
//*****************************************************************************
void main(void)
{
	
	DDRE = (1<<PE4);     // put PortB bit 5 as input
    2202:	80 e1       	ldi	r24, 0x10	; 16
    2204:	82 b9       	out	0x02, r24	; 2
	PORTE = 1<<PE4;		// Enable PE4 pull-up resistor
    2206:	83 b9       	out	0x03, r24	; 3
    EIMSK = (1<<INT4)| (1<<INT5)| (1<<INT6); // Enable INT0 External Interrupt
    2208:	80 e7       	ldi	r24, 0x70	; 112
    220a:	89 bf       	out	0x39, r24	; 57

	flags.dir_f=0;
    220c:	80 91 46 03 	lds	r24, 0x0346
    2210:	8e 7f       	andi	r24, 0xFE	; 254
    2212:	80 93 46 03 	sts	0x0346, r24
	ENABLE_DDR|=1<<ENABLE_bp; // Turn on as output port
    2216:	88 9a       	sbi	0x11, 0	; 17
    DISABLE_MOTOR;
    2218:	90 98       	cbi	0x12, 0	; 18
 FAULT_PORT|=1<<FAULT_bp; // Turn on fault input pullup
    221a:	95 9a       	sbi	0x12, 5	; 18
 RUN_LED_DDR|=1<<RUN_LED_bp;
    221c:	8a 9a       	sbi	0x11, 2	; 17
 RUN_LED_OFF;
    221e:	92 9a       	sbi	0x12, 2	; 18
 DIR_LED1_DDR|=1<<DIR_LED1_bp;
    2220:	8b 9a       	sbi	0x11, 3	; 17
 DIR_LED2_DDR|=1<<DIR_LED2_bp;
    2222:	8c 9a       	sbi	0x11, 4	; 17
 DIR_LED1_ON;
    2224:	93 98       	cbi	0x12, 3	; 18
 DIR_LED2_OFF;
    2226:	94 9a       	sbi	0x12, 4	; 18
 KEY_PORT|=(1<<RUN_KEY_bp)|(1<<STOP_KEY_bp)|(1<<DIR_KEY_bp); // Turn on pullups 
    2228:	83 b1       	in	r24, 0x03	; 3
    222a:	80 67       	ori	r24, 0x70	; 112
    222c:	83 b9       	out	0x03, r24	; 3
 
 flags.deceleration_f=flags.dir_change_f=0;flags.dir_f=1;
    222e:	80 91 46 03 	lds	r24, 0x0346
    2232:	8b 7f       	andi	r24, 0xFB	; 251
    2234:	80 93 46 03 	sts	0x0346, r24
    2238:	80 91 46 03 	lds	r24, 0x0346
    223c:	86 95       	lsr	r24
    223e:	82 70       	andi	r24, 0x02	; 2
    2240:	90 91 46 03 	lds	r25, 0x0346
    2244:	9d 7f       	andi	r25, 0xFD	; 253
    2246:	89 2b       	or	r24, r25
    2248:	80 93 46 03 	sts	0x0346, r24
    224c:	80 91 46 03 	lds	r24, 0x0346
    2250:	81 60       	ori	r24, 0x01	; 1
    2252:	80 93 46 03 	sts	0x0346, r24
 
 cli(); 
    2256:	f8 94       	cli
 sei();
    2258:	78 94       	sei
	LCD_0();
    225a:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <LCD_0>
	Initial();
    225e:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <Initial>
	//init_devices();
	Eeprom_Initial(0x11);
    2262:	81 e1       	ldi	r24, 0x11	; 17
    2264:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <Eeprom_Initial>
  Lcd4_Set_Cursor(1,1);
  Lcd4_Write_String(str) ;
  _delay_ms(100);
  */
  
  test01();
    2268:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <test01>
    226c:	fd cf       	rjmp	.-6      	; 0x2268 <main+0x66>

0000226e <__vector_5>:
	
}	


//SIGNAL(SIG_INTERRUPT4) {
	ISR(INT4_vect){
    226e:	1f 92       	push	r1
    2270:	0f 92       	push	r0
    2272:	0f b6       	in	r0, 0x3f	; 63
    2274:	0f 92       	push	r0
    2276:	0b b6       	in	r0, 0x3b	; 59
    2278:	0f 92       	push	r0
    227a:	11 24       	eor	r1, r1
    227c:	2f 93       	push	r18
    227e:	3f 93       	push	r19
    2280:	4f 93       	push	r20
    2282:	5f 93       	push	r21
    2284:	6f 93       	push	r22
    2286:	7f 93       	push	r23
    2288:	8f 93       	push	r24
    228a:	9f 93       	push	r25
    228c:	af 93       	push	r26
    228e:	bf 93       	push	r27
    2290:	ef 93       	push	r30
    2292:	ff 93       	push	r31

// SIG_INTERRUPT1 -> INT1 (PD3)

// While Button is pressed, LED is on

Lcd4_Init();
    2294:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <Lcd4_Init>
Lcd4_Set_Cursor(1,1);
    2298:	81 e0       	ldi	r24, 0x01	; 1
    229a:	61 e0       	ldi	r22, 0x01	; 1
    229c:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <Lcd4_Set_Cursor>
Lcd4_Write_String("RUN_MODE");  
    22a0:	86 ee       	ldi	r24, 0xE6	; 230
    22a2:	91 e0       	ldi	r25, 0x01	; 1
    22a4:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <Lcd4_Write_String>
    22a8:	8f e4       	ldi	r24, 0x4F	; 79
    22aa:	93 ec       	ldi	r25, 0xC3	; 195
    22ac:	01 97       	sbiw	r24, 0x01	; 1
    22ae:	f1 f7       	brne	.-4      	; 0x22ac <__vector_5+0x3e>
    22b0:	00 c0       	rjmp	.+0      	; 0x22b2 <__vector_5+0x44>
    22b2:	00 00       	nop
_delay_ms(200);

mode=RUN_MODE;
    22b4:	81 e0       	ldi	r24, 0x01	; 1
    22b6:	80 93 18 03 	sts	0x0318, r24
PORTB &= ~(1<<PB0);     // Put PortB bit 5 LOW

_delay_ms(10);
*/

}
    22ba:	ff 91       	pop	r31
    22bc:	ef 91       	pop	r30
    22be:	bf 91       	pop	r27
    22c0:	af 91       	pop	r26
    22c2:	9f 91       	pop	r25
    22c4:	8f 91       	pop	r24
    22c6:	7f 91       	pop	r23
    22c8:	6f 91       	pop	r22
    22ca:	5f 91       	pop	r21
    22cc:	4f 91       	pop	r20
    22ce:	3f 91       	pop	r19
    22d0:	2f 91       	pop	r18
    22d2:	0f 90       	pop	r0
    22d4:	0b be       	out	0x3b, r0	; 59
    22d6:	0f 90       	pop	r0
    22d8:	0f be       	out	0x3f, r0	; 63
    22da:	0f 90       	pop	r0
    22dc:	1f 90       	pop	r1
    22de:	18 95       	reti

000022e0 <__vector_6>:

SIGNAL(SIG_INTERRUPT5) {
    22e0:	1f 92       	push	r1
    22e2:	0f 92       	push	r0
    22e4:	0f b6       	in	r0, 0x3f	; 63
    22e6:	0f 92       	push	r0
    22e8:	0b b6       	in	r0, 0x3b	; 59
    22ea:	0f 92       	push	r0
    22ec:	11 24       	eor	r1, r1
    22ee:	2f 93       	push	r18
    22f0:	3f 93       	push	r19
    22f2:	4f 93       	push	r20
    22f4:	5f 93       	push	r21
    22f6:	6f 93       	push	r22
    22f8:	7f 93       	push	r23
    22fa:	8f 93       	push	r24
    22fc:	9f 93       	push	r25
    22fe:	af 93       	push	r26
    2300:	bf 93       	push	r27
    2302:	ef 93       	push	r30
    2304:	ff 93       	push	r31

// SIG_INTERRUPT1 -> INT1 (PD3)

// While Button is pressed, LED is on

Lcd4_Init();
    2306:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <Lcd4_Init>
Lcd4_Set_Cursor(1,1);
    230a:	81 e0       	ldi	r24, 0x01	; 1
    230c:	61 e0       	ldi	r22, 0x01	; 1
    230e:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <Lcd4_Set_Cursor>
Lcd4_Write_String("Stop on");  
    2312:	8f ee       	ldi	r24, 0xEF	; 239
    2314:	91 e0       	ldi	r25, 0x01	; 1
    2316:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <Lcd4_Write_String>
    231a:	8f e4       	ldi	r24, 0x4F	; 79
    231c:	93 ec       	ldi	r25, 0xC3	; 195
    231e:	01 97       	sbiw	r24, 0x01	; 1
    2320:	f1 f7       	brne	.-4      	; 0x231e <__vector_6+0x3e>
    2322:	00 c0       	rjmp	.+0      	; 0x2324 <__vector_6+0x44>
    2324:	00 00       	nop
_delay_ms(200);
mode=STOP_MODE;
    2326:	10 92 18 03 	sts	0x0318, r1
RUN_LED_OFF;
    232a:	92 9a       	sbi	0x12, 2	; 18
DISABLE_MOTOR;
    232c:	90 98       	cbi	0x12, 0	; 18
//RUN_LED_OFF;

}
    232e:	ff 91       	pop	r31
    2330:	ef 91       	pop	r30
    2332:	bf 91       	pop	r27
    2334:	af 91       	pop	r26
    2336:	9f 91       	pop	r25
    2338:	8f 91       	pop	r24
    233a:	7f 91       	pop	r23
    233c:	6f 91       	pop	r22
    233e:	5f 91       	pop	r21
    2340:	4f 91       	pop	r20
    2342:	3f 91       	pop	r19
    2344:	2f 91       	pop	r18
    2346:	0f 90       	pop	r0
    2348:	0b be       	out	0x3b, r0	; 59
    234a:	0f 90       	pop	r0
    234c:	0f be       	out	0x3f, r0	; 63
    234e:	0f 90       	pop	r0
    2350:	1f 90       	pop	r1
    2352:	18 95       	reti

00002354 <__vector_7>:

SIGNAL(SIG_INTERRUPT6) {
    2354:	1f 92       	push	r1
    2356:	0f 92       	push	r0
    2358:	0f b6       	in	r0, 0x3f	; 63
    235a:	0f 92       	push	r0
    235c:	0b b6       	in	r0, 0x3b	; 59
    235e:	0f 92       	push	r0
    2360:	11 24       	eor	r1, r1
    2362:	2f 93       	push	r18
    2364:	3f 93       	push	r19
    2366:	4f 93       	push	r20
    2368:	5f 93       	push	r21
    236a:	6f 93       	push	r22
    236c:	7f 93       	push	r23
    236e:	8f 93       	push	r24
    2370:	9f 93       	push	r25
    2372:	af 93       	push	r26
    2374:	bf 93       	push	r27
    2376:	ef 93       	push	r30
    2378:	ff 93       	push	r31
// SIG_INTERRUPT0 -> INT0 (PD2)

// SIG_INTERRUPT1 -> INT1 (PD3)

// While Button is pressed, LED is on
key_code=DIR_CODE;
    237a:	82 e0       	ldi	r24, 0x02	; 2
    237c:	90 e0       	ldi	r25, 0x00	; 0
    237e:	90 93 48 03 	sts	0x0348, r25
    2382:	80 93 47 03 	sts	0x0347, r24
Lcd4_Init();
    2386:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <Lcd4_Init>
Lcd4_Set_Cursor(1,1);
    238a:	81 e0       	ldi	r24, 0x01	; 1
    238c:	61 e0       	ldi	r22, 0x01	; 1
    238e:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <Lcd4_Set_Cursor>
Lcd4_Write_String("DIR_CODE");  
    2392:	87 ef       	ldi	r24, 0xF7	; 247
    2394:	91 e0       	ldi	r25, 0x01	; 1
    2396:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <Lcd4_Write_String>
    239a:	8f e4       	ldi	r24, 0x4F	; 79
    239c:	93 ec       	ldi	r25, 0xC3	; 195
    239e:	01 97       	sbiw	r24, 0x01	; 1
    23a0:	f1 f7       	brne	.-4      	; 0x239e <__vector_7+0x4a>
    23a2:	00 c0       	rjmp	.+0      	; 0x23a4 <__vector_7+0x50>
    23a4:	00 00       	nop
      DIR_LED2_ON;
_delay_ms(200);
DIR_LED1_ON;
      DIR_LED2_OFF;
*/	  
flags.dir_change_f=1;
    23a6:	80 91 46 03 	lds	r24, 0x0346
    23aa:	84 60       	ori	r24, 0x04	; 4
    23ac:	80 93 46 03 	sts	0x0346, r24
if(flags.dir_f)
    23b0:	80 91 46 03 	lds	r24, 0x0346
    23b4:	80 ff       	sbrs	r24, 0
    23b6:	11 c0       	rjmp	.+34     	; 0x23da <__vector_7+0x86>
    {     
		Lcd4_Set_Cursor(1,1);
    23b8:	81 e0       	ldi	r24, 0x01	; 1
    23ba:	61 e0       	ldi	r22, 0x01	; 1
    23bc:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <Lcd4_Set_Cursor>
Lcd4_Write_String("DIR_1    ");_delay_ms(200);
    23c0:	80 e0       	ldi	r24, 0x00	; 0
    23c2:	92 e0       	ldi	r25, 0x02	; 2
    23c4:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <Lcd4_Write_String>
    23c8:	8f e4       	ldi	r24, 0x4F	; 79
    23ca:	93 ec       	ldi	r25, 0xC3	; 195
    23cc:	01 97       	sbiw	r24, 0x01	; 1
    23ce:	f1 f7       	brne	.-4      	; 0x23cc <__vector_7+0x78>
    23d0:	00 c0       	rjmp	.+0      	; 0x23d2 <__vector_7+0x7e>
    23d2:	00 00       	nop
     DIR_LED1_ON;
    23d4:	93 98       	cbi	0x12, 3	; 18
     DIR_LED2_OFF;     
    23d6:	94 9a       	sbi	0x12, 4	; 18
    23d8:	10 c0       	rjmp	.+32     	; 0x23fa <__vector_7+0xa6>
    }
    else
    {     
		Lcd4_Set_Cursor(1,1);
    23da:	81 e0       	ldi	r24, 0x01	; 1
    23dc:	61 e0       	ldi	r22, 0x01	; 1
    23de:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <Lcd4_Set_Cursor>
Lcd4_Write_String("DIR_0    ");_delay_ms(200);
    23e2:	8a e0       	ldi	r24, 0x0A	; 10
    23e4:	92 e0       	ldi	r25, 0x02	; 2
    23e6:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <Lcd4_Write_String>
    23ea:	8f e4       	ldi	r24, 0x4F	; 79
    23ec:	93 ec       	ldi	r25, 0xC3	; 195
    23ee:	01 97       	sbiw	r24, 0x01	; 1
    23f0:	f1 f7       	brne	.-4      	; 0x23ee <__vector_7+0x9a>
    23f2:	00 c0       	rjmp	.+0      	; 0x23f4 <__vector_7+0xa0>
    23f4:	00 00       	nop
     DIR_LED1_OFF;
    23f6:	93 9a       	sbi	0x12, 3	; 18
     DIR_LED2_ON;
    23f8:	94 98       	cbi	0x12, 4	; 18
    }
    23fa:	ff 91       	pop	r31
    23fc:	ef 91       	pop	r30
    23fe:	bf 91       	pop	r27
    2400:	af 91       	pop	r26
    2402:	9f 91       	pop	r25
    2404:	8f 91       	pop	r24
    2406:	7f 91       	pop	r23
    2408:	6f 91       	pop	r22
    240a:	5f 91       	pop	r21
    240c:	4f 91       	pop	r20
    240e:	3f 91       	pop	r19
    2410:	2f 91       	pop	r18
    2412:	0f 90       	pop	r0
    2414:	0b be       	out	0x3b, r0	; 59
    2416:	0f 90       	pop	r0
    2418:	0f be       	out	0x3f, r0	; 63
    241a:	0f 90       	pop	r0
    241c:	1f 90       	pop	r1
    241e:	18 95       	reti

00002420 <N11_Write>:

//*************************************************
//******************* Functions *******************
//*************************************************
void N11_Write(N11_RS DC, unsigned char c)		//write command or data to LCD
{
    2420:	df 93       	push	r29
    2422:	cf 93       	push	r28
    2424:	0f 92       	push	r0
    2426:	cd b7       	in	r28, 0x3d	; 61
    2428:	de b7       	in	r29, 0x3e	; 62
    242a:	69 83       	std	Y+1, r22	; 0x01
	int i;

	N11_CS(LOW);
    242c:	ab 98       	cbi	0x15, 3	; 21
	
	N11_SCL(LOW);
    242e:	a8 98       	cbi	0x15, 0	; 21
		N11_SDA(DC);
    2430:	88 23       	and	r24, r24
    2432:	19 f0       	breq	.+6      	; 0x243a <N11_Write+0x1a>
    2434:	a9 9a       	sbi	0x15, 1	; 21
    2436:	85 b3       	in	r24, 0x15	; 21
    2438:	02 c0       	rjmp	.+4      	; 0x243e <N11_Write+0x1e>
    243a:	a9 98       	cbi	0x15, 1	; 21
    243c:	85 b3       	in	r24, 0x15	; 21
	N11_SCL(HIGH);
    243e:	a8 9a       	sbi	0x15, 0	; 21

	for(i=7; i>=0; i--)
    2440:	87 e0       	ldi	r24, 0x07	; 7
    2442:	90 e0       	ldi	r25, 0x00	; 0
	{
		N11_SCL(LOW);
			N11_SDA(bit_is_set(c, i));
    2444:	fe 01       	movw	r30, r28
    2446:	31 96       	adiw	r30, 0x01	; 1
		N11_SDA(DC);
	N11_SCL(HIGH);

	for(i=7; i>=0; i--)
	{
		N11_SCL(LOW);
    2448:	a8 98       	cbi	0x15, 0	; 21
			N11_SDA(bit_is_set(c, i));
    244a:	20 81       	ld	r18, Z
    244c:	30 e0       	ldi	r19, 0x00	; 0
    244e:	08 2e       	mov	r0, r24
    2450:	02 c0       	rjmp	.+4      	; 0x2456 <N11_Write+0x36>
    2452:	35 95       	asr	r19
    2454:	27 95       	ror	r18
    2456:	0a 94       	dec	r0
    2458:	e2 f7       	brpl	.-8      	; 0x2452 <N11_Write+0x32>
    245a:	20 ff       	sbrs	r18, 0
    245c:	03 c0       	rjmp	.+6      	; 0x2464 <N11_Write+0x44>
    245e:	a9 9a       	sbi	0x15, 1	; 21
    2460:	25 b3       	in	r18, 0x15	; 21
    2462:	02 c0       	rjmp	.+4      	; 0x2468 <N11_Write+0x48>
    2464:	a9 98       	cbi	0x15, 1	; 21
    2466:	25 b3       	in	r18, 0x15	; 21
		N11_SCL(HIGH);
    2468:	a8 9a       	sbi	0x15, 0	; 21
	
	N11_SCL(LOW);
		N11_SDA(DC);
	N11_SCL(HIGH);

	for(i=7; i>=0; i--)
    246a:	01 97       	sbiw	r24, 0x01	; 1
    246c:	2f ef       	ldi	r18, 0xFF	; 255
    246e:	8f 3f       	cpi	r24, 0xFF	; 255
    2470:	92 07       	cpc	r25, r18
    2472:	51 f7       	brne	.-44     	; 0x2448 <N11_Write+0x28>
		N11_SCL(LOW);
			N11_SDA(bit_is_set(c, i));
		N11_SCL(HIGH);
	}

	N11_CS(HIGH);
    2474:	ab 9a       	sbi	0x15, 3	; 21
}	//*N11_Write
    2476:	0f 90       	pop	r0
    2478:	cf 91       	pop	r28
    247a:	df 91       	pop	r29
    247c:	08 95       	ret

0000247e <N11_GotoXR>:

void N11_GotoXR(unsigned char x, unsigned char r)		//goto X(0..95) and R(0..8)
{
    247e:	1f 93       	push	r17
    2480:	18 2f       	mov	r17, r24
	N11_Write(cmd, (0xB0| (r&0x0F)));        		//Y axis initialisation: 0100 rrrr           
    2482:	6f 70       	andi	r22, 0x0F	; 15
    2484:	60 6b       	ori	r22, 0xB0	; 176
    2486:	80 e0       	ldi	r24, 0x00	; 0
    2488:	0e 94 10 12 	call	0x2420	; 0x2420 <N11_Write>
	N11_Write(cmd, (0x00| (x&0x0F)));        		//X axis initialisation: 0000 xxxx  (x3 x2 x1 x0)
    248c:	61 2f       	mov	r22, r17
    248e:	6f 70       	andi	r22, 0x0F	; 15
    2490:	80 e0       	ldi	r24, 0x00	; 0
    2492:	0e 94 10 12 	call	0x2420	; 0x2420 <N11_Write>
	N11_Write(cmd, (0x10|((x>>4)&0x07)));     	//X axis initialisation: 0010 0xxx  (x6 x5 x4)
    2496:	61 2f       	mov	r22, r17
    2498:	62 95       	swap	r22
    249a:	6f 70       	andi	r22, 0x0F	; 15
    249c:	67 70       	andi	r22, 0x07	; 7
    249e:	60 61       	ori	r22, 0x10	; 16
    24a0:	80 e0       	ldi	r24, 0x00	; 0
    24a2:	0e 94 10 12 	call	0x2420	; 0x2420 <N11_Write>
}	//*N11_GotoXR
    24a6:	1f 91       	pop	r17
    24a8:	08 95       	ret

000024aa <N11_CLS>:
	N11_Write(cmd,0xA6);     			//normal display (non inverted)
		_delay_ms(500);
}	//*N11_Init

void N11_CLS(void)														//clear LCD
{
    24aa:	ff 92       	push	r15
    24ac:	0f 93       	push	r16
    24ae:	1f 93       	push	r17
	unsigned char 			x, r;
	
	N11_GotoXR(0, 0);
    24b0:	80 e0       	ldi	r24, 0x00	; 0
    24b2:	60 e0       	ldi	r22, 0x00	; 0
    24b4:	0e 94 3f 12 	call	0x247e	; 0x247e <N11_GotoXR>
	N11_Write(cmd, 0xAE); 					// disable display;
    24b8:	80 e0       	ldi	r24, 0x00	; 0
    24ba:	6e ea       	ldi	r22, 0xAE	; 174
    24bc:	0e 94 10 12 	call	0x2420	; 0x2420 <N11_Write>
	
	//fill LCD and the video buffer with zero!
	for(r=0; r<N11_Rr; r++)
    24c0:	00 e0       	ldi	r16, 0x00	; 0
	N11_Write(cmd,0xA6);     			//normal display (non inverted)
		_delay_ms(500);
}	//*N11_Init

void N11_CLS(void)														//clear LCD
{
    24c2:	0f 2e       	mov	r0, r31
    24c4:	f0 e6       	ldi	r31, 0x60	; 96
    24c6:	ff 2e       	mov	r15, r31
    24c8:	f0 2d       	mov	r31, r0
    24ca:	09 c0       	rjmp	.+18     	; 0x24de <N11_CLS+0x34>
		for(x=0; x<N11_Xr; x++)
		{
			#if LCDlight == 0
				N11_Cache[x][r]= 0x00;
			#endif
			N11_Write(data, 0x00);
    24cc:	81 e0       	ldi	r24, 0x01	; 1
    24ce:	60 e0       	ldi	r22, 0x00	; 0
    24d0:	0e 94 10 12 	call	0x2420	; 0x2420 <N11_Write>
    24d4:	11 50       	subi	r17, 0x01	; 1
	N11_Write(cmd, 0xAE); 					// disable display;
	
	//fill LCD and the video buffer with zero!
	for(r=0; r<N11_Rr; r++)
	{
		for(x=0; x<N11_Xr; x++)
    24d6:	d1 f7       	brne	.-12     	; 0x24cc <N11_CLS+0x22>
	
	N11_GotoXR(0, 0);
	N11_Write(cmd, 0xAE); 					// disable display;
	
	//fill LCD and the video buffer with zero!
	for(r=0; r<N11_Rr; r++)
    24d8:	0f 5f       	subi	r16, 0xFF	; 255
    24da:	09 30       	cpi	r16, 0x09	; 9
    24dc:	11 f0       	breq	.+4      	; 0x24e2 <N11_CLS+0x38>
	N11_Write(cmd,0xA6);     			//normal display (non inverted)
		_delay_ms(500);
}	//*N11_Init

void N11_CLS(void)														//clear LCD
{
    24de:	1f 2d       	mov	r17, r15
    24e0:	f5 cf       	rjmp	.-22     	; 0x24cc <N11_CLS+0x22>
			#endif
			N11_Write(data, 0x00);
		}
	}

	N11_Write(cmd, 0xAF); 					// enable display;
    24e2:	80 e0       	ldi	r24, 0x00	; 0
    24e4:	6f ea       	ldi	r22, 0xAF	; 175
    24e6:	0e 94 10 12 	call	0x2420	; 0x2420 <N11_Write>
}	//*N11_CLS
    24ea:	1f 91       	pop	r17
    24ec:	0f 91       	pop	r16
    24ee:	ff 90       	pop	r15
    24f0:	08 95       	ret

000024f2 <N11_Init>:
}	//*N11_GotoXR

//------------------------
void N11_Init(void)														//initial LCD
{
	N11_CS_init();
    24f2:	a3 9a       	sbi	0x14, 3	; 20
    24f4:	ab 9a       	sbi	0x15, 3	; 21
              
	N11_SDA_init();
    24f6:	a1 9a       	sbi	0x14, 1	; 20
    24f8:	a9 98       	cbi	0x15, 1	; 21
	N11_SCL_init();
    24fa:	a0 9a       	sbi	0x14, 0	; 20
    24fc:	a8 98       	cbi	0x15, 0	; 21
             
	N11_RST_init();
    24fe:	a2 9a       	sbi	0x14, 2	; 20
    2500:	aa 98       	cbi	0x15, 2	; 21
	N11_BKL_init();
		
	//----------------
	N11_CS(LOW);
    2502:	ab 98       	cbi	0x15, 3	; 21
    2504:	83 ed       	ldi	r24, 0xD3	; 211
    2506:	90 e3       	ldi	r25, 0x30	; 48
    2508:	01 97       	sbiw	r24, 0x01	; 1
    250a:	f1 f7       	brne	.-4      	; 0x2508 <N11_Init+0x16>
    250c:	00 c0       	rjmp	.+0      	; 0x250e <N11_Init+0x1c>
    250e:	00 00       	nop
		_delay_ms(50);							//min. 5ms

	N11_RST(HIGH);
    2510:	aa 9a       	sbi	0x15, 2	; 21
	
	N11_Write(cmd, 0x23);     		//write VOP register - contrast MSB value(00100ccc - 	  c7 c6 c5)
    2512:	80 e0       	ldi	r24, 0x00	; 0
    2514:	63 e2       	ldi	r22, 0x23	; 35
    2516:	0e 94 10 12 	call	0x2420	; 0x2420 <N11_Write>
	N11_Write(cmd, 0x90);					//write VOP register - contrast LSB value(1001cccc - c3 c2 c1 c0)
    251a:	80 e0       	ldi	r24, 0x00	; 0
    251c:	60 e9       	ldi	r22, 0x90	; 144
    251e:	0e 94 10 12 	call	0x2420	; 0x2420 <N11_Write>

	N11_Write(cmd, 0xA4);     		//all on/normal display
    2522:	80 e0       	ldi	r24, 0x00	; 0
    2524:	64 ea       	ldi	r22, 0xA4	; 164
    2526:	0e 94 10 12 	call	0x2420	; 0x2420 <N11_Write>
	N11_Write(cmd, 0x2F);     		//Power control set(charge pump on/off)
    252a:	80 e0       	ldi	r24, 0x00	; 0
    252c:	6f e2       	ldi	r22, 0x2F	; 47
    252e:	0e 94 10 12 	call	0x2420	; 0x2420 <N11_Write>
	N11_Write(cmd, 0x40);     		//set start row address = 0
    2532:	80 e0       	ldi	r24, 0x00	; 0
    2534:	60 e4       	ldi	r22, 0x40	; 64
    2536:	0e 94 10 12 	call	0x2420	; 0x2420 <N11_Write>
	N11_Write(cmd, 0xB0);     		//set R-address = 0
    253a:	80 e0       	ldi	r24, 0x00	; 0
    253c:	60 eb       	ldi	r22, 0xB0	; 176
    253e:	0e 94 10 12 	call	0x2420	; 0x2420 <N11_Write>
	N11_Write(cmd, 0x10);     		//set X-address, upper 3 bits
    2542:	80 e0       	ldi	r24, 0x00	; 0
    2544:	60 e1       	ldi	r22, 0x10	; 16
    2546:	0e 94 10 12 	call	0x2420	; 0x2420 <N11_Write>
	N11_Write(cmd, 0x00);      		//set X-address, lower 4 bits
    254a:	80 e0       	ldi	r24, 0x00	; 0
    254c:	60 e0       	ldi	r22, 0x00	; 0
    254e:	0e 94 10 12 	call	0x2420	; 0x2420 <N11_Write>
	//----
	#if MirrorY ==1
		N11_Write(cmd, 0xC8); 			//mirror Y axis (about X axis)
    2552:	80 e0       	ldi	r24, 0x00	; 0
    2554:	68 ec       	ldi	r22, 0xC8	; 200
    2556:	0e 94 10 12 	call	0x2420	; 0x2420 <N11_Write>
	#endif
	
	#if InvertScreen ==1
		N11_Write(cmd, 0xA1);				//invert screen in horizontal axis
    255a:	80 e0       	ldi	r24, 0x00	; 0
    255c:	61 ea       	ldi	r22, 0xA1	; 161
    255e:	0e 94 10 12 	call	0x2420	; 0x2420 <N11_Write>
	#endif
	//----
	N11_Write(cmd, 0xAC);     		//set initial row (R0) of the display
    2562:	80 e0       	ldi	r24, 0x00	; 0
    2564:	6c ea       	ldi	r22, 0xAC	; 172
    2566:	0e 94 10 12 	call	0x2420	; 0x2420 <N11_Write>
	N11_Write(cmd, 0x07);
    256a:	80 e0       	ldi	r24, 0x00	; 0
    256c:	67 e0       	ldi	r22, 0x07	; 7
    256e:	0e 94 10 12 	call	0x2420	; 0x2420 <N11_Write>

	N11_Write(cmd, 0xAF);    			//display ON/OFF
    2572:	80 e0       	ldi	r24, 0x00	; 0
    2574:	6f ea       	ldi	r22, 0xAF	; 175
    2576:	0e 94 10 12 	call	0x2420	; 0x2420 <N11_Write>

	N11_CLS();     	    					//clear LCD
    257a:	0e 94 55 12 	call	0x24aa	; 0x24aa <N11_CLS>
	N11_Write(cmd,0xA7);     			//invert display
    257e:	80 e0       	ldi	r24, 0x00	; 0
    2580:	67 ea       	ldi	r22, 0xA7	; 167
    2582:	0e 94 10 12 	call	0x2420	; 0x2420 <N11_Write>
    2586:	8f e9       	ldi	r24, 0x9F	; 159
    2588:	96 e8       	ldi	r25, 0x86	; 134
    258a:	a1 e0       	ldi	r26, 0x01	; 1
    258c:	81 50       	subi	r24, 0x01	; 1
    258e:	90 40       	sbci	r25, 0x00	; 0
    2590:	a0 40       	sbci	r26, 0x00	; 0
    2592:	e1 f7       	brne	.-8      	; 0x258c <N11_Init+0x9a>
    2594:	00 c0       	rjmp	.+0      	; 0x2596 <N11_Init+0xa4>
    2596:	00 00       	nop

		_delay_ms(500);
	N11_Write(cmd,0xA6);     			//normal display (non inverted)
    2598:	80 e0       	ldi	r24, 0x00	; 0
    259a:	66 ea       	ldi	r22, 0xA6	; 166
    259c:	0e 94 10 12 	call	0x2420	; 0x2420 <N11_Write>
    25a0:	8f e9       	ldi	r24, 0x9F	; 159
    25a2:	96 e8       	ldi	r25, 0x86	; 134
    25a4:	a1 e0       	ldi	r26, 0x01	; 1
    25a6:	81 50       	subi	r24, 0x01	; 1
    25a8:	90 40       	sbci	r25, 0x00	; 0
    25aa:	a0 40       	sbci	r26, 0x00	; 0
    25ac:	e1 f7       	brne	.-8      	; 0x25a6 <N11_Init+0xb4>
    25ae:	00 c0       	rjmp	.+0      	; 0x25b0 <N11_Init+0xbe>
    25b0:	00 00       	nop
		_delay_ms(500);
}	//*N11_Init
    25b2:	08 95       	ret

000025b4 <N11_Update>:
			for(x=0; x<N11_Xr; x++)
				N11_Write(data, N11_Cache[x][r]);
		
		//N11_Write(cmd, 0xAF); 					// enable display;
	#endif//LCDlight
}	//*N11_Update
    25b4:	08 95       	ret

000025b6 <N11_Contrast>:

//------------------------
void N11_Contrast(unsigned char cont)					//set LCD contrast value from 0x00 to 0x7F
{
    25b6:	1f 93       	push	r17
    25b8:	18 2f       	mov	r17, r24
	N11_Write(cmd, 0x21);					//LCD extended commands.
    25ba:	80 e0       	ldi	r24, 0x00	; 0
    25bc:	61 e2       	ldi	r22, 0x21	; 33
    25be:	0e 94 10 12 	call	0x2420	; 0x2420 <N11_Write>
	N11_Write(cmd, 0x80|cont);		//set LCD Vop (Contrast)
    25c2:	61 2f       	mov	r22, r17
    25c4:	60 68       	ori	r22, 0x80	; 128
    25c6:	80 e0       	ldi	r24, 0x00	; 0
    25c8:	0e 94 10 12 	call	0x2420	; 0x2420 <N11_Write>
	N11_Write(cmd, 0x20)	;				//LCD standard commands, horizontal addressing mode.
    25cc:	80 e0       	ldi	r24, 0x00	; 0
    25ce:	60 e2       	ldi	r22, 0x20	; 32
    25d0:	0e 94 10 12 	call	0x2420	; 0x2420 <N11_Write>
}	//*N11_Contrast
    25d4:	1f 91       	pop	r17
    25d6:	08 95       	ret

000025d8 <N11_Backlight>:
void N11_Backlight(unsigned char x)						//LCD backlight ON/OFF
{
	#ifdef N11_BKL_BIT
		N11_BKL(x);
	#endif//N11_BKL_BIT
}	//*N11_Backlight
    25d8:	08 95       	ret

000025da <N11_SetPixel>:
		else if(mode == PIXEL_XOR)		N11_Cache[x][r] ^=  pd;
	
		N11_GotoXR(x, r);
		N11_Write(data, N11_Cache[x][r]);
	#endif//LCDlight
}	//*N11_PutPixel
    25da:	08 95       	ret

000025dc <N11_ReadPixel>:
	#if LCDlight == 0
	 	if((x > GetMaxX()) || (y > GetMaxY()))			return(0x00);				//exit if coordinates are not legal
			
		return(bit_is_set(N11_Cache[x][y/8], (1 << (y%8))) ? 0x01 : 0x00);
	#endif//LCDlight
}	//*N11_ReadPixel
    25dc:	08 95       	ret

000025de <N11_FillRect>:
			for(x=x1; x<w; x++)
				N11_SetPixel(x, y, mode);
	
		N11_Write(cmd, 0xAF); 					// enable display;
	#endif//LCDlight
}	//*N11_FillRect
    25de:	08 95       	ret

000025e0 <N11_DrawBitmap>:
			}//for yy
		}//for xx
	
		N11_Update();
	#endif//LCDlight
} //*N11_DrawBitmap
    25e0:	08 95       	ret

000025e2 <N11_PrintChar>:
#include "ef5x7.h"


//******************* Functions *******************
void N11_PrintChar(char ch)
{	
    25e2:	0f 93       	push	r16
    25e4:	1f 93       	push	r17
    25e6:	cf 93       	push	r28
    25e8:	df 93       	push	r29
	unsigned char i;
	
	for(i=0; i<5; i++)
  	N11_Write(data,	pgm_read_byte(&ef5x7[ch-32][i])<<1);
    25ea:	05 e0       	ldi	r16, 0x05	; 5
    25ec:	80 9f       	mul	r24, r16
    25ee:	80 01       	movw	r16, r0
    25f0:	11 24       	eor	r1, r1
#include "sFONT.h"
#include "ef5x7.h"


//******************* Functions *******************
void N11_PrintChar(char ch)
    25f2:	e8 01       	movw	r28, r16
    25f4:	c3 56       	subi	r28, 0x63	; 99
    25f6:	de 4f       	sbci	r29, 0xFE	; 254
    25f8:	0e 55       	subi	r16, 0x5E	; 94
    25fa:	1e 4f       	sbci	r17, 0xFE	; 254
{	
	unsigned char i;
	
	for(i=0; i<5; i++)
  	N11_Write(data,	pgm_read_byte(&ef5x7[ch-32][i])<<1);
    25fc:	fe 01       	movw	r30, r28
    25fe:	64 91       	lpm	r22, Z+
    2600:	66 0f       	add	r22, r22
    2602:	81 e0       	ldi	r24, 0x01	; 1
    2604:	0e 94 10 12 	call	0x2420	; 0x2420 <N11_Write>
    2608:	21 96       	adiw	r28, 0x01	; 1
//******************* Functions *******************
void N11_PrintChar(char ch)
{	
	unsigned char i;
	
	for(i=0; i<5; i++)
    260a:	c0 17       	cp	r28, r16
    260c:	d1 07       	cpc	r29, r17
    260e:	b1 f7       	brne	.-20     	; 0x25fc <N11_PrintChar+0x1a>
  	N11_Write(data,	pgm_read_byte(&ef5x7[ch-32][i])<<1);
	
	N11_Write(data, 0x00);
    2610:	81 e0       	ldi	r24, 0x01	; 1
    2612:	60 e0       	ldi	r22, 0x00	; 0
    2614:	0e 94 10 12 	call	0x2420	; 0x2420 <N11_Write>
}	//N11_PrintChar
    2618:	df 91       	pop	r29
    261a:	cf 91       	pop	r28
    261c:	1f 91       	pop	r17
    261e:	0f 91       	pop	r16
    2620:	08 95       	ret

00002622 <N11_PrintString>:

void N11_PrintString(char *str)
{   
    2622:	cf 93       	push	r28
    2624:	df 93       	push	r29
    2626:	ec 01       	movw	r28, r24
	N11_Write(cmd, 0xAE); 				// disable display;
    2628:	80 e0       	ldi	r24, 0x00	; 0
    262a:	6e ea       	ldi	r22, 0xAE	; 174
    262c:	0e 94 10 12 	call	0x2420	; 0x2420 <N11_Write>
	
	while(*str)										//look for end of string
    2630:	88 81       	ld	r24, Y
    2632:	88 23       	and	r24, r24
    2634:	31 f0       	breq	.+12     	; 0x2642 <N11_PrintString+0x20>
  	N11_Write(data,	pgm_read_byte(&ef5x7[ch-32][i])<<1);
	
	N11_Write(data, 0x00);
}	//N11_PrintChar

void N11_PrintString(char *str)
    2636:	21 96       	adiw	r28, 0x01	; 1
{   
	N11_Write(cmd, 0xAE); 				// disable display;
	
	while(*str)										//look for end of string
  	N11_PrintChar(*str++);
    2638:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <N11_PrintChar>

void N11_PrintString(char *str)
{   
	N11_Write(cmd, 0xAE); 				// disable display;
	
	while(*str)										//look for end of string
    263c:	89 91       	ld	r24, Y+
    263e:	88 23       	and	r24, r24
    2640:	d9 f7       	brne	.-10     	; 0x2638 <N11_PrintString+0x16>
  	N11_PrintChar(*str++);

	N11_Write(cmd, 0xAF); 				//enable display;
    2642:	80 e0       	ldi	r24, 0x00	; 0
    2644:	6f ea       	ldi	r22, 0xAF	; 175
    2646:	0e 94 10 12 	call	0x2420	; 0x2420 <N11_Write>
}	//N11_PrintString
    264a:	df 91       	pop	r29
    264c:	cf 91       	pop	r28
    264e:	08 95       	ret

00002650 <A_calc>:
unsigned char A_calc(unsigned char sine, unsigned char Ain)
{
	unsigned int 						sine_temp;
	unsigned char 					sine1;
 
	sine1 = (sine<128)? ~sine : sine;
    2650:	88 23       	and	r24, r24
    2652:	c4 f0       	brlt	.+48     	; 0x2684 <A_calc+0x34>
    2654:	80 95       	com	r24
 
	sine_temp   = ((unsigned int)sine1) <<1;
    2656:	28 2f       	mov	r18, r24
    2658:	30 e0       	ldi	r19, 0x00	; 0
    265a:	22 0f       	add	r18, r18
    265c:	33 1f       	adc	r19, r19
	sine_temp  -= 255;
    265e:	2f 5f       	subi	r18, 0xFF	; 255
    2660:	30 40       	sbci	r19, 0x00	; 0
	sine_temp  *= Ain;
    2662:	70 e0       	ldi	r23, 0x00	; 0
    2664:	26 9f       	mul	r18, r22
    2666:	c0 01       	movw	r24, r0
    2668:	27 9f       	mul	r18, r23
    266a:	90 0d       	add	r25, r0
    266c:	36 9f       	mul	r19, r22
    266e:	90 0d       	add	r25, r0
    2670:	11 24       	eor	r1, r1
	sine_temp >>= 8;
    2672:	89 2f       	mov	r24, r25
    2674:	99 27       	eor	r25, r25
	sine_temp  += 255;
    2676:	81 50       	subi	r24, 0x01	; 1
    2678:	9f 4f       	sbci	r25, 0xFF	; 255
	sine_temp >>= 1;
    267a:	96 95       	lsr	r25
    267c:	87 95       	ror	r24
	sine_temp  += 1;
 
	sine1 = (unsigned char)sine_temp;
    267e:	8f 5f       	subi	r24, 0xFF	; 255
 
	return((sine<128)? ~sine1 : sine1);
    2680:	80 95       	com	r24
}	//A_calc
    2682:	08 95       	ret
	unsigned int 						sine_temp;
	unsigned char 					sine1;
 
	sine1 = (sine<128)? ~sine : sine;
 
	sine_temp   = ((unsigned int)sine1) <<1;
    2684:	28 2f       	mov	r18, r24
    2686:	30 e0       	ldi	r19, 0x00	; 0
    2688:	22 0f       	add	r18, r18
    268a:	33 1f       	adc	r19, r19
	sine_temp  -= 255;
    268c:	2f 5f       	subi	r18, 0xFF	; 255
    268e:	30 40       	sbci	r19, 0x00	; 0
	sine_temp  *= Ain;
    2690:	70 e0       	ldi	r23, 0x00	; 0
    2692:	26 9f       	mul	r18, r22
    2694:	c0 01       	movw	r24, r0
    2696:	27 9f       	mul	r18, r23
    2698:	90 0d       	add	r25, r0
    269a:	36 9f       	mul	r19, r22
    269c:	90 0d       	add	r25, r0
    269e:	11 24       	eor	r1, r1
	sine_temp >>= 8;
    26a0:	89 2f       	mov	r24, r25
    26a2:	99 27       	eor	r25, r25
	sine_temp  += 255;
    26a4:	81 50       	subi	r24, 0x01	; 1
    26a6:	9f 4f       	sbci	r25, 0xFF	; 255
	sine_temp >>= 1;
    26a8:	96 95       	lsr	r25
    26aa:	87 95       	ror	r24
	sine_temp  += 1;
 
	sine1 = (unsigned char)sine_temp;
    26ac:	8f 5f       	subi	r24, 0xFF	; 255
    26ae:	08 95       	ret

000026b0 <__vector_26>:
	return((sine<128)? ~sine1 : sine1);
}	//A_calc

//-----------------------------------------------------------------------------
ISR_PWM_SET()
{
    26b0:	1f 92       	push	r1
    26b2:	0f 92       	push	r0
    26b4:	0f b6       	in	r0, 0x3f	; 63
    26b6:	0f 92       	push	r0
    26b8:	0b b6       	in	r0, 0x3b	; 59
    26ba:	0f 92       	push	r0
    26bc:	11 24       	eor	r1, r1
    26be:	ef 92       	push	r14
    26c0:	ff 92       	push	r15
    26c2:	0f 93       	push	r16
    26c4:	1f 93       	push	r17
    26c6:	2f 93       	push	r18
    26c8:	3f 93       	push	r19
    26ca:	4f 93       	push	r20
    26cc:	5f 93       	push	r21
    26ce:	6f 93       	push	r22
    26d0:	7f 93       	push	r23
    26d2:	8f 93       	push	r24
    26d4:	9f 93       	push	r25
    26d6:	af 93       	push	r26
    26d8:	bf 93       	push	r27
    26da:	ef 93       	push	r30
    26dc:	ff 93       	push	r31
	unsigned long 				A;

	if 			(speed>795)				index += 16;
    26de:	80 91 1d 03 	lds	r24, 0x031D
    26e2:	90 91 1e 03 	lds	r25, 0x031E
    26e6:	23 e0       	ldi	r18, 0x03	; 3
    26e8:	8c 31       	cpi	r24, 0x1C	; 28
    26ea:	92 07       	cpc	r25, r18
    26ec:	30 f0       	brcs	.+12     	; 0x26fa <__vector_26+0x4a>
    26ee:	80 91 1f 03 	lds	r24, 0x031F
    26f2:	80 5f       	subi	r24, 0xF0	; 240
    26f4:	80 93 1f 03 	sts	0x031F, r24
    26f8:	2e c0       	rjmp	.+92     	; 0x2756 <__vector_26+0xa6>
	else if	(speed>595)				index += 8;
    26fa:	80 91 1d 03 	lds	r24, 0x031D
    26fe:	90 91 1e 03 	lds	r25, 0x031E
    2702:	22 e0       	ldi	r18, 0x02	; 2
    2704:	84 35       	cpi	r24, 0x54	; 84
    2706:	92 07       	cpc	r25, r18
    2708:	30 f0       	brcs	.+12     	; 0x2716 <__vector_26+0x66>
    270a:	80 91 1f 03 	lds	r24, 0x031F
    270e:	88 5f       	subi	r24, 0xF8	; 248
    2710:	80 93 1f 03 	sts	0x031F, r24
    2714:	20 c0       	rjmp	.+64     	; 0x2756 <__vector_26+0xa6>
	else if	(speed>395)				index += 4;
    2716:	80 91 1d 03 	lds	r24, 0x031D
    271a:	90 91 1e 03 	lds	r25, 0x031E
    271e:	21 e0       	ldi	r18, 0x01	; 1
    2720:	8c 38       	cpi	r24, 0x8C	; 140
    2722:	92 07       	cpc	r25, r18
    2724:	30 f0       	brcs	.+12     	; 0x2732 <__vector_26+0x82>
    2726:	80 91 1f 03 	lds	r24, 0x031F
    272a:	8c 5f       	subi	r24, 0xFC	; 252
    272c:	80 93 1f 03 	sts	0x031F, r24
    2730:	12 c0       	rjmp	.+36     	; 0x2756 <__vector_26+0xa6>
	else if	(speed>195)				index += 2;
    2732:	80 91 1d 03 	lds	r24, 0x031D
    2736:	90 91 1e 03 	lds	r25, 0x031E
    273a:	84 3c       	cpi	r24, 0xC4	; 196
    273c:	91 05       	cpc	r25, r1
    273e:	30 f0       	brcs	.+12     	; 0x274c <__vector_26+0x9c>
    2740:	80 91 1f 03 	lds	r24, 0x031F
    2744:	8e 5f       	subi	r24, 0xFE	; 254
    2746:	80 93 1f 03 	sts	0x031F, r24
    274a:	05 c0       	rjmp	.+10     	; 0x2756 <__vector_26+0xa6>
	else 											index += 1;
    274c:	80 91 1f 03 	lds	r24, 0x031F
    2750:	8f 5f       	subi	r24, 0xFF	; 255
    2752:	80 93 1f 03 	sts	0x031F, r24

	//-------------------
	if(speed>=f_Base)
    2756:	80 91 1d 03 	lds	r24, 0x031D
    275a:	90 91 1e 03 	lds	r25, 0x031E
    275e:	21 e0       	ldi	r18, 0x01	; 1
    2760:	8f 3e       	cpi	r24, 0xEF	; 239
    2762:	92 07       	cpc	r25, r18
    2764:	08 f4       	brcc	.+2      	; 0x2768 <__vector_26+0xb8>
    2766:	38 c0       	rjmp	.+112    	; 0x27d8 <__vector_26+0x128>
	{
		 if (flags.dir_f){
    2768:	80 91 46 03 	lds	r24, 0x0346
    276c:	80 ff       	sbrs	r24, 0
    276e:	14 c0       	rjmp	.+40     	; 0x2798 <__vector_26+0xe8>
		   PWMR_SET(pgm_read_byte(&sine[R_Index(index)]));
    2770:	e0 91 1f 03 	lds	r30, 0x031F
    2774:	f0 e0       	ldi	r31, 0x00	; 0
    2776:	e3 5e       	subi	r30, 0xE3	; 227
    2778:	fa 4f       	sbci	r31, 0xFA	; 250
    277a:	e4 91       	lpm	r30, Z+
    277c:	f0 e0       	ldi	r31, 0x00	; 0
    277e:	fb bd       	out	0x2b, r31	; 43
    2780:	ea bd       	out	0x2a, r30	; 42
		   PWMS_SET(pgm_read_byte(&sine[S_Index(index)]));
    2782:	e0 91 1f 03 	lds	r30, 0x031F
    2786:	ec 5a       	subi	r30, 0xAC	; 172
    2788:	f0 e0       	ldi	r31, 0x00	; 0
    278a:	e3 5e       	subi	r30, 0xE3	; 227
    278c:	fa 4f       	sbci	r31, 0xFA	; 250
    278e:	e4 91       	lpm	r30, Z+
    2790:	f0 e0       	ldi	r31, 0x00	; 0
    2792:	f9 bd       	out	0x29, r31	; 41
    2794:	e8 bd       	out	0x28, r30	; 40
    2796:	13 c0       	rjmp	.+38     	; 0x27be <__vector_26+0x10e>
		 }
		 else
		 {
			PWMS_SET(pgm_read_byte(&sine[R_Index(index)]));
    2798:	e0 91 1f 03 	lds	r30, 0x031F
    279c:	f0 e0       	ldi	r31, 0x00	; 0
    279e:	e3 5e       	subi	r30, 0xE3	; 227
    27a0:	fa 4f       	sbci	r31, 0xFA	; 250
    27a2:	e4 91       	lpm	r30, Z+
    27a4:	f0 e0       	ldi	r31, 0x00	; 0
    27a6:	f9 bd       	out	0x29, r31	; 41
    27a8:	e8 bd       	out	0x28, r30	; 40
		    PWMR_SET(pgm_read_byte(&sine[S_Index(index)])); 
    27aa:	e0 91 1f 03 	lds	r30, 0x031F
    27ae:	ec 5a       	subi	r30, 0xAC	; 172
    27b0:	f0 e0       	ldi	r31, 0x00	; 0
    27b2:	e3 5e       	subi	r30, 0xE3	; 227
    27b4:	fa 4f       	sbci	r31, 0xFA	; 250
    27b6:	e4 91       	lpm	r30, Z+
    27b8:	f0 e0       	ldi	r31, 0x00	; 0
    27ba:	fb bd       	out	0x2b, r31	; 43
    27bc:	ea bd       	out	0x2a, r30	; 42
		 }		
		PWMT_SET(pgm_read_byte(&sine[T_Index(index)]));
    27be:	e0 91 1f 03 	lds	r30, 0x031F
    27c2:	e6 55       	subi	r30, 0x56	; 86
    27c4:	f0 e0       	ldi	r31, 0x00	; 0
    27c6:	e3 5e       	subi	r30, 0xE3	; 227
    27c8:	fa 4f       	sbci	r31, 0xFA	; 250
    27ca:	e4 91       	lpm	r30, Z+
    27cc:	f0 e0       	ldi	r31, 0x00	; 0
    27ce:	f0 93 79 00 	sts	0x0079, r31
    27d2:	e0 93 78 00 	sts	0x0078, r30
    27d6:	b3 c0       	rjmp	.+358    	; 0x293e <__vector_26+0x28e>
	}

	//-----
	else if (speed<=f_Boost)
    27d8:	80 91 1d 03 	lds	r24, 0x031D
    27dc:	90 91 1e 03 	lds	r25, 0x031E
    27e0:	80 36       	cpi	r24, 0x60	; 96
    27e2:	91 05       	cpc	r25, r1
    27e4:	08 f0       	brcs	.+2      	; 0x27e8 <__vector_26+0x138>
    27e6:	47 c0       	rjmp	.+142    	; 0x2876 <__vector_26+0x1c6>
	{
		if (flags.dir_f){
    27e8:	80 91 46 03 	lds	r24, 0x0346
    27ec:	80 ff       	sbrs	r24, 0
    27ee:	1a c0       	rjmp	.+52     	; 0x2824 <__vector_26+0x174>
			
		PWMR_SET(A_calc(pgm_read_byte(&sine[R_Index(index)]), A_Boost));
    27f0:	e0 91 1f 03 	lds	r30, 0x031F
    27f4:	f0 e0       	ldi	r31, 0x00	; 0
    27f6:	e3 5e       	subi	r30, 0xE3	; 227
    27f8:	fa 4f       	sbci	r31, 0xFA	; 250
    27fa:	84 91       	lpm	r24, Z+
    27fc:	6a e0       	ldi	r22, 0x0A	; 10
    27fe:	0e 94 28 13 	call	0x2650	; 0x2650 <A_calc>
    2802:	90 e0       	ldi	r25, 0x00	; 0
    2804:	9b bd       	out	0x2b, r25	; 43
    2806:	8a bd       	out	0x2a, r24	; 42
		PWMS_SET(A_calc(pgm_read_byte(&sine[S_Index(index)]), A_Boost));
    2808:	e0 91 1f 03 	lds	r30, 0x031F
    280c:	ec 5a       	subi	r30, 0xAC	; 172
    280e:	f0 e0       	ldi	r31, 0x00	; 0
    2810:	e3 5e       	subi	r30, 0xE3	; 227
    2812:	fa 4f       	sbci	r31, 0xFA	; 250
    2814:	84 91       	lpm	r24, Z+
    2816:	6a e0       	ldi	r22, 0x0A	; 10
    2818:	0e 94 28 13 	call	0x2650	; 0x2650 <A_calc>
    281c:	90 e0       	ldi	r25, 0x00	; 0
    281e:	99 bd       	out	0x29, r25	; 41
    2820:	88 bd       	out	0x28, r24	; 40
    2822:	19 c0       	rjmp	.+50     	; 0x2856 <__vector_26+0x1a6>
		}
		else{
		PWMS_SET(A_calc(pgm_read_byte(&sine[R_Index(index)]), A_Boost));
    2824:	e0 91 1f 03 	lds	r30, 0x031F
    2828:	f0 e0       	ldi	r31, 0x00	; 0
    282a:	e3 5e       	subi	r30, 0xE3	; 227
    282c:	fa 4f       	sbci	r31, 0xFA	; 250
    282e:	84 91       	lpm	r24, Z+
    2830:	6a e0       	ldi	r22, 0x0A	; 10
    2832:	0e 94 28 13 	call	0x2650	; 0x2650 <A_calc>
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	99 bd       	out	0x29, r25	; 41
    283a:	88 bd       	out	0x28, r24	; 40
		PWMR_SET(A_calc(pgm_read_byte(&sine[S_Index(index)]), A_Boost));	
    283c:	e0 91 1f 03 	lds	r30, 0x031F
    2840:	ec 5a       	subi	r30, 0xAC	; 172
    2842:	f0 e0       	ldi	r31, 0x00	; 0
    2844:	e3 5e       	subi	r30, 0xE3	; 227
    2846:	fa 4f       	sbci	r31, 0xFA	; 250
    2848:	84 91       	lpm	r24, Z+
    284a:	6a e0       	ldi	r22, 0x0A	; 10
    284c:	0e 94 28 13 	call	0x2650	; 0x2650 <A_calc>
    2850:	90 e0       	ldi	r25, 0x00	; 0
    2852:	9b bd       	out	0x2b, r25	; 43
    2854:	8a bd       	out	0x2a, r24	; 42
		}					
		PWMT_SET(A_calc(pgm_read_byte(&sine[T_Index(index)]), A_Boost));
    2856:	e0 91 1f 03 	lds	r30, 0x031F
    285a:	e6 55       	subi	r30, 0x56	; 86
    285c:	f0 e0       	ldi	r31, 0x00	; 0
    285e:	e3 5e       	subi	r30, 0xE3	; 227
    2860:	fa 4f       	sbci	r31, 0xFA	; 250
    2862:	84 91       	lpm	r24, Z+
    2864:	6a e0       	ldi	r22, 0x0A	; 10
    2866:	0e 94 28 13 	call	0x2650	; 0x2650 <A_calc>
    286a:	90 e0       	ldi	r25, 0x00	; 0
    286c:	90 93 79 00 	sts	0x0079, r25
    2870:	80 93 78 00 	sts	0x0078, r24
    2874:	64 c0       	rjmp	.+200    	; 0x293e <__vector_26+0x28e>
	}

	//-----
	else
	{
		A = ((N *(unsigned long)(speed -f_Boost)) /M) +A_Boost;
    2876:	20 91 1d 03 	lds	r18, 0x031D
    287a:	30 91 1e 03 	lds	r19, 0x031E
    287e:	2f 55       	subi	r18, 0x5F	; 95
    2880:	30 40       	sbci	r19, 0x00	; 0
    2882:	45 ef       	ldi	r20, 0xF5	; 245
    2884:	50 e0       	ldi	r21, 0x00	; 0
    2886:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <__umulhisi3>
    288a:	20 e9       	ldi	r18, 0x90	; 144
    288c:	31 e0       	ldi	r19, 0x01	; 1
    288e:	40 e0       	ldi	r20, 0x00	; 0
    2890:	50 e0       	ldi	r21, 0x00	; 0
    2892:	0e 94 ab 18 	call	0x3156	; 0x3156 <__udivmodsi4>
    2896:	0f 2e       	mov	r0, r31
    2898:	fa e0       	ldi	r31, 0x0A	; 10
    289a:	ef 2e       	mov	r14, r31
    289c:	f0 e0       	ldi	r31, 0x00	; 0
    289e:	ff 2e       	mov	r15, r31
    28a0:	f0 e0       	ldi	r31, 0x00	; 0
    28a2:	0f 2f       	mov	r16, r31
    28a4:	f0 e0       	ldi	r31, 0x00	; 0
    28a6:	1f 2f       	mov	r17, r31
    28a8:	f0 2d       	mov	r31, r0
    28aa:	e2 0e       	add	r14, r18
    28ac:	f3 1e       	adc	r15, r19
    28ae:	04 1f       	adc	r16, r20
    28b0:	15 1f       	adc	r17, r21
		
		if (flags.dir_f){
    28b2:	80 91 46 03 	lds	r24, 0x0346
    28b6:	80 ff       	sbrs	r24, 0
    28b8:	1a c0       	rjmp	.+52     	; 0x28ee <__vector_26+0x23e>
			
		PWMR_SET(A_calc(pgm_read_byte(&sine[R_Index(index)]), (unsigned char)A));
    28ba:	e0 91 1f 03 	lds	r30, 0x031F
    28be:	f0 e0       	ldi	r31, 0x00	; 0
    28c0:	e3 5e       	subi	r30, 0xE3	; 227
    28c2:	fa 4f       	sbci	r31, 0xFA	; 250
    28c4:	84 91       	lpm	r24, Z+
    28c6:	6e 2d       	mov	r22, r14
    28c8:	0e 94 28 13 	call	0x2650	; 0x2650 <A_calc>
    28cc:	90 e0       	ldi	r25, 0x00	; 0
    28ce:	9b bd       	out	0x2b, r25	; 43
    28d0:	8a bd       	out	0x2a, r24	; 42
		PWMS_SET(A_calc(pgm_read_byte(&sine[S_Index(index)]), (unsigned char)A));
    28d2:	e0 91 1f 03 	lds	r30, 0x031F
    28d6:	ec 5a       	subi	r30, 0xAC	; 172
    28d8:	f0 e0       	ldi	r31, 0x00	; 0
    28da:	e3 5e       	subi	r30, 0xE3	; 227
    28dc:	fa 4f       	sbci	r31, 0xFA	; 250
    28de:	84 91       	lpm	r24, Z+
    28e0:	6e 2d       	mov	r22, r14
    28e2:	0e 94 28 13 	call	0x2650	; 0x2650 <A_calc>
    28e6:	90 e0       	ldi	r25, 0x00	; 0
    28e8:	99 bd       	out	0x29, r25	; 41
    28ea:	88 bd       	out	0x28, r24	; 40
    28ec:	19 c0       	rjmp	.+50     	; 0x2920 <__vector_26+0x270>
		}
		else
		{
		PWMS_SET(A_calc(pgm_read_byte(&sine[R_Index(index)]), (unsigned char)A));
    28ee:	e0 91 1f 03 	lds	r30, 0x031F
    28f2:	f0 e0       	ldi	r31, 0x00	; 0
    28f4:	e3 5e       	subi	r30, 0xE3	; 227
    28f6:	fa 4f       	sbci	r31, 0xFA	; 250
    28f8:	84 91       	lpm	r24, Z+
    28fa:	6e 2d       	mov	r22, r14
    28fc:	0e 94 28 13 	call	0x2650	; 0x2650 <A_calc>
    2900:	90 e0       	ldi	r25, 0x00	; 0
    2902:	99 bd       	out	0x29, r25	; 41
    2904:	88 bd       	out	0x28, r24	; 40
		PWMR_SET(A_calc(pgm_read_byte(&sine[S_Index(index)]), (unsigned char)A));			
    2906:	e0 91 1f 03 	lds	r30, 0x031F
    290a:	ec 5a       	subi	r30, 0xAC	; 172
    290c:	f0 e0       	ldi	r31, 0x00	; 0
    290e:	e3 5e       	subi	r30, 0xE3	; 227
    2910:	fa 4f       	sbci	r31, 0xFA	; 250
    2912:	84 91       	lpm	r24, Z+
    2914:	6e 2d       	mov	r22, r14
    2916:	0e 94 28 13 	call	0x2650	; 0x2650 <A_calc>
    291a:	90 e0       	ldi	r25, 0x00	; 0
    291c:	9b bd       	out	0x2b, r25	; 43
    291e:	8a bd       	out	0x2a, r24	; 42
		}			
		PWMT_SET(A_calc(pgm_read_byte(&sine[T_Index(index)]), (unsigned char)A));
    2920:	e0 91 1f 03 	lds	r30, 0x031F
    2924:	e6 55       	subi	r30, 0x56	; 86
    2926:	f0 e0       	ldi	r31, 0x00	; 0
    2928:	e3 5e       	subi	r30, 0xE3	; 227
    292a:	fa 4f       	sbci	r31, 0xFA	; 250
    292c:	84 91       	lpm	r24, Z+
    292e:	6e 2d       	mov	r22, r14
    2930:	0e 94 28 13 	call	0x2650	; 0x2650 <A_calc>
    2934:	90 e0       	ldi	r25, 0x00	; 0
    2936:	90 93 79 00 	sts	0x0079, r25
    293a:	80 93 78 00 	sts	0x0078, r24
	}
}	//ISR_PWM_SET
    293e:	ff 91       	pop	r31
    2940:	ef 91       	pop	r30
    2942:	bf 91       	pop	r27
    2944:	af 91       	pop	r26
    2946:	9f 91       	pop	r25
    2948:	8f 91       	pop	r24
    294a:	7f 91       	pop	r23
    294c:	6f 91       	pop	r22
    294e:	5f 91       	pop	r21
    2950:	4f 91       	pop	r20
    2952:	3f 91       	pop	r19
    2954:	2f 91       	pop	r18
    2956:	1f 91       	pop	r17
    2958:	0f 91       	pop	r16
    295a:	ff 90       	pop	r15
    295c:	ef 90       	pop	r14
    295e:	0f 90       	pop	r0
    2960:	0b be       	out	0x3b, r0	; 59
    2962:	0f 90       	pop	r0
    2964:	0f be       	out	0x3f, r0	; 63
    2966:	0f 90       	pop	r0
    2968:	1f 90       	pop	r1
    296a:	18 95       	reti

0000296c <__vector_9>:

ISR_SPEED_TUNE()								//Occur every 1ms!
{
    296c:	1f 92       	push	r1
    296e:	0f 92       	push	r0
    2970:	0f b6       	in	r0, 0x3f	; 63
    2972:	0f 92       	push	r0
    2974:	0b b6       	in	r0, 0x3b	; 59
    2976:	0f 92       	push	r0
    2978:	11 24       	eor	r1, r1
    297a:	2f 93       	push	r18
    297c:	3f 93       	push	r19
    297e:	8f 93       	push	r24
    2980:	9f 93       	push	r25
    2982:	ef 93       	push	r30
    2984:	ff 93       	push	r31
		static unsigned char 					ACC_counter = 0;
		static unsigned char 					DEC_counter = 0;
	 
	
		//-----  Acceleration
		if(speed<FinalSpeed)
    2986:	20 91 1d 03 	lds	r18, 0x031D
    298a:	30 91 1e 03 	lds	r19, 0x031E
    298e:	80 91 1b 03 	lds	r24, 0x031B
    2992:	90 91 1c 03 	lds	r25, 0x031C
    2996:	28 17       	cp	r18, r24
    2998:	39 07       	cpc	r19, r25
    299a:	b8 f4       	brcc	.+46     	; 0x29ca <__vector_9+0x5e>
		{
			DEC_counter = 0;
    299c:	10 92 23 03 	sts	0x0323, r1

			#if (ACC_DEC_USE ==1) || (ACC_DEC_USE ==3)
				ACC_counter++;
    29a0:	80 91 24 03 	lds	r24, 0x0324
    29a4:	8f 5f       	subi	r24, 0xFF	; 255
    29a6:	80 93 24 03 	sts	0x0324, r24
		 		if(ACC_counter>=Acceleration)
    29aa:	90 91 15 02 	lds	r25, 0x0215
    29ae:	89 17       	cp	r24, r25
    29b0:	90 f1       	brcs	.+100    	; 0x2a16 <__vector_9+0xaa>
		 		{
		 			ACC_counter = 0;
    29b2:	10 92 24 03 	sts	0x0324, r1
		  		speed++;
    29b6:	80 91 1d 03 	lds	r24, 0x031D
    29ba:	90 91 1e 03 	lds	r25, 0x031E
    29be:	01 96       	adiw	r24, 0x01	; 1
    29c0:	90 93 1e 03 	sts	0x031E, r25
    29c4:	80 93 1d 03 	sts	0x031D, r24
    29c8:	26 c0       	rjmp	.+76     	; 0x2a16 <__vector_9+0xaa>

			#endif
		}

		//-----  Deceleration
		else if(speed>FinalSpeed)
    29ca:	20 91 1d 03 	lds	r18, 0x031D
    29ce:	30 91 1e 03 	lds	r19, 0x031E
    29d2:	80 91 1b 03 	lds	r24, 0x031B
    29d6:	90 91 1c 03 	lds	r25, 0x031C
    29da:	82 17       	cp	r24, r18
    29dc:	93 07       	cpc	r25, r19
    29de:	b8 f4       	brcc	.+46     	; 0x2a0e <__vector_9+0xa2>
		{
			ACC_counter = 0;
    29e0:	10 92 24 03 	sts	0x0324, r1

			#if (ACC_DEC_USE ==2) || (ACC_DEC_USE ==3)
				DEC_counter++;
    29e4:	80 91 23 03 	lds	r24, 0x0323
    29e8:	8f 5f       	subi	r24, 0xFF	; 255
    29ea:	80 93 23 03 	sts	0x0323, r24
				if(DEC_counter>=Deceleration)
    29ee:	90 91 16 02 	lds	r25, 0x0216
    29f2:	89 17       	cp	r24, r25
    29f4:	80 f0       	brcs	.+32     	; 0x2a16 <__vector_9+0xaa>
				{
			  	DEC_counter = 0;
    29f6:	10 92 23 03 	sts	0x0323, r1
			  	speed--;
    29fa:	80 91 1d 03 	lds	r24, 0x031D
    29fe:	90 91 1e 03 	lds	r25, 0x031E
    2a02:	01 97       	sbiw	r24, 0x01	; 1
    2a04:	90 93 1e 03 	sts	0x031E, r25
    2a08:	80 93 1d 03 	sts	0x031D, r24
    2a0c:	04 c0       	rjmp	.+8      	; 0x2a16 <__vector_9+0xaa>
		}

		//-----
		else
		{
	 		ACC_counter = 0;
    2a0e:	10 92 24 03 	sts	0x0324, r1
	  	DEC_counter = 0;
    2a12:	10 92 23 03 	sts	0x0323, r1
		}

	#endif	

	//-------------------
	if(speed)
    2a16:	80 91 1d 03 	lds	r24, 0x031D
    2a1a:	90 91 1e 03 	lds	r25, 0x031E
    2a1e:	00 97       	sbiw	r24, 0x00	; 0
    2a20:	81 f1       	breq	.+96     	; 0x2a82 <__vector_9+0x116>
	{
		FRQ_SET(pgm_read_word(&Timer_Value[speed])-1);
    2a22:	e0 91 1d 03 	lds	r30, 0x031D
    2a26:	f0 91 1e 03 	lds	r31, 0x031E
    2a2a:	ee 0f       	add	r30, r30
    2a2c:	ff 1f       	adc	r31, r31
    2a2e:	e3 5e       	subi	r30, 0xE3	; 227
    2a30:	f8 4f       	sbci	r31, 0xF8	; 248
    2a32:	85 91       	lpm	r24, Z+
    2a34:	94 91       	lpm	r25, Z+
    2a36:	01 97       	sbiw	r24, 0x01	; 1
    2a38:	90 93 87 00 	sts	0x0087, r25
    2a3c:	80 93 86 00 	sts	0x0086, r24

 		if(MSflag==0)
    2a40:	80 91 20 03 	lds	r24, 0x0320
    2a44:	88 23       	and	r24, r24
    2a46:	91 f5       	brne	.+100    	; 0x2aac <__vector_9+0x140>
 		{
			PWMRST_ON();
    2a48:	8f b5       	in	r24, 0x2f	; 47
    2a4a:	80 68       	ori	r24, 0x80	; 128
    2a4c:	8f bd       	out	0x2f, r24	; 47
    2a4e:	8f b5       	in	r24, 0x2f	; 47
    2a50:	80 62       	ori	r24, 0x20	; 32
    2a52:	8f bd       	out	0x2f, r24	; 47
    2a54:	8f b5       	in	r24, 0x2f	; 47
    2a56:	88 60       	ori	r24, 0x08	; 8
    2a58:	8f bd       	out	0x2f, r24	; 47
			MSflag = 1;
    2a5a:	81 e0       	ldi	r24, 0x01	; 1
    2a5c:	80 93 20 03 	sts	0x0320, r24
		
			PWM_INTV_TMR_ON();
    2a60:	ea e8       	ldi	r30, 0x8A	; 138
    2a62:	f0 e0       	ldi	r31, 0x00	; 0
    2a64:	80 81       	ld	r24, Z
    2a66:	88 7f       	andi	r24, 0xF8	; 248
    2a68:	81 60       	ori	r24, 0x01	; 1
    2a6a:	80 83       	st	Z, r24
			PWM_INTV_ena();
    2a6c:	ec e7       	ldi	r30, 0x7C	; 124
    2a6e:	f0 e0       	ldi	r31, 0x00	; 0
    2a70:	80 81       	ld	r24, Z
    2a72:	80 61       	ori	r24, 0x10	; 16
    2a74:	80 83       	st	Z, r24
    2a76:	ed e7       	ldi	r30, 0x7D	; 125
    2a78:	f0 e0       	ldi	r31, 0x00	; 0
    2a7a:	80 81       	ld	r24, Z
    2a7c:	80 61       	ori	r24, 0x10	; 16
    2a7e:	80 83       	st	Z, r24
    2a80:	15 c0       	rjmp	.+42     	; 0x2aac <__vector_9+0x140>
	}

	//-----
	else
	{
	 	PWMRST_OFF();
    2a82:	8f b5       	in	r24, 0x2f	; 47
    2a84:	8f 77       	andi	r24, 0x7F	; 127
    2a86:	8f bd       	out	0x2f, r24	; 47
    2a88:	8f b5       	in	r24, 0x2f	; 47
    2a8a:	8f 7d       	andi	r24, 0xDF	; 223
    2a8c:	8f bd       	out	0x2f, r24	; 47
    2a8e:	8f b5       	in	r24, 0x2f	; 47
    2a90:	87 7f       	andi	r24, 0xF7	; 247
    2a92:	8f bd       	out	0x2f, r24	; 47
		MSflag = 0;
    2a94:	10 92 20 03 	sts	0x0320, r1

	 	PWM_INTV_TMR_OFF();
    2a98:	ea e8       	ldi	r30, 0x8A	; 138
    2a9a:	f0 e0       	ldi	r31, 0x00	; 0
    2a9c:	80 81       	ld	r24, Z
    2a9e:	88 7f       	andi	r24, 0xF8	; 248
    2aa0:	80 83       	st	Z, r24
	 	PWM_INTV_dis();
    2aa2:	ed e7       	ldi	r30, 0x7D	; 125
    2aa4:	f0 e0       	ldi	r31, 0x00	; 0
    2aa6:	80 81       	ld	r24, Z
    2aa8:	8f 7e       	andi	r24, 0xEF	; 239
    2aaa:	80 83       	st	Z, r24
	}
	
	TCounter++;
    2aac:	80 91 21 03 	lds	r24, 0x0321
    2ab0:	90 91 22 03 	lds	r25, 0x0322
    2ab4:	01 96       	adiw	r24, 0x01	; 1
    2ab6:	90 93 22 03 	sts	0x0322, r25
    2aba:	80 93 21 03 	sts	0x0321, r24
}	//ISR_SPEED_TUNE
    2abe:	ff 91       	pop	r31
    2ac0:	ef 91       	pop	r30
    2ac2:	9f 91       	pop	r25
    2ac4:	8f 91       	pop	r24
    2ac6:	3f 91       	pop	r19
    2ac8:	2f 91       	pop	r18
    2aca:	0f 90       	pop	r0
    2acc:	0b be       	out	0x3b, r0	; 59
    2ace:	0f 90       	pop	r0
    2ad0:	0f be       	out	0x3f, r0	; 63
    2ad2:	0f 90       	pop	r0
    2ad4:	1f 90       	pop	r1
    2ad6:	18 95       	reti

00002ad8 <SPWM_init>:

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
void SPWM_init(void)
{
	SPWM_HW_init();
    2ad8:	bd 9a       	sbi	0x17, 5	; 23
    2ada:	8f b5       	in	r24, 0x2f	; 47
    2adc:	8f 77       	andi	r24, 0x7F	; 127
    2ade:	8f bd       	out	0x2f, r24	; 47
    2ae0:	be 9a       	sbi	0x17, 6	; 23
    2ae2:	8f b5       	in	r24, 0x2f	; 47
    2ae4:	8f 7d       	andi	r24, 0xDF	; 223
    2ae6:	8f bd       	out	0x2f, r24	; 47
    2ae8:	bf 9a       	sbi	0x17, 7	; 23
    2aea:	8f b5       	in	r24, 0x2f	; 47
    2aec:	87 7f       	andi	r24, 0xF7	; 247
    2aee:	8f bd       	out	0x2f, r24	; 47
	
	if (flags.dir_f){
    2af0:	80 91 46 03 	lds	r24, 0x0346
    2af4:	80 ff       	sbrs	r24, 0
    2af6:	0c c0       	rjmp	.+24     	; 0x2b10 <SPWM_init+0x38>
	PWMR_SET(R_Index(index));
    2af8:	80 91 1f 03 	lds	r24, 0x031F
    2afc:	90 e0       	ldi	r25, 0x00	; 0
    2afe:	9b bd       	out	0x2b, r25	; 43
    2b00:	8a bd       	out	0x2a, r24	; 42
 	PWMS_SET(S_Index(index));
    2b02:	80 91 1f 03 	lds	r24, 0x031F
    2b06:	8c 5a       	subi	r24, 0xAC	; 172
    2b08:	90 e0       	ldi	r25, 0x00	; 0
    2b0a:	99 bd       	out	0x29, r25	; 41
    2b0c:	88 bd       	out	0x28, r24	; 40
    2b0e:	0b c0       	rjmp	.+22     	; 0x2b26 <SPWM_init+0x4e>
	}
	else
	{
	PWMS_SET(R_Index(index));
    2b10:	80 91 1f 03 	lds	r24, 0x031F
    2b14:	90 e0       	ldi	r25, 0x00	; 0
    2b16:	99 bd       	out	0x29, r25	; 41
    2b18:	88 bd       	out	0x28, r24	; 40
 	PWMR_SET(S_Index(index));	
    2b1a:	80 91 1f 03 	lds	r24, 0x031F
    2b1e:	8c 5a       	subi	r24, 0xAC	; 172
    2b20:	90 e0       	ldi	r25, 0x00	; 0
    2b22:	9b bd       	out	0x2b, r25	; 43
    2b24:	8a bd       	out	0x2a, r24	; 42
	}			 
 	PWMT_SET(T_Index(index));
    2b26:	80 91 1f 03 	lds	r24, 0x031F
    2b2a:	86 55       	subi	r24, 0x56	; 86
    2b2c:	90 e0       	ldi	r25, 0x00	; 0
    2b2e:	90 93 79 00 	sts	0x0079, r25
    2b32:	80 93 78 00 	sts	0x0078, r24

	PWM_TMR_init();
    2b36:	81 e0       	ldi	r24, 0x01	; 1
    2b38:	8f bd       	out	0x2f, r24	; 47
	PWM_TMR_ON();
    2b3a:	8e b5       	in	r24, 0x2e	; 46
    2b3c:	88 7f       	andi	r24, 0xF8	; 248
    2b3e:	81 60       	ori	r24, 0x01	; 1
    2b40:	8e bd       	out	0x2e, r24	; 46
	
	PWM_INTV_init();
    2b42:	83 e0       	ldi	r24, 0x03	; 3
    2b44:	80 93 8b 00 	sts	0x008B, r24
    2b48:	88 e1       	ldi	r24, 0x18	; 24
    2b4a:	80 93 8a 00 	sts	0x008A, r24
	SPEED_INTV_SET(SPEED_INTV_time);		//Occur every 1ms!
    2b4e:	84 e6       	ldi	r24, 0x64	; 100
    2b50:	83 bd       	out	0x23, r24	; 35

	SPEED_INTV_init();
    2b52:	8b e0       	ldi	r24, 0x0B	; 11
    2b54:	85 bd       	out	0x25, r24	; 37
	SPEED_INTV_ena();
    2b56:	86 b7       	in	r24, 0x36	; 54
    2b58:	80 68       	ori	r24, 0x80	; 128
    2b5a:	86 bf       	out	0x36, r24	; 54
    2b5c:	87 b7       	in	r24, 0x37	; 55
    2b5e:	80 68       	ori	r24, 0x80	; 128
    2b60:	87 bf       	out	0x37, r24	; 55
}	//SPWM_init
    2b62:	08 95       	ret

00002b64 <SetFrequency>:

unsigned int SetFrequency(unsigned int FRQ)
{
	if			(FRQ<14)					FinalSpeed = 0;
    2b64:	8e 30       	cpi	r24, 0x0E	; 14
    2b66:	91 05       	cpc	r25, r1
    2b68:	28 f4       	brcc	.+10     	; 0x2b74 <SetFrequency+0x10>
    2b6a:	10 92 1c 03 	sts	0x031C, r1
    2b6e:	10 92 1b 03 	sts	0x031B, r1
    2b72:	10 c0       	rjmp	.+32     	; 0x2b94 <SetFrequency+0x30>
	else if (FRQ<1010)				FinalSpeed = FRQ -13;
    2b74:	23 e0       	ldi	r18, 0x03	; 3
    2b76:	82 3f       	cpi	r24, 0xF2	; 242
    2b78:	92 07       	cpc	r25, r18
    2b7a:	30 f4       	brcc	.+12     	; 0x2b88 <SetFrequency+0x24>
    2b7c:	0d 97       	sbiw	r24, 0x0d	; 13
    2b7e:	90 93 1c 03 	sts	0x031C, r25
    2b82:	80 93 1b 03 	sts	0x031B, r24
    2b86:	06 c0       	rjmp	.+12     	; 0x2b94 <SetFrequency+0x30>
	else 											FinalSpeed = 996;
    2b88:	84 ee       	ldi	r24, 0xE4	; 228
    2b8a:	93 e0       	ldi	r25, 0x03	; 3
    2b8c:	90 93 1c 03 	sts	0x031C, r25
    2b90:	80 93 1b 03 	sts	0x031B, r24
	
	return(FinalSpeed +4);
    2b94:	20 91 1b 03 	lds	r18, 0x031B
    2b98:	30 91 1c 03 	lds	r19, 0x031C
    2b9c:	2c 5f       	subi	r18, 0xFC	; 252
    2b9e:	3f 4f       	sbci	r19, 0xFF	; 255
}	//SetFrequency
    2ba0:	82 2f       	mov	r24, r18
    2ba2:	93 2f       	mov	r25, r19
    2ba4:	08 95       	ret

00002ba6 <SetAcceleration>:

unsigned char SetAcceleration(unsigned char ACC)
{
	if(ACC) 									Acceleration = ACC;
    2ba6:	88 23       	and	r24, r24
    2ba8:	19 f0       	breq	.+6      	; 0x2bb0 <SetAcceleration+0xa>
    2baa:	80 93 15 02 	sts	0x0215, r24
    2bae:	03 c0       	rjmp	.+6      	; 0x2bb6 <SetAcceleration+0x10>
	else 											Acceleration = 1;
    2bb0:	81 e0       	ldi	r24, 0x01	; 1
    2bb2:	80 93 15 02 	sts	0x0215, r24
	
	return(Acceleration);
    2bb6:	80 91 15 02 	lds	r24, 0x0215
}	//SetAcceleration
    2bba:	08 95       	ret

00002bbc <SetDeceleration>:

unsigned char SetDeceleration(unsigned char DEC)
{
	if(DEC) 									Deceleration = DEC;
    2bbc:	88 23       	and	r24, r24
    2bbe:	19 f0       	breq	.+6      	; 0x2bc6 <SetDeceleration+0xa>
    2bc0:	80 93 16 02 	sts	0x0216, r24
    2bc4:	03 c0       	rjmp	.+6      	; 0x2bcc <SetDeceleration+0x10>
	else 											Deceleration = 1;
    2bc6:	81 e0       	ldi	r24, 0x01	; 1
    2bc8:	80 93 16 02 	sts	0x0216, r24
	
	return(Deceleration);
    2bcc:	80 91 16 02 	lds	r24, 0x0216
}	//SetDeceleration
    2bd0:	08 95       	ret

00002bd2 <uart0_init>:
//char size: 8 bit
//parity: Disabled
//**************************************************
void uart0_init(void)
{
 UCSR0B = 0x00; //disable while setting baud rate
    2bd2:	1a b8       	out	0x0a, r1	; 10
 UCSR0A = 0x00;
    2bd4:	1b b8       	out	0x0b, r1	; 11
 UCSR0C = 0x06;
    2bd6:	86 e0       	ldi	r24, 0x06	; 6
    2bd8:	80 93 95 00 	sts	0x0095, r24
 UBRR0L = 0x33; //set baud rate lo
    2bdc:	83 e3       	ldi	r24, 0x33	; 51
    2bde:	89 b9       	out	0x09, r24	; 9
 UBRR0H = 0x00; //set baud rate hi
    2be0:	10 92 90 00 	sts	0x0090, r1
 UCSR0B = 0x98;
    2be4:	88 e9       	ldi	r24, 0x98	; 152
    2be6:	8a b9       	out	0x0a, r24	; 10
}
    2be8:	08 95       	ret

00002bea <receiveByte>:
//*************************************************
unsigned char receiveByte( void )
{
	unsigned char data, status;
	
	while(!(UCSR0A & (1<<RXC0))); 	// Wait for incomming data
    2bea:	5f 9b       	sbis	0x0b, 7	; 11
    2bec:	fe cf       	rjmp	.-4      	; 0x2bea <receiveByte>
	
	status = UCSR0A;
    2bee:	8b b1       	in	r24, 0x0b	; 11
	data = UDR0;
    2bf0:	8c b1       	in	r24, 0x0c	; 12
		   
	return(data);
}
    2bf2:	08 95       	ret

00002bf4 <transmitByte>:
//***************************************************
//Function to transmit a single byte
//***************************************************
void transmitByte( unsigned char data )
{
	while ( !(UCSR0A & (1<<UDRE0)) )
    2bf4:	5d 9b       	sbis	0x0b, 5	; 11
    2bf6:	fe cf       	rjmp	.-4      	; 0x2bf4 <transmitByte>
		; 			                /* Wait for empty transmit buffer */
	UDR0 = data; 			        /* Start transmition */
    2bf8:	8c b9       	out	0x0c, r24	; 12
}
    2bfa:	08 95       	ret

00002bfc <transmitString_F>:

//***************************************************
//Function to transmit a string in Flash
//***************************************************
void transmitString_F(char* string)
{
    2bfc:	cf 93       	push	r28
    2bfe:	df 93       	push	r29
    2c00:	ec 01       	movw	r28, r24
  while (pgm_read_byte(&(*string)))
    2c02:	fe 01       	movw	r30, r28
    2c04:	24 91       	lpm	r18, Z+
    2c06:	22 23       	and	r18, r18
    2c08:	51 f0       	breq	.+20     	; 0x2c1e <transmitString_F+0x22>
   transmitByte(pgm_read_byte(&(*string++)));
    2c0a:	21 96       	adiw	r28, 0x01	; 1
    2c0c:	fc 01       	movw	r30, r24
    2c0e:	84 91       	lpm	r24, Z+
    2c10:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <transmitByte>
    2c14:	ce 01       	movw	r24, r28
//***************************************************
//Function to transmit a string in Flash
//***************************************************
void transmitString_F(char* string)
{
  while (pgm_read_byte(&(*string)))
    2c16:	fe 01       	movw	r30, r28
    2c18:	24 91       	lpm	r18, Z+
    2c1a:	22 23       	and	r18, r18
    2c1c:	b1 f7       	brne	.-20     	; 0x2c0a <transmitString_F+0xe>
   transmitByte(pgm_read_byte(&(*string++)));
}
    2c1e:	df 91       	pop	r29
    2c20:	cf 91       	pop	r28
    2c22:	08 95       	ret

00002c24 <transmitString>:

//***************************************************
//Function to transmit a string in RAM
//***************************************************
void transmitString(char* string)
{
    2c24:	cf 93       	push	r28
    2c26:	df 93       	push	r29
    2c28:	ec 01       	movw	r28, r24
    while (*string)
    2c2a:	88 81       	ld	r24, Y
    2c2c:	88 23       	and	r24, r24
    2c2e:	31 f0       	breq	.+12     	; 0x2c3c <transmitString+0x18>
}

//***************************************************
//Function to transmit a string in RAM
//***************************************************
void transmitString(char* string)
    2c30:	21 96       	adiw	r28, 0x01	; 1
{
    while (*string)
		transmitByte(*string++);
    2c32:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <transmitByte>
//***************************************************
//Function to transmit a string in RAM
//***************************************************
void transmitString(char* string)
{
    while (*string)
    2c36:	89 91       	ld	r24, Y+
    2c38:	88 23       	and	r24, r24
    2c3a:	d9 f7       	brne	.-10     	; 0x2c32 <transmitString+0xe>
		transmitByte(*string++);
}
    2c3c:	df 91       	pop	r29
    2c3e:	cf 91       	pop	r28
    2c40:	08 95       	ret

00002c42 <__fixsfsi>:
    2c42:	ac e0       	ldi	r26, 0x0C	; 12
    2c44:	b0 e0       	ldi	r27, 0x00	; 0
    2c46:	e7 e2       	ldi	r30, 0x27	; 39
    2c48:	f6 e1       	ldi	r31, 0x16	; 22
    2c4a:	0c 94 dd 18 	jmp	0x31ba	; 0x31ba <__prologue_saves__+0x20>
    2c4e:	69 83       	std	Y+1, r22	; 0x01
    2c50:	7a 83       	std	Y+2, r23	; 0x02
    2c52:	8b 83       	std	Y+3, r24	; 0x03
    2c54:	9c 83       	std	Y+4, r25	; 0x04
    2c56:	ce 01       	movw	r24, r28
    2c58:	01 96       	adiw	r24, 0x01	; 1
    2c5a:	be 01       	movw	r22, r28
    2c5c:	6b 5f       	subi	r22, 0xFB	; 251
    2c5e:	7f 4f       	sbci	r23, 0xFF	; 255
    2c60:	0e 94 13 18 	call	0x3026	; 0x3026 <__unpack_f>
    2c64:	8d 81       	ldd	r24, Y+5	; 0x05
    2c66:	82 30       	cpi	r24, 0x02	; 2
    2c68:	81 f1       	breq	.+96     	; 0x2cca <__fixsfsi+0x88>
    2c6a:	82 30       	cpi	r24, 0x02	; 2
    2c6c:	70 f1       	brcs	.+92     	; 0x2cca <__fixsfsi+0x88>
    2c6e:	84 30       	cpi	r24, 0x04	; 4
    2c70:	21 f4       	brne	.+8      	; 0x2c7a <__fixsfsi+0x38>
    2c72:	8e 81       	ldd	r24, Y+6	; 0x06
    2c74:	88 23       	and	r24, r24
    2c76:	69 f1       	breq	.+90     	; 0x2cd2 <__fixsfsi+0x90>
    2c78:	0a c0       	rjmp	.+20     	; 0x2c8e <__fixsfsi+0x4c>
    2c7a:	2f 81       	ldd	r18, Y+7	; 0x07
    2c7c:	38 85       	ldd	r19, Y+8	; 0x08
    2c7e:	37 fd       	sbrc	r19, 7
    2c80:	24 c0       	rjmp	.+72     	; 0x2cca <__fixsfsi+0x88>
    2c82:	6e 81       	ldd	r22, Y+6	; 0x06
    2c84:	2f 31       	cpi	r18, 0x1F	; 31
    2c86:	31 05       	cpc	r19, r1
    2c88:	3c f0       	brlt	.+14     	; 0x2c98 <__fixsfsi+0x56>
    2c8a:	66 23       	and	r22, r22
    2c8c:	11 f1       	breq	.+68     	; 0x2cd2 <__fixsfsi+0x90>
    2c8e:	20 e0       	ldi	r18, 0x00	; 0
    2c90:	30 e0       	ldi	r19, 0x00	; 0
    2c92:	40 e0       	ldi	r20, 0x00	; 0
    2c94:	50 e8       	ldi	r21, 0x80	; 128
    2c96:	21 c0       	rjmp	.+66     	; 0x2cda <__fixsfsi+0x98>
    2c98:	8e e1       	ldi	r24, 0x1E	; 30
    2c9a:	90 e0       	ldi	r25, 0x00	; 0
    2c9c:	82 1b       	sub	r24, r18
    2c9e:	93 0b       	sbc	r25, r19
    2ca0:	29 85       	ldd	r18, Y+9	; 0x09
    2ca2:	3a 85       	ldd	r19, Y+10	; 0x0a
    2ca4:	4b 85       	ldd	r20, Y+11	; 0x0b
    2ca6:	5c 85       	ldd	r21, Y+12	; 0x0c
    2ca8:	04 c0       	rjmp	.+8      	; 0x2cb2 <__fixsfsi+0x70>
    2caa:	56 95       	lsr	r21
    2cac:	47 95       	ror	r20
    2cae:	37 95       	ror	r19
    2cb0:	27 95       	ror	r18
    2cb2:	8a 95       	dec	r24
    2cb4:	d2 f7       	brpl	.-12     	; 0x2caa <__fixsfsi+0x68>
    2cb6:	66 23       	and	r22, r22
    2cb8:	81 f0       	breq	.+32     	; 0x2cda <__fixsfsi+0x98>
    2cba:	50 95       	com	r21
    2cbc:	40 95       	com	r20
    2cbe:	30 95       	com	r19
    2cc0:	21 95       	neg	r18
    2cc2:	3f 4f       	sbci	r19, 0xFF	; 255
    2cc4:	4f 4f       	sbci	r20, 0xFF	; 255
    2cc6:	5f 4f       	sbci	r21, 0xFF	; 255
    2cc8:	08 c0       	rjmp	.+16     	; 0x2cda <__fixsfsi+0x98>
    2cca:	20 e0       	ldi	r18, 0x00	; 0
    2ccc:	30 e0       	ldi	r19, 0x00	; 0
    2cce:	a9 01       	movw	r20, r18
    2cd0:	04 c0       	rjmp	.+8      	; 0x2cda <__fixsfsi+0x98>
    2cd2:	2f ef       	ldi	r18, 0xFF	; 255
    2cd4:	3f ef       	ldi	r19, 0xFF	; 255
    2cd6:	4f ef       	ldi	r20, 0xFF	; 255
    2cd8:	5f e7       	ldi	r21, 0x7F	; 127
    2cda:	b9 01       	movw	r22, r18
    2cdc:	ca 01       	movw	r24, r20
    2cde:	2c 96       	adiw	r28, 0x0c	; 12
    2ce0:	e2 e0       	ldi	r30, 0x02	; 2
    2ce2:	0c 94 f9 18 	jmp	0x31f2	; 0x31f2 <__epilogue_restores__+0x20>

00002ce6 <__floatunsisf>:
    2ce6:	a8 e0       	ldi	r26, 0x08	; 8
    2ce8:	b0 e0       	ldi	r27, 0x00	; 0
    2cea:	e9 e7       	ldi	r30, 0x79	; 121
    2cec:	f6 e1       	ldi	r31, 0x16	; 22
    2cee:	0c 94 d7 18 	jmp	0x31ae	; 0x31ae <__prologue_saves__+0x14>
    2cf2:	7b 01       	movw	r14, r22
    2cf4:	8c 01       	movw	r16, r24
    2cf6:	1a 82       	std	Y+2, r1	; 0x02
    2cf8:	61 15       	cp	r22, r1
    2cfa:	71 05       	cpc	r23, r1
    2cfc:	81 05       	cpc	r24, r1
    2cfe:	91 05       	cpc	r25, r1
    2d00:	19 f4       	brne	.+6      	; 0x2d08 <__floatunsisf+0x22>
    2d02:	82 e0       	ldi	r24, 0x02	; 2
    2d04:	89 83       	std	Y+1, r24	; 0x01
    2d06:	5f c0       	rjmp	.+190    	; 0x2dc6 <__floatunsisf+0xe0>
    2d08:	83 e0       	ldi	r24, 0x03	; 3
    2d0a:	89 83       	std	Y+1, r24	; 0x01
    2d0c:	8e e1       	ldi	r24, 0x1E	; 30
    2d0e:	c8 2e       	mov	r12, r24
    2d10:	d1 2c       	mov	r13, r1
    2d12:	dc 82       	std	Y+4, r13	; 0x04
    2d14:	cb 82       	std	Y+3, r12	; 0x03
    2d16:	ed 82       	std	Y+5, r14	; 0x05
    2d18:	fe 82       	std	Y+6, r15	; 0x06
    2d1a:	0f 83       	std	Y+7, r16	; 0x07
    2d1c:	18 87       	std	Y+8, r17	; 0x08
    2d1e:	c8 01       	movw	r24, r16
    2d20:	b7 01       	movw	r22, r14
    2d22:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <__clzsi2>
    2d26:	fc 01       	movw	r30, r24
    2d28:	31 97       	sbiw	r30, 0x01	; 1
    2d2a:	f7 ff       	sbrs	r31, 7
    2d2c:	3a c0       	rjmp	.+116    	; 0x2da2 <__floatunsisf+0xbc>
    2d2e:	aa 27       	eor	r26, r26
    2d30:	bb 27       	eor	r27, r27
    2d32:	ae 1b       	sub	r26, r30
    2d34:	bf 0b       	sbc	r27, r31
    2d36:	21 e0       	ldi	r18, 0x01	; 1
    2d38:	30 e0       	ldi	r19, 0x00	; 0
    2d3a:	40 e0       	ldi	r20, 0x00	; 0
    2d3c:	50 e0       	ldi	r21, 0x00	; 0
    2d3e:	0a 2e       	mov	r0, r26
    2d40:	04 c0       	rjmp	.+8      	; 0x2d4a <__floatunsisf+0x64>
    2d42:	22 0f       	add	r18, r18
    2d44:	33 1f       	adc	r19, r19
    2d46:	44 1f       	adc	r20, r20
    2d48:	55 1f       	adc	r21, r21
    2d4a:	0a 94       	dec	r0
    2d4c:	d2 f7       	brpl	.-12     	; 0x2d42 <__floatunsisf+0x5c>
    2d4e:	21 50       	subi	r18, 0x01	; 1
    2d50:	30 40       	sbci	r19, 0x00	; 0
    2d52:	40 40       	sbci	r20, 0x00	; 0
    2d54:	50 40       	sbci	r21, 0x00	; 0
    2d56:	2e 21       	and	r18, r14
    2d58:	3f 21       	and	r19, r15
    2d5a:	40 23       	and	r20, r16
    2d5c:	51 23       	and	r21, r17
    2d5e:	61 e0       	ldi	r22, 0x01	; 1
    2d60:	70 e0       	ldi	r23, 0x00	; 0
    2d62:	80 e0       	ldi	r24, 0x00	; 0
    2d64:	90 e0       	ldi	r25, 0x00	; 0
    2d66:	21 15       	cp	r18, r1
    2d68:	31 05       	cpc	r19, r1
    2d6a:	41 05       	cpc	r20, r1
    2d6c:	51 05       	cpc	r21, r1
    2d6e:	19 f4       	brne	.+6      	; 0x2d76 <__floatunsisf+0x90>
    2d70:	60 e0       	ldi	r22, 0x00	; 0
    2d72:	70 e0       	ldi	r23, 0x00	; 0
    2d74:	cb 01       	movw	r24, r22
    2d76:	04 c0       	rjmp	.+8      	; 0x2d80 <__floatunsisf+0x9a>
    2d78:	16 95       	lsr	r17
    2d7a:	07 95       	ror	r16
    2d7c:	f7 94       	ror	r15
    2d7e:	e7 94       	ror	r14
    2d80:	aa 95       	dec	r26
    2d82:	d2 f7       	brpl	.-12     	; 0x2d78 <__floatunsisf+0x92>
    2d84:	e6 2a       	or	r14, r22
    2d86:	f7 2a       	or	r15, r23
    2d88:	08 2b       	or	r16, r24
    2d8a:	19 2b       	or	r17, r25
    2d8c:	ed 82       	std	Y+5, r14	; 0x05
    2d8e:	fe 82       	std	Y+6, r15	; 0x06
    2d90:	0f 83       	std	Y+7, r16	; 0x07
    2d92:	18 87       	std	Y+8, r17	; 0x08
    2d94:	8e e1       	ldi	r24, 0x1E	; 30
    2d96:	90 e0       	ldi	r25, 0x00	; 0
    2d98:	8e 1b       	sub	r24, r30
    2d9a:	9f 0b       	sbc	r25, r31
    2d9c:	9c 83       	std	Y+4, r25	; 0x04
    2d9e:	8b 83       	std	Y+3, r24	; 0x03
    2da0:	12 c0       	rjmp	.+36     	; 0x2dc6 <__floatunsisf+0xe0>
    2da2:	30 97       	sbiw	r30, 0x00	; 0
    2da4:	81 f0       	breq	.+32     	; 0x2dc6 <__floatunsisf+0xe0>
    2da6:	0e 2e       	mov	r0, r30
    2da8:	04 c0       	rjmp	.+8      	; 0x2db2 <__floatunsisf+0xcc>
    2daa:	ee 0c       	add	r14, r14
    2dac:	ff 1c       	adc	r15, r15
    2dae:	00 1f       	adc	r16, r16
    2db0:	11 1f       	adc	r17, r17
    2db2:	0a 94       	dec	r0
    2db4:	d2 f7       	brpl	.-12     	; 0x2daa <__floatunsisf+0xc4>
    2db6:	ed 82       	std	Y+5, r14	; 0x05
    2db8:	fe 82       	std	Y+6, r15	; 0x06
    2dba:	0f 83       	std	Y+7, r16	; 0x07
    2dbc:	18 87       	std	Y+8, r17	; 0x08
    2dbe:	ce 1a       	sub	r12, r30
    2dc0:	df 0a       	sbc	r13, r31
    2dc2:	dc 82       	std	Y+4, r13	; 0x04
    2dc4:	cb 82       	std	Y+3, r12	; 0x03
    2dc6:	ce 01       	movw	r24, r28
    2dc8:	01 96       	adiw	r24, 0x01	; 1
    2dca:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <__pack_f>
    2dce:	28 96       	adiw	r28, 0x08	; 8
    2dd0:	e8 e0       	ldi	r30, 0x08	; 8
    2dd2:	0c 94 f3 18 	jmp	0x31e6	; 0x31e6 <__epilogue_restores__+0x14>

00002dd6 <__clzsi2>:
    2dd6:	af 92       	push	r10
    2dd8:	bf 92       	push	r11
    2dda:	cf 92       	push	r12
    2ddc:	df 92       	push	r13
    2dde:	ef 92       	push	r14
    2de0:	ff 92       	push	r15
    2de2:	0f 93       	push	r16
    2de4:	1f 93       	push	r17
    2de6:	7b 01       	movw	r14, r22
    2de8:	8c 01       	movw	r16, r24
    2dea:	80 e0       	ldi	r24, 0x00	; 0
    2dec:	e8 16       	cp	r14, r24
    2dee:	80 e0       	ldi	r24, 0x00	; 0
    2df0:	f8 06       	cpc	r15, r24
    2df2:	81 e0       	ldi	r24, 0x01	; 1
    2df4:	08 07       	cpc	r16, r24
    2df6:	80 e0       	ldi	r24, 0x00	; 0
    2df8:	18 07       	cpc	r17, r24
    2dfa:	58 f4       	brcc	.+22     	; 0x2e12 <__clzsi2+0x3c>
    2dfc:	ef ef       	ldi	r30, 0xFF	; 255
    2dfe:	ee 16       	cp	r14, r30
    2e00:	f1 04       	cpc	r15, r1
    2e02:	01 05       	cpc	r16, r1
    2e04:	11 05       	cpc	r17, r1
    2e06:	09 f0       	breq	.+2      	; 0x2e0a <__clzsi2+0x34>
    2e08:	90 f4       	brcc	.+36     	; 0x2e2e <__clzsi2+0x58>
    2e0a:	80 e0       	ldi	r24, 0x00	; 0
    2e0c:	90 e0       	ldi	r25, 0x00	; 0
    2e0e:	dc 01       	movw	r26, r24
    2e10:	17 c0       	rjmp	.+46     	; 0x2e40 <__clzsi2+0x6a>
    2e12:	f0 e0       	ldi	r31, 0x00	; 0
    2e14:	ef 16       	cp	r14, r31
    2e16:	f0 e0       	ldi	r31, 0x00	; 0
    2e18:	ff 06       	cpc	r15, r31
    2e1a:	f0 e0       	ldi	r31, 0x00	; 0
    2e1c:	0f 07       	cpc	r16, r31
    2e1e:	f1 e0       	ldi	r31, 0x01	; 1
    2e20:	1f 07       	cpc	r17, r31
    2e22:	50 f4       	brcc	.+20     	; 0x2e38 <__clzsi2+0x62>
    2e24:	80 e1       	ldi	r24, 0x10	; 16
    2e26:	90 e0       	ldi	r25, 0x00	; 0
    2e28:	a0 e0       	ldi	r26, 0x00	; 0
    2e2a:	b0 e0       	ldi	r27, 0x00	; 0
    2e2c:	09 c0       	rjmp	.+18     	; 0x2e40 <__clzsi2+0x6a>
    2e2e:	88 e0       	ldi	r24, 0x08	; 8
    2e30:	90 e0       	ldi	r25, 0x00	; 0
    2e32:	a0 e0       	ldi	r26, 0x00	; 0
    2e34:	b0 e0       	ldi	r27, 0x00	; 0
    2e36:	04 c0       	rjmp	.+8      	; 0x2e40 <__clzsi2+0x6a>
    2e38:	88 e1       	ldi	r24, 0x18	; 24
    2e3a:	90 e0       	ldi	r25, 0x00	; 0
    2e3c:	a0 e0       	ldi	r26, 0x00	; 0
    2e3e:	b0 e0       	ldi	r27, 0x00	; 0
    2e40:	20 e2       	ldi	r18, 0x20	; 32
    2e42:	30 e0       	ldi	r19, 0x00	; 0
    2e44:	40 e0       	ldi	r20, 0x00	; 0
    2e46:	50 e0       	ldi	r21, 0x00	; 0
    2e48:	28 1b       	sub	r18, r24
    2e4a:	39 0b       	sbc	r19, r25
    2e4c:	4a 0b       	sbc	r20, r26
    2e4e:	5b 0b       	sbc	r21, r27
    2e50:	57 01       	movw	r10, r14
    2e52:	68 01       	movw	r12, r16
    2e54:	04 c0       	rjmp	.+8      	; 0x2e5e <__clzsi2+0x88>
    2e56:	d6 94       	lsr	r13
    2e58:	c7 94       	ror	r12
    2e5a:	b7 94       	ror	r11
    2e5c:	a7 94       	ror	r10
    2e5e:	8a 95       	dec	r24
    2e60:	d2 f7       	brpl	.-12     	; 0x2e56 <__clzsi2+0x80>
    2e62:	d6 01       	movw	r26, r12
    2e64:	c5 01       	movw	r24, r10
    2e66:	89 5e       	subi	r24, 0xE9	; 233
    2e68:	9d 4f       	sbci	r25, 0xFD	; 253
    2e6a:	fc 01       	movw	r30, r24
    2e6c:	80 81       	ld	r24, Z
    2e6e:	28 1b       	sub	r18, r24
    2e70:	31 09       	sbc	r19, r1
    2e72:	41 09       	sbc	r20, r1
    2e74:	51 09       	sbc	r21, r1
    2e76:	c9 01       	movw	r24, r18
    2e78:	1f 91       	pop	r17
    2e7a:	0f 91       	pop	r16
    2e7c:	ff 90       	pop	r15
    2e7e:	ef 90       	pop	r14
    2e80:	df 90       	pop	r13
    2e82:	cf 90       	pop	r12
    2e84:	bf 90       	pop	r11
    2e86:	af 90       	pop	r10
    2e88:	08 95       	ret

00002e8a <__pack_f>:
    2e8a:	ef 92       	push	r14
    2e8c:	ff 92       	push	r15
    2e8e:	0f 93       	push	r16
    2e90:	1f 93       	push	r17
    2e92:	cf 93       	push	r28
    2e94:	df 93       	push	r29
    2e96:	fc 01       	movw	r30, r24
    2e98:	24 81       	ldd	r18, Z+4	; 0x04
    2e9a:	35 81       	ldd	r19, Z+5	; 0x05
    2e9c:	46 81       	ldd	r20, Z+6	; 0x06
    2e9e:	57 81       	ldd	r21, Z+7	; 0x07
    2ea0:	61 81       	ldd	r22, Z+1	; 0x01
    2ea2:	80 81       	ld	r24, Z
    2ea4:	82 30       	cpi	r24, 0x02	; 2
    2ea6:	20 f4       	brcc	.+8      	; 0x2eb0 <__pack_f+0x26>
    2ea8:	40 61       	ori	r20, 0x10	; 16
    2eaa:	ef ef       	ldi	r30, 0xFF	; 255
    2eac:	f0 e0       	ldi	r31, 0x00	; 0
    2eae:	a3 c0       	rjmp	.+326    	; 0x2ff6 <__pack_f+0x16c>
    2eb0:	84 30       	cpi	r24, 0x04	; 4
    2eb2:	09 f4       	brne	.+2      	; 0x2eb6 <__pack_f+0x2c>
    2eb4:	9b c0       	rjmp	.+310    	; 0x2fec <__pack_f+0x162>
    2eb6:	82 30       	cpi	r24, 0x02	; 2
    2eb8:	09 f4       	brne	.+2      	; 0x2ebc <__pack_f+0x32>
    2eba:	92 c0       	rjmp	.+292    	; 0x2fe0 <__pack_f+0x156>
    2ebc:	21 15       	cp	r18, r1
    2ebe:	31 05       	cpc	r19, r1
    2ec0:	41 05       	cpc	r20, r1
    2ec2:	51 05       	cpc	r21, r1
    2ec4:	09 f4       	brne	.+2      	; 0x2ec8 <__pack_f+0x3e>
    2ec6:	8f c0       	rjmp	.+286    	; 0x2fe6 <__pack_f+0x15c>
    2ec8:	02 80       	ldd	r0, Z+2	; 0x02
    2eca:	f3 81       	ldd	r31, Z+3	; 0x03
    2ecc:	e0 2d       	mov	r30, r0
    2ece:	8f ef       	ldi	r24, 0xFF	; 255
    2ed0:	e2 38       	cpi	r30, 0x82	; 130
    2ed2:	f8 07       	cpc	r31, r24
    2ed4:	0c f0       	brlt	.+2      	; 0x2ed8 <__pack_f+0x4e>
    2ed6:	5a c0       	rjmp	.+180    	; 0x2f8c <__pack_f+0x102>
    2ed8:	c2 e8       	ldi	r28, 0x82	; 130
    2eda:	df ef       	ldi	r29, 0xFF	; 255
    2edc:	ce 1b       	sub	r28, r30
    2ede:	df 0b       	sbc	r29, r31
    2ee0:	ca 31       	cpi	r28, 0x1A	; 26
    2ee2:	d1 05       	cpc	r29, r1
    2ee4:	6c f5       	brge	.+90     	; 0x2f40 <__pack_f+0xb6>
    2ee6:	79 01       	movw	r14, r18
    2ee8:	8a 01       	movw	r16, r20
    2eea:	0c 2e       	mov	r0, r28
    2eec:	04 c0       	rjmp	.+8      	; 0x2ef6 <__pack_f+0x6c>
    2eee:	16 95       	lsr	r17
    2ef0:	07 95       	ror	r16
    2ef2:	f7 94       	ror	r15
    2ef4:	e7 94       	ror	r14
    2ef6:	0a 94       	dec	r0
    2ef8:	d2 f7       	brpl	.-12     	; 0x2eee <__pack_f+0x64>
    2efa:	81 e0       	ldi	r24, 0x01	; 1
    2efc:	90 e0       	ldi	r25, 0x00	; 0
    2efe:	a0 e0       	ldi	r26, 0x00	; 0
    2f00:	b0 e0       	ldi	r27, 0x00	; 0
    2f02:	0c 2e       	mov	r0, r28
    2f04:	04 c0       	rjmp	.+8      	; 0x2f0e <__pack_f+0x84>
    2f06:	88 0f       	add	r24, r24
    2f08:	99 1f       	adc	r25, r25
    2f0a:	aa 1f       	adc	r26, r26
    2f0c:	bb 1f       	adc	r27, r27
    2f0e:	0a 94       	dec	r0
    2f10:	d2 f7       	brpl	.-12     	; 0x2f06 <__pack_f+0x7c>
    2f12:	01 97       	sbiw	r24, 0x01	; 1
    2f14:	a1 09       	sbc	r26, r1
    2f16:	b1 09       	sbc	r27, r1
    2f18:	82 23       	and	r24, r18
    2f1a:	93 23       	and	r25, r19
    2f1c:	a4 23       	and	r26, r20
    2f1e:	b5 23       	and	r27, r21
    2f20:	21 e0       	ldi	r18, 0x01	; 1
    2f22:	30 e0       	ldi	r19, 0x00	; 0
    2f24:	40 e0       	ldi	r20, 0x00	; 0
    2f26:	50 e0       	ldi	r21, 0x00	; 0
    2f28:	00 97       	sbiw	r24, 0x00	; 0
    2f2a:	a1 05       	cpc	r26, r1
    2f2c:	b1 05       	cpc	r27, r1
    2f2e:	19 f4       	brne	.+6      	; 0x2f36 <__pack_f+0xac>
    2f30:	20 e0       	ldi	r18, 0x00	; 0
    2f32:	30 e0       	ldi	r19, 0x00	; 0
    2f34:	a9 01       	movw	r20, r18
    2f36:	2e 29       	or	r18, r14
    2f38:	3f 29       	or	r19, r15
    2f3a:	40 2b       	or	r20, r16
    2f3c:	51 2b       	or	r21, r17
    2f3e:	03 c0       	rjmp	.+6      	; 0x2f46 <__pack_f+0xbc>
    2f40:	20 e0       	ldi	r18, 0x00	; 0
    2f42:	30 e0       	ldi	r19, 0x00	; 0
    2f44:	a9 01       	movw	r20, r18
    2f46:	da 01       	movw	r26, r20
    2f48:	c9 01       	movw	r24, r18
    2f4a:	8f 77       	andi	r24, 0x7F	; 127
    2f4c:	90 70       	andi	r25, 0x00	; 0
    2f4e:	a0 70       	andi	r26, 0x00	; 0
    2f50:	b0 70       	andi	r27, 0x00	; 0
    2f52:	80 34       	cpi	r24, 0x40	; 64
    2f54:	91 05       	cpc	r25, r1
    2f56:	a1 05       	cpc	r26, r1
    2f58:	b1 05       	cpc	r27, r1
    2f5a:	39 f4       	brne	.+14     	; 0x2f6a <__pack_f+0xe0>
    2f5c:	27 ff       	sbrs	r18, 7
    2f5e:	09 c0       	rjmp	.+18     	; 0x2f72 <__pack_f+0xe8>
    2f60:	20 5c       	subi	r18, 0xC0	; 192
    2f62:	3f 4f       	sbci	r19, 0xFF	; 255
    2f64:	4f 4f       	sbci	r20, 0xFF	; 255
    2f66:	5f 4f       	sbci	r21, 0xFF	; 255
    2f68:	04 c0       	rjmp	.+8      	; 0x2f72 <__pack_f+0xe8>
    2f6a:	21 5c       	subi	r18, 0xC1	; 193
    2f6c:	3f 4f       	sbci	r19, 0xFF	; 255
    2f6e:	4f 4f       	sbci	r20, 0xFF	; 255
    2f70:	5f 4f       	sbci	r21, 0xFF	; 255
    2f72:	e1 e0       	ldi	r30, 0x01	; 1
    2f74:	f0 e0       	ldi	r31, 0x00	; 0
    2f76:	20 30       	cpi	r18, 0x00	; 0
    2f78:	80 e0       	ldi	r24, 0x00	; 0
    2f7a:	38 07       	cpc	r19, r24
    2f7c:	80 e0       	ldi	r24, 0x00	; 0
    2f7e:	48 07       	cpc	r20, r24
    2f80:	80 e4       	ldi	r24, 0x40	; 64
    2f82:	58 07       	cpc	r21, r24
    2f84:	28 f5       	brcc	.+74     	; 0x2fd0 <__pack_f+0x146>
    2f86:	e0 e0       	ldi	r30, 0x00	; 0
    2f88:	f0 e0       	ldi	r31, 0x00	; 0
    2f8a:	22 c0       	rjmp	.+68     	; 0x2fd0 <__pack_f+0x146>
    2f8c:	e0 38       	cpi	r30, 0x80	; 128
    2f8e:	f1 05       	cpc	r31, r1
    2f90:	6c f5       	brge	.+90     	; 0x2fec <__pack_f+0x162>
    2f92:	e1 58       	subi	r30, 0x81	; 129
    2f94:	ff 4f       	sbci	r31, 0xFF	; 255
    2f96:	da 01       	movw	r26, r20
    2f98:	c9 01       	movw	r24, r18
    2f9a:	8f 77       	andi	r24, 0x7F	; 127
    2f9c:	90 70       	andi	r25, 0x00	; 0
    2f9e:	a0 70       	andi	r26, 0x00	; 0
    2fa0:	b0 70       	andi	r27, 0x00	; 0
    2fa2:	80 34       	cpi	r24, 0x40	; 64
    2fa4:	91 05       	cpc	r25, r1
    2fa6:	a1 05       	cpc	r26, r1
    2fa8:	b1 05       	cpc	r27, r1
    2faa:	39 f4       	brne	.+14     	; 0x2fba <__pack_f+0x130>
    2fac:	27 ff       	sbrs	r18, 7
    2fae:	09 c0       	rjmp	.+18     	; 0x2fc2 <__pack_f+0x138>
    2fb0:	20 5c       	subi	r18, 0xC0	; 192
    2fb2:	3f 4f       	sbci	r19, 0xFF	; 255
    2fb4:	4f 4f       	sbci	r20, 0xFF	; 255
    2fb6:	5f 4f       	sbci	r21, 0xFF	; 255
    2fb8:	04 c0       	rjmp	.+8      	; 0x2fc2 <__pack_f+0x138>
    2fba:	21 5c       	subi	r18, 0xC1	; 193
    2fbc:	3f 4f       	sbci	r19, 0xFF	; 255
    2fbe:	4f 4f       	sbci	r20, 0xFF	; 255
    2fc0:	5f 4f       	sbci	r21, 0xFF	; 255
    2fc2:	57 ff       	sbrs	r21, 7
    2fc4:	05 c0       	rjmp	.+10     	; 0x2fd0 <__pack_f+0x146>
    2fc6:	56 95       	lsr	r21
    2fc8:	47 95       	ror	r20
    2fca:	37 95       	ror	r19
    2fcc:	27 95       	ror	r18
    2fce:	31 96       	adiw	r30, 0x01	; 1
    2fd0:	87 e0       	ldi	r24, 0x07	; 7
    2fd2:	56 95       	lsr	r21
    2fd4:	47 95       	ror	r20
    2fd6:	37 95       	ror	r19
    2fd8:	27 95       	ror	r18
    2fda:	8a 95       	dec	r24
    2fdc:	d1 f7       	brne	.-12     	; 0x2fd2 <__pack_f+0x148>
    2fde:	0b c0       	rjmp	.+22     	; 0x2ff6 <__pack_f+0x16c>
    2fe0:	e0 e0       	ldi	r30, 0x00	; 0
    2fe2:	f0 e0       	ldi	r31, 0x00	; 0
    2fe4:	05 c0       	rjmp	.+10     	; 0x2ff0 <__pack_f+0x166>
    2fe6:	e0 e0       	ldi	r30, 0x00	; 0
    2fe8:	f0 e0       	ldi	r31, 0x00	; 0
    2fea:	05 c0       	rjmp	.+10     	; 0x2ff6 <__pack_f+0x16c>
    2fec:	ef ef       	ldi	r30, 0xFF	; 255
    2fee:	f0 e0       	ldi	r31, 0x00	; 0
    2ff0:	20 e0       	ldi	r18, 0x00	; 0
    2ff2:	30 e0       	ldi	r19, 0x00	; 0
    2ff4:	a9 01       	movw	r20, r18
    2ff6:	8e 2f       	mov	r24, r30
    2ff8:	87 95       	ror	r24
    2ffa:	88 27       	eor	r24, r24
    2ffc:	87 95       	ror	r24
    2ffe:	94 2f       	mov	r25, r20
    3000:	9f 77       	andi	r25, 0x7F	; 127
    3002:	67 95       	ror	r22
    3004:	66 27       	eor	r22, r22
    3006:	67 95       	ror	r22
    3008:	e6 95       	lsr	r30
    300a:	e2 2e       	mov	r14, r18
    300c:	a9 2f       	mov	r26, r25
    300e:	a8 2b       	or	r26, r24
    3010:	fe 2f       	mov	r31, r30
    3012:	f6 2b       	or	r31, r22
    3014:	62 2f       	mov	r22, r18
    3016:	73 2f       	mov	r23, r19
    3018:	8a 2f       	mov	r24, r26
    301a:	9f 2f       	mov	r25, r31
    301c:	cd b7       	in	r28, 0x3d	; 61
    301e:	de b7       	in	r29, 0x3e	; 62
    3020:	e6 e0       	ldi	r30, 0x06	; 6
    3022:	0c 94 f5 18 	jmp	0x31ea	; 0x31ea <__epilogue_restores__+0x18>

00003026 <__unpack_f>:
    3026:	dc 01       	movw	r26, r24
    3028:	fb 01       	movw	r30, r22
    302a:	2c 91       	ld	r18, X
    302c:	11 96       	adiw	r26, 0x01	; 1
    302e:	3c 91       	ld	r19, X
    3030:	11 97       	sbiw	r26, 0x01	; 1
    3032:	12 96       	adiw	r26, 0x02	; 2
    3034:	8c 91       	ld	r24, X
    3036:	12 97       	sbiw	r26, 0x02	; 2
    3038:	48 2f       	mov	r20, r24
    303a:	4f 77       	andi	r20, 0x7F	; 127
    303c:	50 e0       	ldi	r21, 0x00	; 0
    303e:	98 2f       	mov	r25, r24
    3040:	99 1f       	adc	r25, r25
    3042:	99 27       	eor	r25, r25
    3044:	99 1f       	adc	r25, r25
    3046:	13 96       	adiw	r26, 0x03	; 3
    3048:	6c 91       	ld	r22, X
    304a:	13 97       	sbiw	r26, 0x03	; 3
    304c:	86 2f       	mov	r24, r22
    304e:	88 0f       	add	r24, r24
    3050:	89 2b       	or	r24, r25
    3052:	90 e0       	ldi	r25, 0x00	; 0
    3054:	66 1f       	adc	r22, r22
    3056:	66 27       	eor	r22, r22
    3058:	66 1f       	adc	r22, r22
    305a:	61 83       	std	Z+1, r22	; 0x01
    305c:	00 97       	sbiw	r24, 0x00	; 0
    305e:	39 f5       	brne	.+78     	; 0x30ae <__unpack_f+0x88>
    3060:	21 15       	cp	r18, r1
    3062:	31 05       	cpc	r19, r1
    3064:	41 05       	cpc	r20, r1
    3066:	51 05       	cpc	r21, r1
    3068:	11 f4       	brne	.+4      	; 0x306e <__unpack_f+0x48>
    306a:	82 e0       	ldi	r24, 0x02	; 2
    306c:	29 c0       	rjmp	.+82     	; 0x30c0 <__unpack_f+0x9a>
    306e:	82 e8       	ldi	r24, 0x82	; 130
    3070:	9f ef       	ldi	r25, 0xFF	; 255
    3072:	93 83       	std	Z+3, r25	; 0x03
    3074:	82 83       	std	Z+2, r24	; 0x02
    3076:	67 e0       	ldi	r22, 0x07	; 7
    3078:	22 0f       	add	r18, r18
    307a:	33 1f       	adc	r19, r19
    307c:	44 1f       	adc	r20, r20
    307e:	55 1f       	adc	r21, r21
    3080:	6a 95       	dec	r22
    3082:	d1 f7       	brne	.-12     	; 0x3078 <__unpack_f+0x52>
    3084:	83 e0       	ldi	r24, 0x03	; 3
    3086:	80 83       	st	Z, r24
    3088:	09 c0       	rjmp	.+18     	; 0x309c <__unpack_f+0x76>
    308a:	22 0f       	add	r18, r18
    308c:	33 1f       	adc	r19, r19
    308e:	44 1f       	adc	r20, r20
    3090:	55 1f       	adc	r21, r21
    3092:	82 81       	ldd	r24, Z+2	; 0x02
    3094:	93 81       	ldd	r25, Z+3	; 0x03
    3096:	01 97       	sbiw	r24, 0x01	; 1
    3098:	93 83       	std	Z+3, r25	; 0x03
    309a:	82 83       	std	Z+2, r24	; 0x02
    309c:	20 30       	cpi	r18, 0x00	; 0
    309e:	80 e0       	ldi	r24, 0x00	; 0
    30a0:	38 07       	cpc	r19, r24
    30a2:	80 e0       	ldi	r24, 0x00	; 0
    30a4:	48 07       	cpc	r20, r24
    30a6:	80 e4       	ldi	r24, 0x40	; 64
    30a8:	58 07       	cpc	r21, r24
    30aa:	78 f3       	brcs	.-34     	; 0x308a <__unpack_f+0x64>
    30ac:	20 c0       	rjmp	.+64     	; 0x30ee <__unpack_f+0xc8>
    30ae:	8f 3f       	cpi	r24, 0xFF	; 255
    30b0:	91 05       	cpc	r25, r1
    30b2:	79 f4       	brne	.+30     	; 0x30d2 <__unpack_f+0xac>
    30b4:	21 15       	cp	r18, r1
    30b6:	31 05       	cpc	r19, r1
    30b8:	41 05       	cpc	r20, r1
    30ba:	51 05       	cpc	r21, r1
    30bc:	19 f4       	brne	.+6      	; 0x30c4 <__unpack_f+0x9e>
    30be:	84 e0       	ldi	r24, 0x04	; 4
    30c0:	80 83       	st	Z, r24
    30c2:	08 95       	ret
    30c4:	44 ff       	sbrs	r20, 4
    30c6:	03 c0       	rjmp	.+6      	; 0x30ce <__unpack_f+0xa8>
    30c8:	81 e0       	ldi	r24, 0x01	; 1
    30ca:	80 83       	st	Z, r24
    30cc:	10 c0       	rjmp	.+32     	; 0x30ee <__unpack_f+0xc8>
    30ce:	10 82       	st	Z, r1
    30d0:	0e c0       	rjmp	.+28     	; 0x30ee <__unpack_f+0xc8>
    30d2:	8f 57       	subi	r24, 0x7F	; 127
    30d4:	90 40       	sbci	r25, 0x00	; 0
    30d6:	93 83       	std	Z+3, r25	; 0x03
    30d8:	82 83       	std	Z+2, r24	; 0x02
    30da:	83 e0       	ldi	r24, 0x03	; 3
    30dc:	80 83       	st	Z, r24
    30de:	87 e0       	ldi	r24, 0x07	; 7
    30e0:	22 0f       	add	r18, r18
    30e2:	33 1f       	adc	r19, r19
    30e4:	44 1f       	adc	r20, r20
    30e6:	55 1f       	adc	r21, r21
    30e8:	8a 95       	dec	r24
    30ea:	d1 f7       	brne	.-12     	; 0x30e0 <__unpack_f+0xba>
    30ec:	50 64       	ori	r21, 0x40	; 64
    30ee:	24 83       	std	Z+4, r18	; 0x04
    30f0:	35 83       	std	Z+5, r19	; 0x05
    30f2:	46 83       	std	Z+6, r20	; 0x06
    30f4:	57 83       	std	Z+7, r21	; 0x07
    30f6:	08 95       	ret

000030f8 <__umulhisi3>:
    30f8:	53 9f       	mul	r21, r19
    30fa:	c0 01       	movw	r24, r0
    30fc:	42 9f       	mul	r20, r18
    30fe:	b0 01       	movw	r22, r0
    3100:	52 9f       	mul	r21, r18
    3102:	70 0d       	add	r23, r0
    3104:	81 1d       	adc	r24, r1
    3106:	11 24       	eor	r1, r1
    3108:	91 1d       	adc	r25, r1
    310a:	34 9f       	mul	r19, r20
    310c:	70 0d       	add	r23, r0
    310e:	81 1d       	adc	r24, r1
    3110:	11 24       	eor	r1, r1
    3112:	91 1d       	adc	r25, r1
    3114:	08 95       	ret

00003116 <__udivmodqi4>:
    3116:	99 1b       	sub	r25, r25
    3118:	79 e0       	ldi	r23, 0x09	; 9
    311a:	04 c0       	rjmp	.+8      	; 0x3124 <__udivmodqi4_ep>

0000311c <__udivmodqi4_loop>:
    311c:	99 1f       	adc	r25, r25
    311e:	96 17       	cp	r25, r22
    3120:	08 f0       	brcs	.+2      	; 0x3124 <__udivmodqi4_ep>
    3122:	96 1b       	sub	r25, r22

00003124 <__udivmodqi4_ep>:
    3124:	88 1f       	adc	r24, r24
    3126:	7a 95       	dec	r23
    3128:	c9 f7       	brne	.-14     	; 0x311c <__udivmodqi4_loop>
    312a:	80 95       	com	r24
    312c:	08 95       	ret

0000312e <__udivmodhi4>:
    312e:	aa 1b       	sub	r26, r26
    3130:	bb 1b       	sub	r27, r27
    3132:	51 e1       	ldi	r21, 0x11	; 17
    3134:	07 c0       	rjmp	.+14     	; 0x3144 <__udivmodhi4_ep>

00003136 <__udivmodhi4_loop>:
    3136:	aa 1f       	adc	r26, r26
    3138:	bb 1f       	adc	r27, r27
    313a:	a6 17       	cp	r26, r22
    313c:	b7 07       	cpc	r27, r23
    313e:	10 f0       	brcs	.+4      	; 0x3144 <__udivmodhi4_ep>
    3140:	a6 1b       	sub	r26, r22
    3142:	b7 0b       	sbc	r27, r23

00003144 <__udivmodhi4_ep>:
    3144:	88 1f       	adc	r24, r24
    3146:	99 1f       	adc	r25, r25
    3148:	5a 95       	dec	r21
    314a:	a9 f7       	brne	.-22     	; 0x3136 <__udivmodhi4_loop>
    314c:	80 95       	com	r24
    314e:	90 95       	com	r25
    3150:	bc 01       	movw	r22, r24
    3152:	cd 01       	movw	r24, r26
    3154:	08 95       	ret

00003156 <__udivmodsi4>:
    3156:	a1 e2       	ldi	r26, 0x21	; 33
    3158:	1a 2e       	mov	r1, r26
    315a:	aa 1b       	sub	r26, r26
    315c:	bb 1b       	sub	r27, r27
    315e:	fd 01       	movw	r30, r26
    3160:	0d c0       	rjmp	.+26     	; 0x317c <__udivmodsi4_ep>

00003162 <__udivmodsi4_loop>:
    3162:	aa 1f       	adc	r26, r26
    3164:	bb 1f       	adc	r27, r27
    3166:	ee 1f       	adc	r30, r30
    3168:	ff 1f       	adc	r31, r31
    316a:	a2 17       	cp	r26, r18
    316c:	b3 07       	cpc	r27, r19
    316e:	e4 07       	cpc	r30, r20
    3170:	f5 07       	cpc	r31, r21
    3172:	20 f0       	brcs	.+8      	; 0x317c <__udivmodsi4_ep>
    3174:	a2 1b       	sub	r26, r18
    3176:	b3 0b       	sbc	r27, r19
    3178:	e4 0b       	sbc	r30, r20
    317a:	f5 0b       	sbc	r31, r21

0000317c <__udivmodsi4_ep>:
    317c:	66 1f       	adc	r22, r22
    317e:	77 1f       	adc	r23, r23
    3180:	88 1f       	adc	r24, r24
    3182:	99 1f       	adc	r25, r25
    3184:	1a 94       	dec	r1
    3186:	69 f7       	brne	.-38     	; 0x3162 <__udivmodsi4_loop>
    3188:	60 95       	com	r22
    318a:	70 95       	com	r23
    318c:	80 95       	com	r24
    318e:	90 95       	com	r25
    3190:	9b 01       	movw	r18, r22
    3192:	ac 01       	movw	r20, r24
    3194:	bd 01       	movw	r22, r26
    3196:	cf 01       	movw	r24, r30
    3198:	08 95       	ret

0000319a <__prologue_saves__>:
    319a:	2f 92       	push	r2
    319c:	3f 92       	push	r3
    319e:	4f 92       	push	r4
    31a0:	5f 92       	push	r5
    31a2:	6f 92       	push	r6
    31a4:	7f 92       	push	r7
    31a6:	8f 92       	push	r8
    31a8:	9f 92       	push	r9
    31aa:	af 92       	push	r10
    31ac:	bf 92       	push	r11
    31ae:	cf 92       	push	r12
    31b0:	df 92       	push	r13
    31b2:	ef 92       	push	r14
    31b4:	ff 92       	push	r15
    31b6:	0f 93       	push	r16
    31b8:	1f 93       	push	r17
    31ba:	cf 93       	push	r28
    31bc:	df 93       	push	r29
    31be:	cd b7       	in	r28, 0x3d	; 61
    31c0:	de b7       	in	r29, 0x3e	; 62
    31c2:	ca 1b       	sub	r28, r26
    31c4:	db 0b       	sbc	r29, r27
    31c6:	0f b6       	in	r0, 0x3f	; 63
    31c8:	f8 94       	cli
    31ca:	de bf       	out	0x3e, r29	; 62
    31cc:	0f be       	out	0x3f, r0	; 63
    31ce:	cd bf       	out	0x3d, r28	; 61
    31d0:	09 94       	ijmp

000031d2 <__epilogue_restores__>:
    31d2:	2a 88       	ldd	r2, Y+18	; 0x12
    31d4:	39 88       	ldd	r3, Y+17	; 0x11
    31d6:	48 88       	ldd	r4, Y+16	; 0x10
    31d8:	5f 84       	ldd	r5, Y+15	; 0x0f
    31da:	6e 84       	ldd	r6, Y+14	; 0x0e
    31dc:	7d 84       	ldd	r7, Y+13	; 0x0d
    31de:	8c 84       	ldd	r8, Y+12	; 0x0c
    31e0:	9b 84       	ldd	r9, Y+11	; 0x0b
    31e2:	aa 84       	ldd	r10, Y+10	; 0x0a
    31e4:	b9 84       	ldd	r11, Y+9	; 0x09
    31e6:	c8 84       	ldd	r12, Y+8	; 0x08
    31e8:	df 80       	ldd	r13, Y+7	; 0x07
    31ea:	ee 80       	ldd	r14, Y+6	; 0x06
    31ec:	fd 80       	ldd	r15, Y+5	; 0x05
    31ee:	0c 81       	ldd	r16, Y+4	; 0x04
    31f0:	1b 81       	ldd	r17, Y+3	; 0x03
    31f2:	aa 81       	ldd	r26, Y+2	; 0x02
    31f4:	b9 81       	ldd	r27, Y+1	; 0x01
    31f6:	ce 0f       	add	r28, r30
    31f8:	d1 1d       	adc	r29, r1
    31fa:	0f b6       	in	r0, 0x3f	; 63
    31fc:	f8 94       	cli
    31fe:	de bf       	out	0x3e, r29	; 62
    3200:	0f be       	out	0x3f, r0	; 63
    3202:	cd bf       	out	0x3d, r28	; 61
    3204:	ed 01       	movw	r28, r26
    3206:	08 95       	ret

00003208 <itoa>:
    3208:	fb 01       	movw	r30, r22
    320a:	9f 01       	movw	r18, r30
    320c:	e8 94       	clt
    320e:	42 30       	cpi	r20, 0x02	; 2
    3210:	c4 f0       	brlt	.+48     	; 0x3242 <itoa+0x3a>
    3212:	45 32       	cpi	r20, 0x25	; 37
    3214:	b4 f4       	brge	.+44     	; 0x3242 <itoa+0x3a>
    3216:	4a 30       	cpi	r20, 0x0A	; 10
    3218:	29 f4       	brne	.+10     	; 0x3224 <itoa+0x1c>
    321a:	97 fb       	bst	r25, 7
    321c:	1e f4       	brtc	.+6      	; 0x3224 <itoa+0x1c>
    321e:	90 95       	com	r25
    3220:	81 95       	neg	r24
    3222:	9f 4f       	sbci	r25, 0xFF	; 255
    3224:	64 2f       	mov	r22, r20
    3226:	77 27       	eor	r23, r23
    3228:	0e 94 97 18 	call	0x312e	; 0x312e <__udivmodhi4>
    322c:	80 5d       	subi	r24, 0xD0	; 208
    322e:	8a 33       	cpi	r24, 0x3A	; 58
    3230:	0c f0       	brlt	.+2      	; 0x3234 <itoa+0x2c>
    3232:	89 5d       	subi	r24, 0xD9	; 217
    3234:	81 93       	st	Z+, r24
    3236:	cb 01       	movw	r24, r22
    3238:	00 97       	sbiw	r24, 0x00	; 0
    323a:	a1 f7       	brne	.-24     	; 0x3224 <itoa+0x1c>
    323c:	16 f4       	brtc	.+4      	; 0x3242 <itoa+0x3a>
    323e:	5d e2       	ldi	r21, 0x2D	; 45
    3240:	51 93       	st	Z+, r21
    3242:	10 82       	st	Z, r1
    3244:	c9 01       	movw	r24, r18
    3246:	0c 94 7b 1b 	jmp	0x36f6	; 0x36f6 <strrev>

0000324a <sprintf>:
    324a:	0f 93       	push	r16
    324c:	1f 93       	push	r17
    324e:	df 93       	push	r29
    3250:	cf 93       	push	r28
    3252:	cd b7       	in	r28, 0x3d	; 61
    3254:	de b7       	in	r29, 0x3e	; 62
    3256:	2e 97       	sbiw	r28, 0x0e	; 14
    3258:	0f b6       	in	r0, 0x3f	; 63
    325a:	f8 94       	cli
    325c:	de bf       	out	0x3e, r29	; 62
    325e:	0f be       	out	0x3f, r0	; 63
    3260:	cd bf       	out	0x3d, r28	; 61
    3262:	0d 89       	ldd	r16, Y+21	; 0x15
    3264:	1e 89       	ldd	r17, Y+22	; 0x16
    3266:	86 e0       	ldi	r24, 0x06	; 6
    3268:	8c 83       	std	Y+4, r24	; 0x04
    326a:	1a 83       	std	Y+2, r17	; 0x02
    326c:	09 83       	std	Y+1, r16	; 0x01
    326e:	8f ef       	ldi	r24, 0xFF	; 255
    3270:	9f e7       	ldi	r25, 0x7F	; 127
    3272:	9e 83       	std	Y+6, r25	; 0x06
    3274:	8d 83       	std	Y+5, r24	; 0x05
    3276:	9e 01       	movw	r18, r28
    3278:	27 5e       	subi	r18, 0xE7	; 231
    327a:	3f 4f       	sbci	r19, 0xFF	; 255
    327c:	ce 01       	movw	r24, r28
    327e:	01 96       	adiw	r24, 0x01	; 1
    3280:	6f 89       	ldd	r22, Y+23	; 0x17
    3282:	78 8d       	ldd	r23, Y+24	; 0x18
    3284:	a9 01       	movw	r20, r18
    3286:	0e 94 55 19 	call	0x32aa	; 0x32aa <vfprintf>
    328a:	ef 81       	ldd	r30, Y+7	; 0x07
    328c:	f8 85       	ldd	r31, Y+8	; 0x08
    328e:	e0 0f       	add	r30, r16
    3290:	f1 1f       	adc	r31, r17
    3292:	10 82       	st	Z, r1
    3294:	2e 96       	adiw	r28, 0x0e	; 14
    3296:	0f b6       	in	r0, 0x3f	; 63
    3298:	f8 94       	cli
    329a:	de bf       	out	0x3e, r29	; 62
    329c:	0f be       	out	0x3f, r0	; 63
    329e:	cd bf       	out	0x3d, r28	; 61
    32a0:	cf 91       	pop	r28
    32a2:	df 91       	pop	r29
    32a4:	1f 91       	pop	r17
    32a6:	0f 91       	pop	r16
    32a8:	08 95       	ret

000032aa <vfprintf>:
    32aa:	2f 92       	push	r2
    32ac:	3f 92       	push	r3
    32ae:	4f 92       	push	r4
    32b0:	5f 92       	push	r5
    32b2:	6f 92       	push	r6
    32b4:	7f 92       	push	r7
    32b6:	8f 92       	push	r8
    32b8:	9f 92       	push	r9
    32ba:	af 92       	push	r10
    32bc:	bf 92       	push	r11
    32be:	cf 92       	push	r12
    32c0:	df 92       	push	r13
    32c2:	ef 92       	push	r14
    32c4:	ff 92       	push	r15
    32c6:	0f 93       	push	r16
    32c8:	1f 93       	push	r17
    32ca:	df 93       	push	r29
    32cc:	cf 93       	push	r28
    32ce:	cd b7       	in	r28, 0x3d	; 61
    32d0:	de b7       	in	r29, 0x3e	; 62
    32d2:	2c 97       	sbiw	r28, 0x0c	; 12
    32d4:	0f b6       	in	r0, 0x3f	; 63
    32d6:	f8 94       	cli
    32d8:	de bf       	out	0x3e, r29	; 62
    32da:	0f be       	out	0x3f, r0	; 63
    32dc:	cd bf       	out	0x3d, r28	; 61
    32de:	6c 01       	movw	r12, r24
    32e0:	1b 01       	movw	r2, r22
    32e2:	8a 01       	movw	r16, r20
    32e4:	fc 01       	movw	r30, r24
    32e6:	17 82       	std	Z+7, r1	; 0x07
    32e8:	16 82       	std	Z+6, r1	; 0x06
    32ea:	83 81       	ldd	r24, Z+3	; 0x03
    32ec:	81 ff       	sbrs	r24, 1
    32ee:	d1 c1       	rjmp	.+930    	; 0x3692 <vfprintf+0x3e8>
    32f0:	2e 01       	movw	r4, r28
    32f2:	08 94       	sec
    32f4:	41 1c       	adc	r4, r1
    32f6:	51 1c       	adc	r5, r1
    32f8:	f6 01       	movw	r30, r12
    32fa:	93 81       	ldd	r25, Z+3	; 0x03
    32fc:	f1 01       	movw	r30, r2
    32fe:	93 fd       	sbrc	r25, 3
    3300:	85 91       	lpm	r24, Z+
    3302:	93 ff       	sbrs	r25, 3
    3304:	81 91       	ld	r24, Z+
    3306:	1f 01       	movw	r2, r30
    3308:	88 23       	and	r24, r24
    330a:	09 f4       	brne	.+2      	; 0x330e <vfprintf+0x64>
    330c:	be c1       	rjmp	.+892    	; 0x368a <vfprintf+0x3e0>
    330e:	85 32       	cpi	r24, 0x25	; 37
    3310:	39 f4       	brne	.+14     	; 0x3320 <vfprintf+0x76>
    3312:	93 fd       	sbrc	r25, 3
    3314:	85 91       	lpm	r24, Z+
    3316:	93 ff       	sbrs	r25, 3
    3318:	81 91       	ld	r24, Z+
    331a:	1f 01       	movw	r2, r30
    331c:	85 32       	cpi	r24, 0x25	; 37
    331e:	29 f4       	brne	.+10     	; 0x332a <vfprintf+0x80>
    3320:	90 e0       	ldi	r25, 0x00	; 0
    3322:	b6 01       	movw	r22, r12
    3324:	0e 94 8b 1b 	call	0x3716	; 0x3716 <fputc>
    3328:	e7 cf       	rjmp	.-50     	; 0x32f8 <vfprintf+0x4e>
    332a:	ee 24       	eor	r14, r14
    332c:	ff 24       	eor	r15, r15
    332e:	20 e0       	ldi	r18, 0x00	; 0
    3330:	20 32       	cpi	r18, 0x20	; 32
    3332:	b0 f4       	brcc	.+44     	; 0x3360 <vfprintf+0xb6>
    3334:	8b 32       	cpi	r24, 0x2B	; 43
    3336:	69 f0       	breq	.+26     	; 0x3352 <vfprintf+0xa8>
    3338:	8c 32       	cpi	r24, 0x2C	; 44
    333a:	28 f4       	brcc	.+10     	; 0x3346 <vfprintf+0x9c>
    333c:	80 32       	cpi	r24, 0x20	; 32
    333e:	51 f0       	breq	.+20     	; 0x3354 <vfprintf+0xaa>
    3340:	83 32       	cpi	r24, 0x23	; 35
    3342:	71 f4       	brne	.+28     	; 0x3360 <vfprintf+0xb6>
    3344:	0b c0       	rjmp	.+22     	; 0x335c <vfprintf+0xb2>
    3346:	8d 32       	cpi	r24, 0x2D	; 45
    3348:	39 f0       	breq	.+14     	; 0x3358 <vfprintf+0xae>
    334a:	80 33       	cpi	r24, 0x30	; 48
    334c:	49 f4       	brne	.+18     	; 0x3360 <vfprintf+0xb6>
    334e:	21 60       	ori	r18, 0x01	; 1
    3350:	2c c0       	rjmp	.+88     	; 0x33aa <vfprintf+0x100>
    3352:	22 60       	ori	r18, 0x02	; 2
    3354:	24 60       	ori	r18, 0x04	; 4
    3356:	29 c0       	rjmp	.+82     	; 0x33aa <vfprintf+0x100>
    3358:	28 60       	ori	r18, 0x08	; 8
    335a:	27 c0       	rjmp	.+78     	; 0x33aa <vfprintf+0x100>
    335c:	20 61       	ori	r18, 0x10	; 16
    335e:	25 c0       	rjmp	.+74     	; 0x33aa <vfprintf+0x100>
    3360:	27 fd       	sbrc	r18, 7
    3362:	2c c0       	rjmp	.+88     	; 0x33bc <vfprintf+0x112>
    3364:	38 2f       	mov	r19, r24
    3366:	30 53       	subi	r19, 0x30	; 48
    3368:	3a 30       	cpi	r19, 0x0A	; 10
    336a:	98 f4       	brcc	.+38     	; 0x3392 <vfprintf+0xe8>
    336c:	26 ff       	sbrs	r18, 6
    336e:	08 c0       	rjmp	.+16     	; 0x3380 <vfprintf+0xd6>
    3370:	8e 2d       	mov	r24, r14
    3372:	88 0f       	add	r24, r24
    3374:	e8 2e       	mov	r14, r24
    3376:	ee 0c       	add	r14, r14
    3378:	ee 0c       	add	r14, r14
    337a:	e8 0e       	add	r14, r24
    337c:	e3 0e       	add	r14, r19
    337e:	15 c0       	rjmp	.+42     	; 0x33aa <vfprintf+0x100>
    3380:	8f 2d       	mov	r24, r15
    3382:	88 0f       	add	r24, r24
    3384:	f8 2e       	mov	r15, r24
    3386:	ff 0c       	add	r15, r15
    3388:	ff 0c       	add	r15, r15
    338a:	f8 0e       	add	r15, r24
    338c:	f3 0e       	add	r15, r19
    338e:	20 62       	ori	r18, 0x20	; 32
    3390:	0c c0       	rjmp	.+24     	; 0x33aa <vfprintf+0x100>
    3392:	8e 32       	cpi	r24, 0x2E	; 46
    3394:	21 f4       	brne	.+8      	; 0x339e <vfprintf+0xf4>
    3396:	26 fd       	sbrc	r18, 6
    3398:	78 c1       	rjmp	.+752    	; 0x368a <vfprintf+0x3e0>
    339a:	20 64       	ori	r18, 0x40	; 64
    339c:	06 c0       	rjmp	.+12     	; 0x33aa <vfprintf+0x100>
    339e:	8c 36       	cpi	r24, 0x6C	; 108
    33a0:	11 f4       	brne	.+4      	; 0x33a6 <vfprintf+0xfc>
    33a2:	20 68       	ori	r18, 0x80	; 128
    33a4:	02 c0       	rjmp	.+4      	; 0x33aa <vfprintf+0x100>
    33a6:	88 36       	cpi	r24, 0x68	; 104
    33a8:	49 f4       	brne	.+18     	; 0x33bc <vfprintf+0x112>
    33aa:	f1 01       	movw	r30, r2
    33ac:	93 fd       	sbrc	r25, 3
    33ae:	85 91       	lpm	r24, Z+
    33b0:	93 ff       	sbrs	r25, 3
    33b2:	81 91       	ld	r24, Z+
    33b4:	1f 01       	movw	r2, r30
    33b6:	88 23       	and	r24, r24
    33b8:	09 f0       	breq	.+2      	; 0x33bc <vfprintf+0x112>
    33ba:	ba cf       	rjmp	.-140    	; 0x3330 <vfprintf+0x86>
    33bc:	98 2f       	mov	r25, r24
    33be:	95 54       	subi	r25, 0x45	; 69
    33c0:	93 30       	cpi	r25, 0x03	; 3
    33c2:	18 f0       	brcs	.+6      	; 0x33ca <vfprintf+0x120>
    33c4:	90 52       	subi	r25, 0x20	; 32
    33c6:	93 30       	cpi	r25, 0x03	; 3
    33c8:	28 f4       	brcc	.+10     	; 0x33d4 <vfprintf+0x12a>
    33ca:	0c 5f       	subi	r16, 0xFC	; 252
    33cc:	1f 4f       	sbci	r17, 0xFF	; 255
    33ce:	ff e3       	ldi	r31, 0x3F	; 63
    33d0:	f9 83       	std	Y+1, r31	; 0x01
    33d2:	0d c0       	rjmp	.+26     	; 0x33ee <vfprintf+0x144>
    33d4:	83 36       	cpi	r24, 0x63	; 99
    33d6:	31 f0       	breq	.+12     	; 0x33e4 <vfprintf+0x13a>
    33d8:	83 37       	cpi	r24, 0x73	; 115
    33da:	71 f0       	breq	.+28     	; 0x33f8 <vfprintf+0x14e>
    33dc:	83 35       	cpi	r24, 0x53	; 83
    33de:	09 f0       	breq	.+2      	; 0x33e2 <vfprintf+0x138>
    33e0:	60 c0       	rjmp	.+192    	; 0x34a2 <vfprintf+0x1f8>
    33e2:	22 c0       	rjmp	.+68     	; 0x3428 <vfprintf+0x17e>
    33e4:	f8 01       	movw	r30, r16
    33e6:	80 81       	ld	r24, Z
    33e8:	89 83       	std	Y+1, r24	; 0x01
    33ea:	0e 5f       	subi	r16, 0xFE	; 254
    33ec:	1f 4f       	sbci	r17, 0xFF	; 255
    33ee:	42 01       	movw	r8, r4
    33f0:	71 e0       	ldi	r23, 0x01	; 1
    33f2:	a7 2e       	mov	r10, r23
    33f4:	b1 2c       	mov	r11, r1
    33f6:	16 c0       	rjmp	.+44     	; 0x3424 <vfprintf+0x17a>
    33f8:	62 e0       	ldi	r22, 0x02	; 2
    33fa:	66 2e       	mov	r6, r22
    33fc:	71 2c       	mov	r7, r1
    33fe:	60 0e       	add	r6, r16
    3400:	71 1e       	adc	r7, r17
    3402:	f8 01       	movw	r30, r16
    3404:	80 80       	ld	r8, Z
    3406:	91 80       	ldd	r9, Z+1	; 0x01
    3408:	26 ff       	sbrs	r18, 6
    340a:	03 c0       	rjmp	.+6      	; 0x3412 <vfprintf+0x168>
    340c:	6e 2d       	mov	r22, r14
    340e:	70 e0       	ldi	r23, 0x00	; 0
    3410:	02 c0       	rjmp	.+4      	; 0x3416 <vfprintf+0x16c>
    3412:	6f ef       	ldi	r22, 0xFF	; 255
    3414:	7f ef       	ldi	r23, 0xFF	; 255
    3416:	c4 01       	movw	r24, r8
    3418:	2c 87       	std	Y+12, r18	; 0x0c
    341a:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <strnlen>
    341e:	5c 01       	movw	r10, r24
    3420:	83 01       	movw	r16, r6
    3422:	2c 85       	ldd	r18, Y+12	; 0x0c
    3424:	2f 77       	andi	r18, 0x7F	; 127
    3426:	17 c0       	rjmp	.+46     	; 0x3456 <vfprintf+0x1ac>
    3428:	52 e0       	ldi	r21, 0x02	; 2
    342a:	65 2e       	mov	r6, r21
    342c:	71 2c       	mov	r7, r1
    342e:	60 0e       	add	r6, r16
    3430:	71 1e       	adc	r7, r17
    3432:	f8 01       	movw	r30, r16
    3434:	80 80       	ld	r8, Z
    3436:	91 80       	ldd	r9, Z+1	; 0x01
    3438:	26 ff       	sbrs	r18, 6
    343a:	03 c0       	rjmp	.+6      	; 0x3442 <vfprintf+0x198>
    343c:	6e 2d       	mov	r22, r14
    343e:	70 e0       	ldi	r23, 0x00	; 0
    3440:	02 c0       	rjmp	.+4      	; 0x3446 <vfprintf+0x19c>
    3442:	6f ef       	ldi	r22, 0xFF	; 255
    3444:	7f ef       	ldi	r23, 0xFF	; 255
    3446:	c4 01       	movw	r24, r8
    3448:	2c 87       	std	Y+12, r18	; 0x0c
    344a:	0e 94 65 1b 	call	0x36ca	; 0x36ca <strnlen_P>
    344e:	5c 01       	movw	r10, r24
    3450:	2c 85       	ldd	r18, Y+12	; 0x0c
    3452:	20 68       	ori	r18, 0x80	; 128
    3454:	83 01       	movw	r16, r6
    3456:	23 fd       	sbrc	r18, 3
    3458:	20 c0       	rjmp	.+64     	; 0x349a <vfprintf+0x1f0>
    345a:	08 c0       	rjmp	.+16     	; 0x346c <vfprintf+0x1c2>
    345c:	80 e2       	ldi	r24, 0x20	; 32
    345e:	90 e0       	ldi	r25, 0x00	; 0
    3460:	b6 01       	movw	r22, r12
    3462:	2c 87       	std	Y+12, r18	; 0x0c
    3464:	0e 94 8b 1b 	call	0x3716	; 0x3716 <fputc>
    3468:	fa 94       	dec	r15
    346a:	2c 85       	ldd	r18, Y+12	; 0x0c
    346c:	8f 2d       	mov	r24, r15
    346e:	90 e0       	ldi	r25, 0x00	; 0
    3470:	a8 16       	cp	r10, r24
    3472:	b9 06       	cpc	r11, r25
    3474:	98 f3       	brcs	.-26     	; 0x345c <vfprintf+0x1b2>
    3476:	11 c0       	rjmp	.+34     	; 0x349a <vfprintf+0x1f0>
    3478:	f4 01       	movw	r30, r8
    347a:	27 fd       	sbrc	r18, 7
    347c:	85 91       	lpm	r24, Z+
    347e:	27 ff       	sbrs	r18, 7
    3480:	81 91       	ld	r24, Z+
    3482:	4f 01       	movw	r8, r30
    3484:	90 e0       	ldi	r25, 0x00	; 0
    3486:	b6 01       	movw	r22, r12
    3488:	2c 87       	std	Y+12, r18	; 0x0c
    348a:	0e 94 8b 1b 	call	0x3716	; 0x3716 <fputc>
    348e:	2c 85       	ldd	r18, Y+12	; 0x0c
    3490:	f1 10       	cpse	r15, r1
    3492:	fa 94       	dec	r15
    3494:	08 94       	sec
    3496:	a1 08       	sbc	r10, r1
    3498:	b1 08       	sbc	r11, r1
    349a:	a1 14       	cp	r10, r1
    349c:	b1 04       	cpc	r11, r1
    349e:	61 f7       	brne	.-40     	; 0x3478 <vfprintf+0x1ce>
    34a0:	f1 c0       	rjmp	.+482    	; 0x3684 <vfprintf+0x3da>
    34a2:	84 36       	cpi	r24, 0x64	; 100
    34a4:	11 f0       	breq	.+4      	; 0x34aa <vfprintf+0x200>
    34a6:	89 36       	cpi	r24, 0x69	; 105
    34a8:	49 f5       	brne	.+82     	; 0x34fc <vfprintf+0x252>
    34aa:	27 ff       	sbrs	r18, 7
    34ac:	08 c0       	rjmp	.+16     	; 0x34be <vfprintf+0x214>
    34ae:	f8 01       	movw	r30, r16
    34b0:	60 81       	ld	r22, Z
    34b2:	71 81       	ldd	r23, Z+1	; 0x01
    34b4:	82 81       	ldd	r24, Z+2	; 0x02
    34b6:	93 81       	ldd	r25, Z+3	; 0x03
    34b8:	0c 5f       	subi	r16, 0xFC	; 252
    34ba:	1f 4f       	sbci	r17, 0xFF	; 255
    34bc:	09 c0       	rjmp	.+18     	; 0x34d0 <vfprintf+0x226>
    34be:	f8 01       	movw	r30, r16
    34c0:	60 81       	ld	r22, Z
    34c2:	71 81       	ldd	r23, Z+1	; 0x01
    34c4:	88 27       	eor	r24, r24
    34c6:	77 fd       	sbrc	r23, 7
    34c8:	80 95       	com	r24
    34ca:	98 2f       	mov	r25, r24
    34cc:	0e 5f       	subi	r16, 0xFE	; 254
    34ce:	1f 4f       	sbci	r17, 0xFF	; 255
    34d0:	4f e6       	ldi	r20, 0x6F	; 111
    34d2:	b4 2e       	mov	r11, r20
    34d4:	b2 22       	and	r11, r18
    34d6:	97 ff       	sbrs	r25, 7
    34d8:	09 c0       	rjmp	.+18     	; 0x34ec <vfprintf+0x242>
    34da:	90 95       	com	r25
    34dc:	80 95       	com	r24
    34de:	70 95       	com	r23
    34e0:	61 95       	neg	r22
    34e2:	7f 4f       	sbci	r23, 0xFF	; 255
    34e4:	8f 4f       	sbci	r24, 0xFF	; 255
    34e6:	9f 4f       	sbci	r25, 0xFF	; 255
    34e8:	f0 e8       	ldi	r31, 0x80	; 128
    34ea:	bf 2a       	or	r11, r31
    34ec:	a2 01       	movw	r20, r4
    34ee:	2a e0       	ldi	r18, 0x0A	; 10
    34f0:	30 e0       	ldi	r19, 0x00	; 0
    34f2:	0e 94 b7 1b 	call	0x376e	; 0x376e <__ultoa_invert>
    34f6:	78 2e       	mov	r7, r24
    34f8:	74 18       	sub	r7, r4
    34fa:	45 c0       	rjmp	.+138    	; 0x3586 <vfprintf+0x2dc>
    34fc:	85 37       	cpi	r24, 0x75	; 117
    34fe:	31 f4       	brne	.+12     	; 0x350c <vfprintf+0x262>
    3500:	3f ee       	ldi	r19, 0xEF	; 239
    3502:	b3 2e       	mov	r11, r19
    3504:	b2 22       	and	r11, r18
    3506:	2a e0       	ldi	r18, 0x0A	; 10
    3508:	30 e0       	ldi	r19, 0x00	; 0
    350a:	25 c0       	rjmp	.+74     	; 0x3556 <vfprintf+0x2ac>
    350c:	99 ef       	ldi	r25, 0xF9	; 249
    350e:	b9 2e       	mov	r11, r25
    3510:	b2 22       	and	r11, r18
    3512:	8f 36       	cpi	r24, 0x6F	; 111
    3514:	c1 f0       	breq	.+48     	; 0x3546 <vfprintf+0x29c>
    3516:	80 37       	cpi	r24, 0x70	; 112
    3518:	20 f4       	brcc	.+8      	; 0x3522 <vfprintf+0x278>
    351a:	88 35       	cpi	r24, 0x58	; 88
    351c:	09 f0       	breq	.+2      	; 0x3520 <vfprintf+0x276>
    351e:	b5 c0       	rjmp	.+362    	; 0x368a <vfprintf+0x3e0>
    3520:	0d c0       	rjmp	.+26     	; 0x353c <vfprintf+0x292>
    3522:	80 37       	cpi	r24, 0x70	; 112
    3524:	21 f0       	breq	.+8      	; 0x352e <vfprintf+0x284>
    3526:	88 37       	cpi	r24, 0x78	; 120
    3528:	09 f0       	breq	.+2      	; 0x352c <vfprintf+0x282>
    352a:	af c0       	rjmp	.+350    	; 0x368a <vfprintf+0x3e0>
    352c:	02 c0       	rjmp	.+4      	; 0x3532 <vfprintf+0x288>
    352e:	20 e1       	ldi	r18, 0x10	; 16
    3530:	b2 2a       	or	r11, r18
    3532:	b4 fe       	sbrs	r11, 4
    3534:	0b c0       	rjmp	.+22     	; 0x354c <vfprintf+0x2a2>
    3536:	84 e0       	ldi	r24, 0x04	; 4
    3538:	b8 2a       	or	r11, r24
    353a:	08 c0       	rjmp	.+16     	; 0x354c <vfprintf+0x2a2>
    353c:	b4 fe       	sbrs	r11, 4
    353e:	09 c0       	rjmp	.+18     	; 0x3552 <vfprintf+0x2a8>
    3540:	e6 e0       	ldi	r30, 0x06	; 6
    3542:	be 2a       	or	r11, r30
    3544:	06 c0       	rjmp	.+12     	; 0x3552 <vfprintf+0x2a8>
    3546:	28 e0       	ldi	r18, 0x08	; 8
    3548:	30 e0       	ldi	r19, 0x00	; 0
    354a:	05 c0       	rjmp	.+10     	; 0x3556 <vfprintf+0x2ac>
    354c:	20 e1       	ldi	r18, 0x10	; 16
    354e:	30 e0       	ldi	r19, 0x00	; 0
    3550:	02 c0       	rjmp	.+4      	; 0x3556 <vfprintf+0x2ac>
    3552:	20 e1       	ldi	r18, 0x10	; 16
    3554:	32 e0       	ldi	r19, 0x02	; 2
    3556:	b7 fe       	sbrs	r11, 7
    3558:	08 c0       	rjmp	.+16     	; 0x356a <vfprintf+0x2c0>
    355a:	f8 01       	movw	r30, r16
    355c:	60 81       	ld	r22, Z
    355e:	71 81       	ldd	r23, Z+1	; 0x01
    3560:	82 81       	ldd	r24, Z+2	; 0x02
    3562:	93 81       	ldd	r25, Z+3	; 0x03
    3564:	0c 5f       	subi	r16, 0xFC	; 252
    3566:	1f 4f       	sbci	r17, 0xFF	; 255
    3568:	07 c0       	rjmp	.+14     	; 0x3578 <vfprintf+0x2ce>
    356a:	f8 01       	movw	r30, r16
    356c:	60 81       	ld	r22, Z
    356e:	71 81       	ldd	r23, Z+1	; 0x01
    3570:	80 e0       	ldi	r24, 0x00	; 0
    3572:	90 e0       	ldi	r25, 0x00	; 0
    3574:	0e 5f       	subi	r16, 0xFE	; 254
    3576:	1f 4f       	sbci	r17, 0xFF	; 255
    3578:	a2 01       	movw	r20, r4
    357a:	0e 94 b7 1b 	call	0x376e	; 0x376e <__ultoa_invert>
    357e:	78 2e       	mov	r7, r24
    3580:	74 18       	sub	r7, r4
    3582:	ff e7       	ldi	r31, 0x7F	; 127
    3584:	bf 22       	and	r11, r31
    3586:	b6 fe       	sbrs	r11, 6
    3588:	0b c0       	rjmp	.+22     	; 0x35a0 <vfprintf+0x2f6>
    358a:	2e ef       	ldi	r18, 0xFE	; 254
    358c:	b2 22       	and	r11, r18
    358e:	7e 14       	cp	r7, r14
    3590:	38 f4       	brcc	.+14     	; 0x35a0 <vfprintf+0x2f6>
    3592:	b4 fe       	sbrs	r11, 4
    3594:	07 c0       	rjmp	.+14     	; 0x35a4 <vfprintf+0x2fa>
    3596:	b2 fc       	sbrc	r11, 2
    3598:	05 c0       	rjmp	.+10     	; 0x35a4 <vfprintf+0x2fa>
    359a:	8f ee       	ldi	r24, 0xEF	; 239
    359c:	b8 22       	and	r11, r24
    359e:	02 c0       	rjmp	.+4      	; 0x35a4 <vfprintf+0x2fa>
    35a0:	a7 2c       	mov	r10, r7
    35a2:	01 c0       	rjmp	.+2      	; 0x35a6 <vfprintf+0x2fc>
    35a4:	ae 2c       	mov	r10, r14
    35a6:	8b 2d       	mov	r24, r11
    35a8:	90 e0       	ldi	r25, 0x00	; 0
    35aa:	b4 fe       	sbrs	r11, 4
    35ac:	0d c0       	rjmp	.+26     	; 0x35c8 <vfprintf+0x31e>
    35ae:	fe 01       	movw	r30, r28
    35b0:	e7 0d       	add	r30, r7
    35b2:	f1 1d       	adc	r31, r1
    35b4:	20 81       	ld	r18, Z
    35b6:	20 33       	cpi	r18, 0x30	; 48
    35b8:	19 f4       	brne	.+6      	; 0x35c0 <vfprintf+0x316>
    35ba:	e9 ee       	ldi	r30, 0xE9	; 233
    35bc:	be 22       	and	r11, r30
    35be:	09 c0       	rjmp	.+18     	; 0x35d2 <vfprintf+0x328>
    35c0:	a3 94       	inc	r10
    35c2:	b2 fe       	sbrs	r11, 2
    35c4:	06 c0       	rjmp	.+12     	; 0x35d2 <vfprintf+0x328>
    35c6:	04 c0       	rjmp	.+8      	; 0x35d0 <vfprintf+0x326>
    35c8:	86 78       	andi	r24, 0x86	; 134
    35ca:	90 70       	andi	r25, 0x00	; 0
    35cc:	00 97       	sbiw	r24, 0x00	; 0
    35ce:	09 f0       	breq	.+2      	; 0x35d2 <vfprintf+0x328>
    35d0:	a3 94       	inc	r10
    35d2:	8b 2c       	mov	r8, r11
    35d4:	99 24       	eor	r9, r9
    35d6:	b3 fc       	sbrc	r11, 3
    35d8:	14 c0       	rjmp	.+40     	; 0x3602 <vfprintf+0x358>
    35da:	b0 fe       	sbrs	r11, 0
    35dc:	0f c0       	rjmp	.+30     	; 0x35fc <vfprintf+0x352>
    35de:	af 14       	cp	r10, r15
    35e0:	28 f4       	brcc	.+10     	; 0x35ec <vfprintf+0x342>
    35e2:	e7 2c       	mov	r14, r7
    35e4:	ef 0c       	add	r14, r15
    35e6:	ea 18       	sub	r14, r10
    35e8:	af 2c       	mov	r10, r15
    35ea:	08 c0       	rjmp	.+16     	; 0x35fc <vfprintf+0x352>
    35ec:	e7 2c       	mov	r14, r7
    35ee:	06 c0       	rjmp	.+12     	; 0x35fc <vfprintf+0x352>
    35f0:	80 e2       	ldi	r24, 0x20	; 32
    35f2:	90 e0       	ldi	r25, 0x00	; 0
    35f4:	b6 01       	movw	r22, r12
    35f6:	0e 94 8b 1b 	call	0x3716	; 0x3716 <fputc>
    35fa:	a3 94       	inc	r10
    35fc:	af 14       	cp	r10, r15
    35fe:	c0 f3       	brcs	.-16     	; 0x35f0 <vfprintf+0x346>
    3600:	04 c0       	rjmp	.+8      	; 0x360a <vfprintf+0x360>
    3602:	af 14       	cp	r10, r15
    3604:	10 f4       	brcc	.+4      	; 0x360a <vfprintf+0x360>
    3606:	fa 18       	sub	r15, r10
    3608:	01 c0       	rjmp	.+2      	; 0x360c <vfprintf+0x362>
    360a:	ff 24       	eor	r15, r15
    360c:	84 fe       	sbrs	r8, 4
    360e:	0f c0       	rjmp	.+30     	; 0x362e <vfprintf+0x384>
    3610:	80 e3       	ldi	r24, 0x30	; 48
    3612:	90 e0       	ldi	r25, 0x00	; 0
    3614:	b6 01       	movw	r22, r12
    3616:	0e 94 8b 1b 	call	0x3716	; 0x3716 <fputc>
    361a:	82 fe       	sbrs	r8, 2
    361c:	1f c0       	rjmp	.+62     	; 0x365c <vfprintf+0x3b2>
    361e:	81 fe       	sbrs	r8, 1
    3620:	03 c0       	rjmp	.+6      	; 0x3628 <vfprintf+0x37e>
    3622:	88 e5       	ldi	r24, 0x58	; 88
    3624:	90 e0       	ldi	r25, 0x00	; 0
    3626:	10 c0       	rjmp	.+32     	; 0x3648 <vfprintf+0x39e>
    3628:	88 e7       	ldi	r24, 0x78	; 120
    362a:	90 e0       	ldi	r25, 0x00	; 0
    362c:	0d c0       	rjmp	.+26     	; 0x3648 <vfprintf+0x39e>
    362e:	c4 01       	movw	r24, r8
    3630:	86 78       	andi	r24, 0x86	; 134
    3632:	90 70       	andi	r25, 0x00	; 0
    3634:	00 97       	sbiw	r24, 0x00	; 0
    3636:	91 f0       	breq	.+36     	; 0x365c <vfprintf+0x3b2>
    3638:	81 fc       	sbrc	r8, 1
    363a:	02 c0       	rjmp	.+4      	; 0x3640 <vfprintf+0x396>
    363c:	80 e2       	ldi	r24, 0x20	; 32
    363e:	01 c0       	rjmp	.+2      	; 0x3642 <vfprintf+0x398>
    3640:	8b e2       	ldi	r24, 0x2B	; 43
    3642:	b7 fc       	sbrc	r11, 7
    3644:	8d e2       	ldi	r24, 0x2D	; 45
    3646:	90 e0       	ldi	r25, 0x00	; 0
    3648:	b6 01       	movw	r22, r12
    364a:	0e 94 8b 1b 	call	0x3716	; 0x3716 <fputc>
    364e:	06 c0       	rjmp	.+12     	; 0x365c <vfprintf+0x3b2>
    3650:	80 e3       	ldi	r24, 0x30	; 48
    3652:	90 e0       	ldi	r25, 0x00	; 0
    3654:	b6 01       	movw	r22, r12
    3656:	0e 94 8b 1b 	call	0x3716	; 0x3716 <fputc>
    365a:	ea 94       	dec	r14
    365c:	7e 14       	cp	r7, r14
    365e:	c0 f3       	brcs	.-16     	; 0x3650 <vfprintf+0x3a6>
    3660:	7a 94       	dec	r7
    3662:	f2 01       	movw	r30, r4
    3664:	e7 0d       	add	r30, r7
    3666:	f1 1d       	adc	r31, r1
    3668:	80 81       	ld	r24, Z
    366a:	90 e0       	ldi	r25, 0x00	; 0
    366c:	b6 01       	movw	r22, r12
    366e:	0e 94 8b 1b 	call	0x3716	; 0x3716 <fputc>
    3672:	77 20       	and	r7, r7
    3674:	a9 f7       	brne	.-22     	; 0x3660 <vfprintf+0x3b6>
    3676:	06 c0       	rjmp	.+12     	; 0x3684 <vfprintf+0x3da>
    3678:	80 e2       	ldi	r24, 0x20	; 32
    367a:	90 e0       	ldi	r25, 0x00	; 0
    367c:	b6 01       	movw	r22, r12
    367e:	0e 94 8b 1b 	call	0x3716	; 0x3716 <fputc>
    3682:	fa 94       	dec	r15
    3684:	ff 20       	and	r15, r15
    3686:	c1 f7       	brne	.-16     	; 0x3678 <vfprintf+0x3ce>
    3688:	37 ce       	rjmp	.-914    	; 0x32f8 <vfprintf+0x4e>
    368a:	f6 01       	movw	r30, r12
    368c:	26 81       	ldd	r18, Z+6	; 0x06
    368e:	37 81       	ldd	r19, Z+7	; 0x07
    3690:	02 c0       	rjmp	.+4      	; 0x3696 <vfprintf+0x3ec>
    3692:	2f ef       	ldi	r18, 0xFF	; 255
    3694:	3f ef       	ldi	r19, 0xFF	; 255
    3696:	c9 01       	movw	r24, r18
    3698:	2c 96       	adiw	r28, 0x0c	; 12
    369a:	0f b6       	in	r0, 0x3f	; 63
    369c:	f8 94       	cli
    369e:	de bf       	out	0x3e, r29	; 62
    36a0:	0f be       	out	0x3f, r0	; 63
    36a2:	cd bf       	out	0x3d, r28	; 61
    36a4:	cf 91       	pop	r28
    36a6:	df 91       	pop	r29
    36a8:	1f 91       	pop	r17
    36aa:	0f 91       	pop	r16
    36ac:	ff 90       	pop	r15
    36ae:	ef 90       	pop	r14
    36b0:	df 90       	pop	r13
    36b2:	cf 90       	pop	r12
    36b4:	bf 90       	pop	r11
    36b6:	af 90       	pop	r10
    36b8:	9f 90       	pop	r9
    36ba:	8f 90       	pop	r8
    36bc:	7f 90       	pop	r7
    36be:	6f 90       	pop	r6
    36c0:	5f 90       	pop	r5
    36c2:	4f 90       	pop	r4
    36c4:	3f 90       	pop	r3
    36c6:	2f 90       	pop	r2
    36c8:	08 95       	ret

000036ca <strnlen_P>:
    36ca:	fc 01       	movw	r30, r24
    36cc:	05 90       	lpm	r0, Z+
    36ce:	61 50       	subi	r22, 0x01	; 1
    36d0:	70 40       	sbci	r23, 0x00	; 0
    36d2:	01 10       	cpse	r0, r1
    36d4:	d8 f7       	brcc	.-10     	; 0x36cc <strnlen_P+0x2>
    36d6:	80 95       	com	r24
    36d8:	90 95       	com	r25
    36da:	8e 0f       	add	r24, r30
    36dc:	9f 1f       	adc	r25, r31
    36de:	08 95       	ret

000036e0 <strnlen>:
    36e0:	fc 01       	movw	r30, r24
    36e2:	61 50       	subi	r22, 0x01	; 1
    36e4:	70 40       	sbci	r23, 0x00	; 0
    36e6:	01 90       	ld	r0, Z+
    36e8:	01 10       	cpse	r0, r1
    36ea:	d8 f7       	brcc	.-10     	; 0x36e2 <strnlen+0x2>
    36ec:	80 95       	com	r24
    36ee:	90 95       	com	r25
    36f0:	8e 0f       	add	r24, r30
    36f2:	9f 1f       	adc	r25, r31
    36f4:	08 95       	ret

000036f6 <strrev>:
    36f6:	dc 01       	movw	r26, r24
    36f8:	fc 01       	movw	r30, r24
    36fa:	67 2f       	mov	r22, r23
    36fc:	71 91       	ld	r23, Z+
    36fe:	77 23       	and	r23, r23
    3700:	e1 f7       	brne	.-8      	; 0x36fa <strrev+0x4>
    3702:	32 97       	sbiw	r30, 0x02	; 2
    3704:	04 c0       	rjmp	.+8      	; 0x370e <strrev+0x18>
    3706:	7c 91       	ld	r23, X
    3708:	6d 93       	st	X+, r22
    370a:	70 83       	st	Z, r23
    370c:	62 91       	ld	r22, -Z
    370e:	ae 17       	cp	r26, r30
    3710:	bf 07       	cpc	r27, r31
    3712:	c8 f3       	brcs	.-14     	; 0x3706 <strrev+0x10>
    3714:	08 95       	ret

00003716 <fputc>:
    3716:	0f 93       	push	r16
    3718:	1f 93       	push	r17
    371a:	cf 93       	push	r28
    371c:	df 93       	push	r29
    371e:	8c 01       	movw	r16, r24
    3720:	eb 01       	movw	r28, r22
    3722:	8b 81       	ldd	r24, Y+3	; 0x03
    3724:	81 ff       	sbrs	r24, 1
    3726:	1b c0       	rjmp	.+54     	; 0x375e <fputc+0x48>
    3728:	82 ff       	sbrs	r24, 2
    372a:	0d c0       	rjmp	.+26     	; 0x3746 <fputc+0x30>
    372c:	2e 81       	ldd	r18, Y+6	; 0x06
    372e:	3f 81       	ldd	r19, Y+7	; 0x07
    3730:	8c 81       	ldd	r24, Y+4	; 0x04
    3732:	9d 81       	ldd	r25, Y+5	; 0x05
    3734:	28 17       	cp	r18, r24
    3736:	39 07       	cpc	r19, r25
    3738:	64 f4       	brge	.+24     	; 0x3752 <fputc+0x3c>
    373a:	e8 81       	ld	r30, Y
    373c:	f9 81       	ldd	r31, Y+1	; 0x01
    373e:	01 93       	st	Z+, r16
    3740:	f9 83       	std	Y+1, r31	; 0x01
    3742:	e8 83       	st	Y, r30
    3744:	06 c0       	rjmp	.+12     	; 0x3752 <fputc+0x3c>
    3746:	e8 85       	ldd	r30, Y+8	; 0x08
    3748:	f9 85       	ldd	r31, Y+9	; 0x09
    374a:	80 2f       	mov	r24, r16
    374c:	09 95       	icall
    374e:	00 97       	sbiw	r24, 0x00	; 0
    3750:	31 f4       	brne	.+12     	; 0x375e <fputc+0x48>
    3752:	8e 81       	ldd	r24, Y+6	; 0x06
    3754:	9f 81       	ldd	r25, Y+7	; 0x07
    3756:	01 96       	adiw	r24, 0x01	; 1
    3758:	9f 83       	std	Y+7, r25	; 0x07
    375a:	8e 83       	std	Y+6, r24	; 0x06
    375c:	02 c0       	rjmp	.+4      	; 0x3762 <fputc+0x4c>
    375e:	0f ef       	ldi	r16, 0xFF	; 255
    3760:	1f ef       	ldi	r17, 0xFF	; 255
    3762:	c8 01       	movw	r24, r16
    3764:	df 91       	pop	r29
    3766:	cf 91       	pop	r28
    3768:	1f 91       	pop	r17
    376a:	0f 91       	pop	r16
    376c:	08 95       	ret

0000376e <__ultoa_invert>:
    376e:	fa 01       	movw	r30, r20
    3770:	aa 27       	eor	r26, r26
    3772:	28 30       	cpi	r18, 0x08	; 8
    3774:	51 f1       	breq	.+84     	; 0x37ca <__ultoa_invert+0x5c>
    3776:	20 31       	cpi	r18, 0x10	; 16
    3778:	81 f1       	breq	.+96     	; 0x37da <__ultoa_invert+0x6c>
    377a:	e8 94       	clt
    377c:	6f 93       	push	r22
    377e:	6e 7f       	andi	r22, 0xFE	; 254
    3780:	6e 5f       	subi	r22, 0xFE	; 254
    3782:	7f 4f       	sbci	r23, 0xFF	; 255
    3784:	8f 4f       	sbci	r24, 0xFF	; 255
    3786:	9f 4f       	sbci	r25, 0xFF	; 255
    3788:	af 4f       	sbci	r26, 0xFF	; 255
    378a:	b1 e0       	ldi	r27, 0x01	; 1
    378c:	3e d0       	rcall	.+124    	; 0x380a <__ultoa_invert+0x9c>
    378e:	b4 e0       	ldi	r27, 0x04	; 4
    3790:	3c d0       	rcall	.+120    	; 0x380a <__ultoa_invert+0x9c>
    3792:	67 0f       	add	r22, r23
    3794:	78 1f       	adc	r23, r24
    3796:	89 1f       	adc	r24, r25
    3798:	9a 1f       	adc	r25, r26
    379a:	a1 1d       	adc	r26, r1
    379c:	68 0f       	add	r22, r24
    379e:	79 1f       	adc	r23, r25
    37a0:	8a 1f       	adc	r24, r26
    37a2:	91 1d       	adc	r25, r1
    37a4:	a1 1d       	adc	r26, r1
    37a6:	6a 0f       	add	r22, r26
    37a8:	71 1d       	adc	r23, r1
    37aa:	81 1d       	adc	r24, r1
    37ac:	91 1d       	adc	r25, r1
    37ae:	a1 1d       	adc	r26, r1
    37b0:	20 d0       	rcall	.+64     	; 0x37f2 <__ultoa_invert+0x84>
    37b2:	09 f4       	brne	.+2      	; 0x37b6 <__ultoa_invert+0x48>
    37b4:	68 94       	set
    37b6:	3f 91       	pop	r19
    37b8:	2a e0       	ldi	r18, 0x0A	; 10
    37ba:	26 9f       	mul	r18, r22
    37bc:	11 24       	eor	r1, r1
    37be:	30 19       	sub	r19, r0
    37c0:	30 5d       	subi	r19, 0xD0	; 208
    37c2:	31 93       	st	Z+, r19
    37c4:	de f6       	brtc	.-74     	; 0x377c <__ultoa_invert+0xe>
    37c6:	cf 01       	movw	r24, r30
    37c8:	08 95       	ret
    37ca:	46 2f       	mov	r20, r22
    37cc:	47 70       	andi	r20, 0x07	; 7
    37ce:	40 5d       	subi	r20, 0xD0	; 208
    37d0:	41 93       	st	Z+, r20
    37d2:	b3 e0       	ldi	r27, 0x03	; 3
    37d4:	0f d0       	rcall	.+30     	; 0x37f4 <__ultoa_invert+0x86>
    37d6:	c9 f7       	brne	.-14     	; 0x37ca <__ultoa_invert+0x5c>
    37d8:	f6 cf       	rjmp	.-20     	; 0x37c6 <__ultoa_invert+0x58>
    37da:	46 2f       	mov	r20, r22
    37dc:	4f 70       	andi	r20, 0x0F	; 15
    37de:	40 5d       	subi	r20, 0xD0	; 208
    37e0:	4a 33       	cpi	r20, 0x3A	; 58
    37e2:	18 f0       	brcs	.+6      	; 0x37ea <__ultoa_invert+0x7c>
    37e4:	49 5d       	subi	r20, 0xD9	; 217
    37e6:	31 fd       	sbrc	r19, 1
    37e8:	40 52       	subi	r20, 0x20	; 32
    37ea:	41 93       	st	Z+, r20
    37ec:	02 d0       	rcall	.+4      	; 0x37f2 <__ultoa_invert+0x84>
    37ee:	a9 f7       	brne	.-22     	; 0x37da <__ultoa_invert+0x6c>
    37f0:	ea cf       	rjmp	.-44     	; 0x37c6 <__ultoa_invert+0x58>
    37f2:	b4 e0       	ldi	r27, 0x04	; 4
    37f4:	a6 95       	lsr	r26
    37f6:	97 95       	ror	r25
    37f8:	87 95       	ror	r24
    37fa:	77 95       	ror	r23
    37fc:	67 95       	ror	r22
    37fe:	ba 95       	dec	r27
    3800:	c9 f7       	brne	.-14     	; 0x37f4 <__ultoa_invert+0x86>
    3802:	00 97       	sbiw	r24, 0x00	; 0
    3804:	61 05       	cpc	r22, r1
    3806:	71 05       	cpc	r23, r1
    3808:	08 95       	ret
    380a:	9b 01       	movw	r18, r22
    380c:	ac 01       	movw	r20, r24
    380e:	0a 2e       	mov	r0, r26
    3810:	06 94       	lsr	r0
    3812:	57 95       	ror	r21
    3814:	47 95       	ror	r20
    3816:	37 95       	ror	r19
    3818:	27 95       	ror	r18
    381a:	ba 95       	dec	r27
    381c:	c9 f7       	brne	.-14     	; 0x3810 <__ultoa_invert+0xa2>
    381e:	62 0f       	add	r22, r18
    3820:	73 1f       	adc	r23, r19
    3822:	84 1f       	adc	r24, r20
    3824:	95 1f       	adc	r25, r21
    3826:	a0 1d       	adc	r26, r0
    3828:	08 95       	ret

0000382a <_exit>:
    382a:	f8 94       	cli

0000382c <__stop_program>:
    382c:	ff cf       	rjmp	.-2      	; 0x382c <__stop_program>
